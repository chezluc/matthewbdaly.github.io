<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Matthew Daly&apos;s Blog</title>
    <link>http://matthewdaly.co.uk</link>
    <updated>2015-06-21T15:44:40Z</updated>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>http://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="http://matthewdaly.co.uk"/>
    <subtitle>I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2015</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Getting django-behave and Celery to work together]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/">
        </link>
        <updated>2015-06-17T19:34:08Z</updated>
        <summary type="html"><![CDATA[<p>I ran into a small issue today. I’m working on a Django app which uses Celery to handle certain tasks that don’t need to return a response within the context of the HTTP request. I also wanted to use <code>django_behave</code> for running BDD tests. The trouble is that both <code>django_behave</code> and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.</p>
<p>However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting ETags in Laravel 5]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/">
        </link>
        <updated>2015-06-14T20:29:52Z</updated>
        <summary type="html"><![CDATA[<p>Although I’d prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, but that was through nothing more than inertia. For some time I’d been planning to switch to Laravel, largely because of the baked-in PHPUnit support, but events conspired against me - one big project that came along had a lot in common with an earlier one, so I forked it rather than starting over.</p>
<p>Recently I built a REST API for a mobile app, and I decided to use that to try out Laravel (if it had been available ...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My static site generator post on Sitepoint]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/">
        </link>
        <updated>2015-05-03T18:55:30Z</updated>
        <summary type="html"><![CDATA[<p>I wrote an article for Sitepoint recently about creating a static site generator as a Grunt plugin, similar to the one for this site. You can find it <a href="http://www.sitepoint.com/building-static-site-generator-grunt-plugin/">here</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I added search to my site with Lunr.js]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/">
        </link>
        <updated>2015-04-18T14:05:41Z</updated>
        <summary type="html"><![CDATA[<p>As I mentioned a while back, I recently switched the search on my site from Google’s site-specific search to <a href="http://lunrjs.com/">Lunr.js</a>. Since my site is built with a static site generator, I can’t implement search using database queries, and I was keen to have an integrated search method that would be fast and not require server-side scripting, and Lunr.js seemed to fit the bill.</p>
<p>The first task in implementing it was to generate the index. As I wrote the Grunt task that generates the blog, I amended that task to generate an index at the same time as I generated the pos...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding a new search engine to my site]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/">
        </link>
        <updated>2015-04-04T00:47:43Z</updated>
        <summary type="html"><![CDATA[<p>I’ve just finished implementing a new search engine for this site. Obviously, with it using a static site generator, searching a relational database isn’t an option. For a long while I’d just been getting by with Google’s site-specific search, which worked, but meant leaving the site to view the search results.</p>
<p>Now, I’ve implemented a client-side search system using <a href="http://lunrjs.com/">Lunr.js</a>. It wasn’t too time consuming, and as the index is generated with the rest of the site and loaded with the page, the response is almost instantaneous. I may write a future blog pos...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Syntax highlighting in fenced code blocks in Vim]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/">
        </link>
        <updated>2015-03-02T23:25:43Z</updated>
        <summary type="html"><![CDATA[<p>Just thought I’d share a little trick I picked up recently. As you may know, GitHub flavoured Markdown (which I use for this blog) supports fenced code blocks, allowing you to specify a language for a block of code in a Markdown file.</p>
<p>If you put the following code in your <code>.vimrc</code>, you can get syntax highlighting in those code blocks when you open up a Markdown file in Vim:</p>
<pre><code class="hljs lang-viml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-string">"Syntax highlighting in Markdown</td><tr><td class="linenos" data-pseudo-c...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Extending our Node.js and Redis chat server]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/">
        </link>
        <updated>2015-03-02T23:03:48Z</updated>
        <summary type="html"><![CDATA[<p>In this tutorial, we’re going to extend the chat system we built in <a href="/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/">the first tutorial</a> to include the following functionality:</p>
<ul>
<li>Persisting the data</li>
<li>Prompting users to sign in and storing their details in a Redis-backed session</li>
</ul>
<p>In the process, we’ll pick up a bit more about using Redis.</p>
<h2 id="persistence">Persistence</h2>
<p>Our first task is to make our messages persist when the session ends. Now, in order to do this, we’re going to use a list. A list in Redis can be th...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switching to my own static site generator]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/">
        </link>
        <updated>2015-02-15T18:11:22Z</updated>
        <summary type="html"><![CDATA[<p>As you may have seen if you’re visiting the site, I’ve finally switched over from Octopress to the static site generator I’ve been working on for the last few months. Apologies if you’re seeing lots of old posts in your RSS reader - there must have been an inconsistency between the RSS feed for this and that for Octopress.</p>
<p>I actually still really like Octopress, however I’m not and have never been a big fan of Ruby. Python and JavaScript are my two main go-to languages (although I do a lot of work professionally with PHP as well), so I wanted a solution in one of those languages, but...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a chat server with Node.js and Redis]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/">
        </link>
        <updated>2014-12-31T14:10:57Z</updated>
        <summary type="html"><![CDATA[<p>One of the more interesting capabilities Redis offers is its support for Pub/Sub. This allows you to subscribe to a specific channel, and then react when some content is published to that channel. In this tutorial, we’ll build a very simple web-based chat system that demonstrates Redis’s Pub/Sub support in action. Chat systems are pretty much synonymous with Node.js - it’s widely considered the “Hello, World!” of Node.js. Since we already used Node with the prior Redis tutorial, then it also makes sense to stick with it for this project too.</p>
<h2 id="installing-node-js">Installing Node.j...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My first Grunt plugin]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/">
        </link>
        <updated>2014-12-28T17:04:41Z</updated>
        <summary type="html"><![CDATA[<p>A while back, I mentioned that I’d written a Yeoman generator for creating a flat HTML blog, called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>. For this, I’d used the first Grunt plugin I could find for the purpose, which was <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a>. This worked, but I wasn’t really very happy with it.</p>
<p>The ideal Grunt plugin I had in mind was as follows:</p>
<ul>
<li>Used Handlebars for templating</li>
<li>Generated posts from Markdown files</li>
<li>Saved files in...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a URL shortener with Node.js and Redis]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/11/09/building-a-url-shortener-with-node-dot-js-and-redis/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/11/09/building-a-url-shortener-with-node-dot-js-and-redis/">
        </link>
        <updated>2014-11-09T17:13:16Z</updated>
        <summary type="html"><![CDATA[<p>The NoSQL movement is an exciting one for web developers. While relational databases such as MySQL are applicable to solving a wide range of problems, they aren’t the best solution for every problem. Sometimes you may find yourself dealing with a problem where an alternative data store may make more sense.</p>
<p>Redis is one of the data stores that have appeared as part of this movement, and is arguably one of the more generally useful ones. Since it solves different problems to a relational database, it’s not generally useful as an alternative to them - instead it is often used alongside ...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Django web server setup]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/">
        </link>
        <updated>2014-10-19T18:52:28Z</updated>
        <summary type="html"><![CDATA[<p>This isn’t really part of my Django tutorial series (that has now definitely concluded!), but I thought I’d share the setup I generally use for deploying Django applications, partly for my own reference, and partly because it is quite complex, and those readers who don’t wish to deploy to Heroku may want some guidance on how to deploy their new blogs to a VPS.</p>
<h2 id="operating-system">Operating system</h2>
<p>This isn’t actually that much of a big deal, but while I prefer Ubuntu on desktops, I generally use Debian Stable on servers, since it’s fanatically stable.</p>
<h2 id="database-s...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing generator-simple-static-blog]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/">
        </link>
        <updated>2014-10-05T18:56:46Z</updated>
        <summary type="html"><![CDATA[<p>I’m a big fan of static site generators. I ditched WordPress for Octopress over two years ago because it was free to host on GitHub Pages and much faster, had much better syntax highlighting, and I liked being able to write posts in Vim, and I’ve never looked back since.</p>
<p>That said, Octopress is written in Ruby, a language I’ve never been that keen on. Ideally I’d prefer to use Python or JavaScript, but none of the solutions I’ve found have been to my liking. Recently I’ve been using Grunt and Yeoman to some extent, and I’ve wondered about the idea of creating a Yeoman generator to bu...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 9]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/">
        </link>
        <updated>2014-09-28T19:51:02Z</updated>
        <summary type="html"><![CDATA[<p>Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I’d like to show you how to upgrade to it.</p>
<p>The biggest change is that Django 1.7 introduces its own migration system, which means South is now surplus to requirements. We therefore need to switch from South to Django’s native migrations. Fortunately, this is fairly straightforward.</p>
<p>First of all, activate your virtualenv:</p>
<pre><code class="hljs lang-bash singleline"><table>$ virtualenv venv</table></code></pre>
<p>Then make sure your ...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Changing date format from DD/MM/YYYY to YYYY-MM-DD in Vim]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/">
        </link>
        <updated>2014-09-28T18:53:34Z</updated>
        <summary type="html"><![CDATA[<p>Recently I had the occasion to reformat a load of dates in Vim from <code>DD/MM/YYYY</code> to <code>YYYY-MM-DD</code>. In Vim, this is quite simple:</p>
<pre><code class="hljs lang-viml singleline"><table>:<span class="hljs-preprocessor">%</span>s/\<span class="hljs-comment">(\d\{2}\)</span>\/\<span class="hljs-comment">(\d\{2}\)</span>\/\<span class="hljs-comment">(\d\{4}\)</span>/\<span class="hljs-number">3</span>-\<span class="hljs-number">2</span>-\<span class="hljs-number">1</span>/g</table></code></pre>
<p>This should be easy to adapt to reformatting other date formats.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 8]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/">
        </link>
        <updated>2014-08-31T21:00:00Z</updated>
        <summary type="html"><![CDATA[<p>Hello again! In our final instalment, we’ll wrap up our blog by:</p>
<ul>
<li>Implementing a sitemap</li>
<li>Optimising and tidying up the site</li>
<li>Creating a Fabric task for easier deployment</li>
</ul>
<p>I’ll also cover development tools and practices that can make using Django easier. But first there’s a few housekeeping tasks that need doing…</p>
<p>Don’t forget to activate your virtualenv - you should know how to do this off by heart by now!</p>
<h1 id="upgrading-django">Upgrading Django</h1>
<p>At the time of writing, Django 1.7 is due any day now, but it’s not out yet so I won...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 7]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/">
        </link>
        <updated>2014-08-25T16:15:01Z</updated>
        <summary type="html"><![CDATA[<p>Hello once again! In this instalment we’ll cover:</p>
<ul>
<li>Caching your content with Memcached to improve your site’s performance</li>
<li>Refactoring and simplifying our tests</li>
<li>Implementing additional feeds</li>
<li>Creating a simple search engine</li>
</ul>
<p>Don’t forget to activate your virtualenv:</p>
<pre><code class="hljs lang-bash singleline"><table>$ <span class="hljs-built_in">source</span> venv/bin/activate</table></code></pre>
<p>Now let’s get started!</p>
<h1 id="memcached">Memcached</h1>
<p>If you frequent (or used to frequent) social media sites like Reddit, Slas...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 6]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/">
        </link>
        <updated>2014-05-25T16:23:28Z</updated>
        <summary type="html"><![CDATA[<p>Welcome back! In this tutorial we’ll cover the following:</p>
<ul>
<li>Fixing bugs the TDD way</li>
<li>Setting up syntax highlighting for code snippets</li>
<li>Tidying up the front end</li>
</ul>
<p>Apologies, but I’m holding over implementing the search and additional feeds for a future instalment - in the past I’ve tried to cover too much in one post and that has led to me putting them off for much too long. So this instalment and future ones are going to be shorter so I can get them out the door quicker.</p>
<p>Ready? Let’s get started!</p>
<h1 id="fixing-bugs">Fixing bugs</h1>
<p>When...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django blog tutorial - the next generation - part 5]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/">
        </link>
        <updated>2014-05-24T19:15:54Z</updated>
        <summary type="html"><![CDATA[<p>Hello again! I was originally planning to cover implementing a search system, adding more feeds, and tidying up the front end in this instalment. However, I felt it was time for a change of pace, so instead, we’re going to look at:</p>
<ul>
<li>Checking code coverage and getting it to 100%</li>
<li>Using continuous integration</li>
<li>Deploying to Heroku</li>
</ul>
<p>Don’t worry, the original lesson isn’t going anywhere. We’ll still be implementing all of that later on, but today is the day we get your Django blog up and running on the web. That way, you can get a better idea of how Djang...]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django blog tutorial - the next generation - part 4]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/">
        </link>
        <updated>2014-02-15T17:45:00Z</updated>
        <summary type="html"><![CDATA[<p>Hello again! As promised, in this instalment we’ll implement categories and tags, as well as an RSS feed.</p>
<p>As usual, we need to switch into our virtualenv:</p>
<pre><code class="hljs lang-bash singleline"><table>$ <span class="hljs-built_in">source</span> venv/bin/activate</table></code></pre>
<h2 id="categories">Categories</h2>
<p>It’s worth taking a little time at this point to set out what we mean by categories and tags in this case, as the two can be very similar. In this case, we’ll use the following criteria:</p>
<ul>
<li>A post can have only one category, or none, but a categor...]]></summary>
    </entry>
</feed>