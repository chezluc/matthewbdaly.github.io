<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Matthew Daly&apos;s Blog</title>
    <link>http://matthewdaly.co.uk</link>
    <updated>2016-07-17T11:13:46Z</updated>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>http://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="http://matthewdaly.co.uk"/>
    <subtitle>I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2016</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Using Jenkins pipelines]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/06/05/using-jenkins-pipelines/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/06/05/using-jenkins-pipelines/">
        </link>
        <updated>2016-06-05T15:32:15Z</updated>
        <summary type="html"><![CDATA[<p>I use Jenkins as my main continuous integration solution at work, largely for two reasons:</p>
<ul>
<li>It generally works out cheaper to host it ourselves than to use one of the paid CI solutions for closed-source projects</li>
<li>The size of the plugin ecosystem</li>
</ul>
<p>However, we also use Travis CI for testing one or two open-source projects, and one distinct advantage Travis has is the way you can configure it using a single text file.</p>
<p>With the Pipeline plugin, it’s possible to define the steps required to run your tests in a <code>Jenkinsfile</code> and then set up a Pipeline job which reads that file from the version control system and runs it accordingly. Here’s a sample <code>Jenkinsfile</code> for a Laravel project:</p>
<pre><code class="hljs lang-groovy"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>node {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>   <span class="hljs-comment">// Mark the code checkout 'stage'....</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>   stage <span class="hljs-string">'Checkout'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-comment">// Get some code from a Bitbucket repository</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>   git <span class="hljs-string">credentialsId:</span> <span class="hljs-string">'5239c33e-10ab-4c1b-a4a0-91b96a07955e'</span>, <span class="hljs-string">url:</span> <span class="hljs-string">'git@bitbucket.org:matthewbdaly/my-app.git'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>   <span class="hljs-comment">// Install dependencies</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>   stage <span class="hljs-string">'Install dependencies'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>   <span class="hljs-comment">// Run Composer</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   sh <span class="hljs-string">'composer install'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>   <span class="hljs-comment">// Test stage</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>   stage <span class="hljs-string">'Test'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>   <span class="hljs-comment">// Run the tests</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>   sh <span class="hljs-string">"vendor/bin/phpunit"</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>}</td></table></code></pre>
<p>Note the steps it’s broken down into:</p>
<ul>
<li><code>stage</code> defines the start of a new stage in the build</li>
<li><code>git</code> defines a point where we check out the code from the repository</li>
<li><code>sh</code> defines a point where we run a shell command</li>
</ul>
<p>Using these three commands it’s straightforward to define a fairly simple build process for your application in a way that’s more easily repeatable when creating new projects - for instance, you can copy this over to a new project and change the source repository URL and you’re pretty much ready to go.</p>
<p>Unfortunately, support for the Pipeline plugin is missing from a lot of Jenkins plugins - for instance, I can’t publish the XML coverage reports. This is something of a deal-breaker for most of my projects as I use these kind of report plugins a lot - it’s one of the reasons I chose Jenkins over Travis. Still, this is definitely a big step forward, and if you don’t need this kind of reporting then there’s no reason not to consider using the Pipeline plugin for your Jenkins jobs. Hopefully in future more plugins will be amended to work with Pipeline so that it’s more widely usable.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding Google AMP support to my site]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/05/22/adding-google-amp-support-to-my-site/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/05/22/adding-google-amp-support-to-my-site/">
        </link>
        <updated>2016-05-22T22:29:34Z</updated>
        <summary type="html"><![CDATA[<p>You may have heard of Google’s <a href="https://www.ampproject.org/">AMP Project</a>, which allows you to create mobile-optimized pages using a subset of HTML. After seeing the sheer speed at which you can load an AMP page (practically instantaneous in many cases), I was eager to see if I could apply it to my own site.</p>
<p>I still wanted to retain the existing functionality for my site, such as comments and search, so I elected not to rewrite the whole thing to make it AMP-compliant. Instead, I opted to create AMP versions of every blog post, and link to them from the original. This preserves the advantages of AMP since search engines will be able to discover it from the header of the original, while allowing those wanting a richer experience to view the original, where the comments are hosted. You can now view the AMP version of any post by appending <code>amp/</code> to its URL.</p>
<p>The biggest problem was the images in the post body, as the <code>&lt;img&gt;</code> tag needs to be replaced by the <code>&lt;amp-img&gt;</code> tag, which also requires an explicit height and width. I wound up amending the renderer for AMP pages to render an image tag as an empty string, since I have only ever used one image in the post body and I think I can live without them.</p>
<p>It’s also a bit of a pain styling it as it will be awkward to use Bootstrap. I’ve therefore opted to skip Bootstrap for now and write my own fairly basic theme for the AMP pages instead.</p>
<p>It’ll be interesting to see what effect having the AMP versions of the pages available will have on my site in terms of search results. It obviously takes some time before the page gets crawled, and until then the AMP version won’t be served from the CDN used by AMP, so I really can’t guess what effect it will have right now.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Broadcasting events with Laravel and Socket.io]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/">
        </link>
        <updated>2016-05-14T20:00:00Z</updated>
        <summary type="html"><![CDATA[<p>PHP frameworks like Laravel aren’t really set up to handle real-time events properly, so if you want to build a real-time app, you’re generally better off with another platform, such as Node.js. However, if that only forms a small part of your application, you may still prefer to work with PHP. Fortunately it’s fairly straightforward to hand off the real-time aspects of your application to a dedicated microservice written using Node.js and still use Laravel to handle the rest of the functionality.</p>
<p>Here I’ll show you how I built a Laravel app that uses a separate Node.js script to handle sending real-time updates to the user.</p>
<h2 id="events-in-laravel">Events in Laravel</h2>
<p>In this case, I was building a REST API to serve as the back end for a Phonegap app that allowed users to message each other. The API includes an endpoint that allows users to create and fetch messages. Now, in theory, we could just repeatedly poll the endpoint for new messages, but that would be inefficient. What we needed was a way to notify users of new messages in real time, which seemed like the perfect opportunity to use Socket.io.</p>
<p>Laravel comes with a simple, but robust system that allows you to broadcast events to a Redis server. Another service can then listen for these events and carry out jobs on them, and there is no reason why this service has to be written in PHP. This makes it easy to decouple your application into smaller parts. In essence the functionality we wanted was as follows:</p>
<ul>
<li>Receive message</li>
<li>Push message to Redis</li>
<li>Have a separate service pick up message on Redis</li>
<li>Push message to clients</li>
</ul>
<p>First off, we need to define an event in our Laravel app. You can create a boilerplate with the following Artisan command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:event NewMessage</table></code></pre>
<p>This will create the file <code>app/Events/NewMessage.php</code>. You can then customise this as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">Event</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Message</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">ShouldBroadcast</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcast</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> $message;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     * Create a new event instance.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Message $message)</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Get message</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;message = $message;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     * Get the channels the event should be broadcast on.</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     * <span class="hljs-doctag">@return</span> array</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> [<span class="hljs-string">'room_'</span>.<span class="hljs-keyword">$this</span>-&gt;message-&gt;room_id];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}</td></table></code></pre>
<p>This particular event is a class that accepts a single argument, which is an instance of the <code>Message</code> model. This model includes an attribute of <code>room_id</code> that is used to determine which room the message is posted to - note that this is returned in the <code>broadcastOn()</code> method.</p>
<p>When we want to trigger our new event, we can do so as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">NewMessage</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Event::fire(<span class="hljs-keyword">new</span> NewMessage($message));</td></table></code></pre>
<p>Here, <code>$message</code> is the saved Eloquent object containing the message. Note the use of <code>SerializesModels</code> - this means that the Eloquent model is serialized into JSON when broadcasting the event.</p>
<p>We also need to make sure Redis is set as our broadcast driver. Ensure the Composer package <code>predis/predis</code> is installed, and set <code>BROADCAST_DRIVER=redis</code> in your <code>.env</code> file. Also, please note that I found that setting <code>QUEUE_DRIVER=redis</code> in <code>.env</code> as well broke the broadcasting system, so it looks like you can’t use Redis as both a queue and a broadcasting system unless you set up multiple connections.</p>
<p>Next, we need another server-side script to handle processing the received events and pushing the messages out. In my case, this was complicated by the fact that we were using HTTPS, courtesy of Let’s Encrypt. I installed the required dependencies for the Node.js script as follows:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install socket.io socket.io-client ioredis --save-dev</table></code></pre>
<p>Here’s an example Node.js script for processing the events:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> pkey = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/privkey.pem'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> pcert = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/fullchain.pem'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> options = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  key: pkey,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  cert: pcert</td><tr><td class="linenos" data-pseudo-content="8"></td><td>};</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">'https'</span>).createServer(options);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)(app);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ioredis'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> redis = <span class="hljs-keyword">new</span> Redis();</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>app.listen(<span class="hljs-number">9000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Server is running!'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handler</span>(<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    res.setHeader(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    res.writeHead(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    res.end(<span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>}</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>io.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>redis.psubscribe(<span class="hljs-string">'*'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, count</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>});</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>redis.on(<span class="hljs-string">'pmessage'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">subscribed, channel, message</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    message = <span class="hljs-built_in">JSON</span>.parse(message);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Channel is '</span> + channel + <span class="hljs-string">' and message is '</span> + message);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    io.emit(channel, message.data);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>});</td></table></code></pre>
<p>Note we use the <code>https</code> module instead of the <code>http</code> one, and we pass the key and certificate as options to the server. This server runs on port 9000, but feel free to move it to any arbitrary port you wish. In production, you’d normally use something like Supervisor or systemd to run a script like this as a service.</p>
<p>Next, we need a client-side script to connect to the Socket.io instance and handle any incoming messages. Here’s a very basic example that just dumps them to the browser console:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.location.protocol + <span class="hljs-string">'//'</span> + <span class="hljs-built_in">window</span>.location.hostname;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> socket = io(url, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-string">'secure'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-string">'reconnect'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-string">'reconnection delay'</span>: <span class="hljs-number">500</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-string">'max reconnection attempts'</span>: <span class="hljs-number">10</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>});</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> chosenEvent = <span class="hljs-string">'room_'</span> + room.id;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>socket.on(chosenEvent, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-built_in">console</span>.log(data);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>});</td></table></code></pre>
<p>Finally, we need to configure our web server. I’m using Nginx with PHP-FPM and PHP 7, and this is how I configured it:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">upstream</span> websocket {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9000</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">listen</span>         <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">add_header</span> X-Frame-Options SAMEORIGIN;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">gzip_proxied</span> any;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-attribute">gzip_types</span> text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml-rss text/javascript text/js application/json;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-attribute">fastcgi_index</span> index.php;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.well-known</span> {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-attribute">allow</span> all;</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-attribute">location</span> /socket.io {</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">"upgrade"</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-attribute">proxy_pass</span> https://websocket;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>}</td></table></code></pre>
<p>Any requests to <code>/socket.io</code> are proxied to port 9000, where our chat handling script is listening. Note that we allow the HTTPS connection to be upgraded to a WebSocket one.</p>
<p>Once that’s done, you just need to restart your PHP application and Nginx, and start running your chat script, and everything should be working fine. If it isn’t, the command <code>redis-cli monitor</code> is invaluable in verifying that the event is being published correctly.</p>
<h2 id="summary">Summary</h2>
<p>Getting this all working together did take quite a bit of trial and error, but that was mostly a matter of configuration. Actually implementing this is pretty straightforward, and it’s an easy way to add some basic real-time functionality to an existing Laravel application.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing faster Laravel tests]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/04/04/writing-faster-laravel-tests/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/04/04/writing-faster-laravel-tests/">
        </link>
        <updated>2016-04-04T19:55:15Z</updated>
        <summary type="html"><![CDATA[<p>Nowadays, Laravel tends to be my go-to PHP framework, to the point that we use it as our default framework at work. A big part of this is that Laravel is relatively easy to test, making practicing TDD a lot easier.</p>
<p>Out of the box running Laravel tests can be quite slow, which is a big issue - if your test suite takes several minutes to run, that’s a huge disruption. Also, Laravel doesn’t create a dedicated test database - instead it runs the tests against the same database you’re using normally, which is almost always not what you want. I’ll show you how to set up a dedicated test database, and how to use an in-memory SQLite database for faster tests. This results in cleaner and easier-to-maintain tests, since you can be sure the test database is restored to a clean state at the end of every test.</p>
<h2 id="setup">Setup</h2>
<p>Our first step is to make sure that when a new test begins, the following should happen:</p>
<ul>
<li>We should create a new transaction</li>
<li>We should empty and migrate our database</li>
</ul>
<p>Then, at the end of each test:</p>
<ul>
<li>We should roll back our transaction to restore the database to its prior state</li>
</ul>
<p>To do so, we can create custom <code>setUp()</code> and <code>tearDown()</code> methods for our base <code>TestCase</code> class. Save this in <code>tests/TestCase.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="6"></td><td>     * The base URL to use while testing the application.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">protected</span> $baseUrl = <span class="hljs-string">'http://localhost'</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * Creates the application.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Foundation\Application</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createApplication</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        $app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> $app;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">parent</span>::setUp();</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::beginTransaction();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        DB::rollBack();</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">parent</span>::tearDown();</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>}</td></table></code></pre>
<p>That takes care of building up and tearing down our database for each test.</p>
<p>EDIT: Turns out there’s actually a much easier way of doing this already included in Laravel. Just import and add either <code>use DatabaseMigrations;</code> or <code>use DatabaseTransactions;</code> to the <code>TestCase</code> class. The first will roll back the database and migrate it again after each test, while the second wraps each test in a transaction.</p>
<h2 id="using-an-in-memory-sqlite-database-for-testing-purposes">Using an in-memory SQLite database for testing purposes</h2>
<p>It’s not always practical to do this, especially if you rely on database features in PostgreSQL that aren’t available in SQLite, but if it is, it’s probably worth using an in-memory SQLite database for your tests. If you want to do so, here’s some example settings you might want to use in <code>phpunit.xml</code>:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"APP_ENV"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testing"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CACHE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"array"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_CONNECTION"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlite"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_DATABASE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">":memory:"</span>/&gt;</span></td></table></code></pre>
<p>This can result in a very significant speed boost.</p>
<p>I would still recommend that you test against your production database, but this can be easily handed off to a continuous integration server such as Jenkins, since that way it won’t disrupt your workflow. </p>
<p>During TDD, you’ll typically run your tests several times for any change you make, so if they’re too slow it can have a disastrous effect on your productivity. But with a few simple changes like this, you can ensure your tests run as quickly as possible. This approach should also be viable for Lumen apps.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a location aware web app with GeoDjango]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/">
        </link>
        <updated>2016-03-26T21:30:29Z</updated>
        <summary type="html"><![CDATA[<p>PostgreSQL has excellent support for geographical data thanks to the PostGIS extension, and Django allows you to take full advantage of it thanks to GeoDjango. In this tutorial, I’ll show you how to use GeoDjango to build a web app that allows users to search for gigs and events near them.</p>
<h2 id="requirements">Requirements</h2>
<p>I’ve made the jump to Python 3, and if you haven’t done so yet, I highly recommend it - it’s not hard, and there’s very few modules left that haven’t been ported across. As such, this tutorial assumes you’re using Python 3. You’ll also need to have Git, PostgreSQL and PostGIS installed - I’ll leave the details of doing so up to you as it varies by platform, but you can generally do so easily with a package manager on most Linux distros. On Mac OS X I recommend using Homebrew. If you’re on Windows I think your best bet is probably to use a Vagrant VM.</p>
<p>We’ll be using Django 1.9 - if by the time you read this a newer version of Django is out, it’s quite possible that some things may have changed and you’ll need to work around any problems caused. Generally search engines are the best place to look for this, and I’ll endeavour to keep the resulting Github repository as up to date as I can, so try those if you get stuck.</p>
<h2 id="getting-started">Getting started</h2>
<p>First of all, let’s create our database. Make sure you’re running as a user that has the required privileges to create users and databases for PostgreSQL and run the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createdb gigfinder</table></code></pre>
<p>This creates the database. Next, we create the user:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createuser <span class="hljs-_">-s</span> giguser -P</table></code></pre>
<p>You’ll be prompted to enter a password for the new user. Next, we want to use the <code>psql</code> command-line client to interact with our new database:</p>
<pre><code class="hljs lang-bash singleline"><table>$ psql gigfinder</table></code></pre>
<p>This connects to the database. Run these commands to set up access to the database and install the PostGIS extension:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE gigfinder TO giguser;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># CREATE EXTENSION postgis;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>With our database set up, it’s time to start work on our project. Let’s create our virtualenv in a new folder:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pyvenv venv</table></code></pre>
<p>Then activate it:</p>
<pre><code class="hljs lang-bash singleline"><table>$ <span class="hljs-built_in">source</span> venv/bin/activate</table></code></pre>
<p>Then we install Django, along with a few other production dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip install django-toolbelt</table></code></pre>
<p>And record our dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip freeze &gt; requirements.txt</table></code></pre>
<p>Next, we create our application skeleton:</p>
<pre><code class="hljs lang-bash singleline"><table>$ django-admin.py startproject gigfinder .</table></code></pre>
<p>We’ll also create a <code>.gitignore</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>.DS_Store</td><tr><td class="linenos" data-pseudo-content="3"></td><td>*.swp</td><tr><td class="linenos" data-pseudo-content="4"></td><td>node_modules/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>*.pyc</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git init</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git add .gitignore requirements/txt manage.py gigfinder</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git commit -m <span class="hljs-string">'Initial commit'</span></td></table></code></pre>
<p>Next, let’s create our first app, which we will call <code>gigs</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py startapp gigs</table></code></pre>
<p>We need to add our new app to the <code>INSTALLED_APPS</code> setting. While we’re there we’ll also add GIS support and set up the database connection. First, add the required apps to <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>]</td></table></code></pre>
<p>Next, configure the database:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>         <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.contrib.gis.db.backends.postgis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>         <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'gigfinder'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>         <span class="hljs-string">'USER'</span>: <span class="hljs-string">'giguser'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>         <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Let’s run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: sessions, contenttypes, admin, auth</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  Applying admin.0002_logentry_remove_auto_add... OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Applying contenttypes.0002_remove_content_<span class="hljs-built_in">type</span>_name... OK</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0007_alter_validators_add_error_messages... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying sessions.0001_initial... OK</td></table></code></pre>
<p>And create our superuser account:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py createsuperuser</table></code></pre>
<p>Now, we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Created gigs app'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master e72a846] Created gigs app</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 8 files changed, 24 insertions(+), 3 deletions(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/__init__.py</td><tr><td class="linenos" data-pseudo-content="6"></td><td> create mode 100644 gigs/admin.py</td><tr><td class="linenos" data-pseudo-content="7"></td><td> create mode 100644 gigs/apps.py</td><tr><td class="linenos" data-pseudo-content="8"></td><td> create mode 100644 gigs/migrations/__init__.py</td><tr><td class="linenos" data-pseudo-content="9"></td><td> create mode 100644 gigs/models.py</td><tr><td class="linenos" data-pseudo-content="10"></td><td> create mode 100644 gigs/tests.py</td><tr><td class="linenos" data-pseudo-content="11"></td><td> create mode 100644 gigs/views.py</td></table></code></pre>
<h2 id="our-first-model">Our first model</h2>
<p>At this point, it’s worth thinking about the models we plan for our app to have. First we’ll have a <code>Venue</code> model that contains details of an individual venue, which will include a name and a geographical location. We’ll also have an <code>Event</code> model that will represent an individual gig or event at a venue, and will include a name, date/time and a venue as a foreign key.</p>
<p>Before we start writing our first model, we need to write a test for it, but we also need to be able to create objects easily in our tests. We also want to be able to easily examine our objects, so we’ll install iPDB and Factory Boy:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install ipdb factory-boy</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Next, we write a test for the <code>Venue</code> model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Note that we randomly generate our location - this is done as suggested in <a href="http://stackoverflow.com/questions/32828890/using-factory-boy-with-geodjango-pointfields">this Stack Overflow post</a>.</p>
<p>Now, running our tests brings up an expected error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_<span class="hljs-built_in">test</span>_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Venue'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s create our <code>Venue</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>For now, we’re just creating a simple dummy model. Note that we import <code>models</code> from <code>django.contrib.gis.db</code> instead of the usual place - this gives us access to the additional geographical fields.</p>
<p>If we run our tests again we get an error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_venue"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_venue"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_venue"</span> ORDER BY <span class="hljs-string">"gigs_ve...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_venue<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_venue<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_venue<span class="hljs-string">" ORDER BY "</span>gigs_ve...</td></table></code></pre>
<p>Let’s update our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td></table></code></pre>
<p>Then create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0001_initial.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Venue</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: gigs, sessions, contenttypes, auth, admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0001_initial... OK</td></table></code></pre>
<p>Then if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.362s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They should pass. Note that Django may complain about needing to delete the test database before running the tests, but this should not cause any problems. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Venue model in place'</span></td></table></code></pre>
<p>With our venue done, let’s turn to our <code>Event</code> model. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Then we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_<span class="hljs-built_in">test</span>_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue, Event</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Event'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>As expected, this fails, so create an empty <code>Event</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests now will raise an error due to the table not existing:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_event"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_event"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_event"</span> ORDER BY <span class="hljs-string">"gigs_ev...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_event<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_event<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_event<span class="hljs-string">" ORDER BY "</span>gigs_ev...</td></table></code></pre>
<p>So let’s populate our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    venue = models.ForeignKey(Venue)</td></table></code></pre>
<p>And create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0002_event.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Event</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: auth, admin, sessions, contenttypes, gigs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0002_event... OK</td></table></code></pre>
<p>And run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.033s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Again, you may be prompted to delete the test database, but this should not be an issue.</p>
<p>With this done, let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Event model'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 47ba686] Added Event model</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 67 insertions(+), 1 deletion(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/migrations/0002_event.py</td></table></code></pre>
<h2 id="setting-up-the-admin">Setting up the admin</h2>
<p>For an application like this, you’d expect the curators of the site to maintain the gigs and venues stored in the database, and that’s an obvious use case for the Django admin. So let’s set our models up to be available in the admin. Open up <code>gigs/admin.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(Venue)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Now, if you start up the dev server as usual with <code>python manage.py runserver</code> and visit <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a>, you can see that our <code>Event</code> and <code>Venue</code> models are now available. However, the string representations of them are pretty useless. Let’s fix that. First, we amend our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td></table></code></pre>
<p>Next, we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>FF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: <span class="hljs-built_in">test</span>_create_event (gigs.tests.EventTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 74, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_event</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: <span class="hljs-string">'Event object'</span> != <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>- Event object</td><tr><td class="linenos" data-pseudo-content="12"></td><td>+ Queens of the Stone Age - Wembley Arena</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="16"></td><td>FAIL: <span class="hljs-built_in">test</span>_create_venue (gigs.tests.VenueTest)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 52, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>AssertionError: <span class="hljs-string">'Venue object'</span> != <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>- Venue object</td><tr><td class="linenos" data-pseudo-content="23"></td><td>+ Wembley Arena</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.059s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (failures=2)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They fail as expected. So let’s update <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> self.name</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    venue = models.ForeignKey(Venue)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"%s - %s"</span> % (self.name, self.venue.name)</td></table></code></pre>
<p>For the venue, we just use the name. For the event, we use the event name and the venue name.</p>
<p>Now, we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.048s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added models to admin'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 65d051f] Added models to admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 15 insertions(+), 1 deletion(-)</td></table></code></pre>
<p>Our models are now in place, so you may want to log into the admin and create a few venues and events so you can see it in action. Note that the location field for the <code>Venue</code> model creates a map widget that allows you to select a geographical location. It is a bit basic, however, so let’s make it better. Let’s install <code>django-floppyforms</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip install django-floppyforms</table></code></pre>
<p>And add it to our requirements:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip install -r requirements.txt</table></code></pre>
<p>Then add it to <code>INSTALLED_APPS</code> in <code>gigfinder/setttings.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'floppyforms'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>]</td></table></code></pre>
<p>Now we create a custom point widget for our admin, a custom form for the venues, and a custom venue admin:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> ModelForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> floppyforms.gis <span class="hljs-keyword">import</span> PointWidget, BaseGMapWidget</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPointWidget</span><span class="hljs-params">(PointWidget, BaseGMapWidget)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Media</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        js = (<span class="hljs-string">'/static/floppyforms/js/MapWidget.js'</span>,)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdminForm</span><span class="hljs-params">(ModelForm)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        fields = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'location'</span>]</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        widgets = {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'location'</span>: CustomPointWidget()</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    form = VenueAdminForm</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>admin.site.register(Venue, VenueAdmin)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Note in particular that we define the media for our widget so we can include some required Javascript. If you run the dev server again, you should see that the map widget in the admin is now provided by Google Maps, making it much easier to identify the correct location of the venue.</p>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/ requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Customised location widget'</span></td></table></code></pre>
<p>With our admin ready, it’s time to move on to the user-facing part of the web app.</p>
<h2 id="creating-our-views">Creating our views</h2>
<p>We will keep the front end for this app as simple as possible for the purposes of this tutorial, but of course you should feel free to expand upon this as you see fit. What we’ll do is create a form that uses HTML5 geolocation to get the user’s current geographical coordinates. It will then return events in the next week, ordered by how close the venue is. Please note that there are plans afoot in some browsers to prevent HTML5 geolocation from working unless content is server over HTTPS, so that may complicate things.</p>
<p>How do we query the database to get this data? It’s not too difficult, as shown in this example:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py shell</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Python 3.5.1 (default, Mar 25 2016, 00:17:15)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Type <span class="hljs-string">"copyright"</span>, <span class="hljs-string">"credits"</span> or <span class="hljs-string">"license"</span> <span class="hljs-keyword">for</span> more information.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>IPython 4.1.2 -- An enhanced Interactive Python.</td><tr><td class="linenos" data-pseudo-content="6"></td><td>?         -&gt; Introduction and overview of IPython<span class="hljs-string">'s features.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>%quickref -&gt; Quick reference.</td><tr><td class="linenos" data-pseudo-content="8"></td><td>help      -&gt; Python'</span>s own <span class="hljs-built_in">help</span> system.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>object?   -&gt; Details about <span class="hljs-string">'object'</span>, use <span class="hljs-string">'object??'</span> <span class="hljs-keyword">for</span> extra details.</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>In [1]: from gigs.models import *</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>In [2]: from django.contrib.gis.geos import Point</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>In [3]: from django.contrib.gis.db.models.functions import Distance</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>In [4]: location = Point(52.3749159, 1.1067473, srid=4326)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>In [5]: Venue.objects.all().annotate(distance=Distance(<span class="hljs-string">'location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Out[5]: [&lt;Venue: Diss Corn Hall&gt;, &lt;Venue: Waterfront Norwich&gt;, &lt;Venue: UEA Norwich&gt;, &lt;Venue: Wembley Arena&gt;]</td></table></code></pre>
<p>I’ve set up a number of venues using the admin, one round the corner, two in Norwich, and one in London. I then imported the models, the <code>Point</code> class, and the <code>Distance</code> function, and created a <code>Point</code> object. Note that the <code>Point</code> is passed three fields - the first and second are the latitude and longitude, respectively, while the <code>srid</code> field takes a value of <code>4326</code>. This field represents the <a href="https://en.wikipedia.org/wiki/SRID">Spatial Reference System Identifier</a> used for this query - we’ve gone for <a href="https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84">WGS 84</a>, which is a common choice and is referred to with the SRID 4326.</p>
<p>Now, we want the user to be able to submit the form and get the 5 nearest events in the next week. We can get the date for this time next week as follows:</p>
<pre><code class="hljs lang-python singleline"><table>In [<span class="hljs-number">6</span>]: next_week = timezone.now() + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</table></code></pre>
<p>Then we can get the events we want, sorted by distance, like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">7</span>]: Event.objects.filter(datetime__gte=timezone.now()).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">7</span>]: [&lt;Event: Primal Scream - UEA Norwich&gt;, &lt;Event: Queens of the Stone Age - Wembley Arena&gt;]</td></table></code></pre>
<p>With that in mind, let’s write the test for our view. The view should contain a single form that accepts a user’s geographical coordinates - for convenience we’ll autocomplete this with HTML5 geolocation. On submit, the user should see a list of the five closest events in the next week.</p>
<p>First, let’s test the GET request. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    Test lookup view</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py test gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to <span class="hljs-keyword">import</span> test module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">428</span>, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">369</span>, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot <span class="hljs-keyword">import</span> name <span class="hljs-string">'LookupView'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our first issue is that we can’t import the view in the test. Let’s fix that by amending <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests again results in the following:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: <span class="hljs-built_in">test</span>_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 88, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 600, <span class="hljs-keyword">in</span> reverse</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> force_text(iri_to_uri(resolver._reverse_with_prefix(view, prefix, *args, **kwargs)))</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 508, <span class="hljs-keyword">in</span> _reverse_with_prefix</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    (lookup_view_s, args, kwargs, len(patterns), patterns))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>django.core.urlresolvers.NoReverseMatch: Reverse <span class="hljs-keyword">for</span> <span class="hljs-string">'lookup'</span> with arguments <span class="hljs-string">'()'</span> and keyword arguments <span class="hljs-string">'{}'</span> not found. 0 pattern(s) tried: []</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.154s</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can’t resolve the URL for our new view, so we need to add it to our URLconf. First of all, save this as <code>gigs/urls.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Lookup</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    url(<span class="hljs-string">r''</span>, LookupView.as_view(), name=<span class="hljs-string">'lookup'</span>),</td><tr><td class="linenos" data-pseudo-content="7"></td><td>]</td></table></code></pre>
<p>Then amend <code>gigfinder/urls.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Gig URLs</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'gigs.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>]</td></table></code></pre>
<p>Then run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: <span class="hljs-built_in">test</span>_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 90, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.417s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We get a 405 response because the view does not accept GET requests. Let’s resolve that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>If we run our tests now:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: <span class="hljs-built_in">test</span>_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 89, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 6, <span class="hljs-keyword">in</span> get</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookup.html</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.409s</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We see that the template is not defined. Save the following as <code>gigs/templates/gigs/includes/base.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Gig finder<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Gig Finder<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-2.2.2.min.js"</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha256-36cp2Co+/62rEAAYHLmRCPIych47CvdM+uTBJwSzWjI="</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>And the following as <code>gigs/templates/gigs/lookup.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"latitude"</span>&gt;</span>Latitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_latitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"latitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"longitude"</span>&gt;</span>Longitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_longitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"longitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        navigator.geolocation.getCurrentPosition(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">var</span> lat = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_latitude'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-keyword">var</span> lon = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_longitude'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            lat.value = position.coords.latitude;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            lon.value = position.coords.longitude;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Note the JavaScript to populate the latitude and longitude. Now, if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 1.814s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Success! We now render our form as expected. Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs gigfinder</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented GET handler'</span></td></table></code></pre>
<h2 id="handling-post-requests">Handling POST requests</h2>
<p>Now we need to be able to handle POST requests and return the appropriate results. First, let’s write a test for it in our existing <code>LookupViewTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create venues to return</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        v1 = VenueFactory(name=<span class="hljs-string">'Venue1'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        v2 = VenueFactory(name=<span class="hljs-string">'Venue2'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        v3 = VenueFactory(name=<span class="hljs-string">'Venue3'</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        v4 = VenueFactory(name=<span class="hljs-string">'Venue4'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        v5 = VenueFactory(name=<span class="hljs-string">'Venue5'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        v6 = VenueFactory(name=<span class="hljs-string">'Venue6'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        v7 = VenueFactory(name=<span class="hljs-string">'Venue7'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        v8 = VenueFactory(name=<span class="hljs-string">'Venue8'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        v9 = VenueFactory(name=<span class="hljs-string">'Venue9'</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        v10 = VenueFactory(name=<span class="hljs-string">'Venue10'</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Create events to return</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        e1 = EventFactory(name=<span class="hljs-string">'Event1'</span>, venue=v1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        e2 = EventFactory(name=<span class="hljs-string">'Event2'</span>, venue=v2)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        e3 = EventFactory(name=<span class="hljs-string">'Event3'</span>, venue=v3)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        e4 = EventFactory(name=<span class="hljs-string">'Event4'</span>, venue=v4)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        e5 = EventFactory(name=<span class="hljs-string">'Event5'</span>, venue=v5)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        e6 = EventFactory(name=<span class="hljs-string">'Event6'</span>, venue=v6)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        e7 = EventFactory(name=<span class="hljs-string">'Event7'</span>, venue=v7)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        e8 = EventFactory(name=<span class="hljs-string">'Event8'</span>, venue=v8)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        e9 = EventFactory(name=<span class="hljs-string">'Event9'</span>, venue=v9)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        e10 = EventFactory(name=<span class="hljs-string">'Event10'</span>, venue=v10)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Set parameters</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        lat = <span class="hljs-number">52.3749159</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        lon = <span class="hljs-number">1.1067473</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Put together request</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'latitude'</span>: lat,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'longitude'</span>: lon</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'lookup'</span>), data)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookupresults.html'</span>)</td></table></code></pre>
<p>If we now run this test:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: <span class="hljs-built_in">test</span>_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 117, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 1.281s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can see that it fails because the POST method is not supported. Now we can start work on implementing it. First, let’s create a form in <code>gigs/forms.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> Form, FloatField</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupForm</span><span class="hljs-params">(Form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    latitude = FloatField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    longitude = FloatField()</td></table></code></pre>
<p>Next, edit <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            })</td></table></code></pre>
<p>Note that we’re switching from a <code>View</code> to a <code>FormView</code> so that it can more easily handle our form. We could render the form using this as well, but as it’s a simple form I decided it wasn’t worth the bother. Also, note that the longitude goes first - this caught me out as I expected the latitude to be the first argument.</p>
<p>Now, if we run our tests, they should complain about our missing template:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: <span class="hljs-built_in">test</span>_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 116, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/edit.py"</span>, line 222, <span class="hljs-keyword">in</span> post</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> self.form_valid(form)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 31, <span class="hljs-keyword">in</span> form_valid</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookupresults.html</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.506s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So let’s create <code>gigs/templates/gigs/lookupresults.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> event <span class="hljs-keyword">in</span> events %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ event.name }}</span><span class="xml"> - </span><span class="hljs-template-variable">{{ event.venue.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.728s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>However, if we try actually submitting the form by hand, we get the error <code>CSRF token missing or incorrect</code>. Edit <code>views.py</code> as follows to resolve this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> RequestContext</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>, RequestContext(request))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            })</td></table></code></pre>
<p>Here we’re adding the request context so that the CSRF token is available.</p>
<p>If you run the dev server, add a few events and venues via the admin, and submit a search, you’ll see that you’re returning events closest to you first.</p>
<p>Now that we can submit searches, we’re ready to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Can now retrieve search results'</span></td></table></code></pre>
<p>And we’re done! Of course, you may want to expand on this by plotting each gig venue on a map, or something like that, in which case there’s plenty of methods of doing so - you can retrieve the latitude and longitude in the template and use Google Maps to display them. I’ll leave doing so as an exercise for the reader.</p>
<p>I can’t say that working with GeoDjango isn’t a bit of a struggle at times, but being able to make spatial queries in this fashion is very useful. With more and more people carrying smartphones, you’re more likely than ever to be asked to build applications that return data based on someone’s geographical location, and GeoDjango is a great way to do this with a Django application. You can find the source on <a href="https://github.com/matthewbdaly/gigfinder">Github</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My experience using PHP 7 in production]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/03/18/my-experience-using-php-7-in-production/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/03/18/my-experience-using-php-7-in-production/">
        </link>
        <updated>2016-03-18T19:42:37Z</updated>
        <summary type="html"><![CDATA[<p>In the last couple of weeks I’ve been working on a PHP web app. Nothing unusual there, except this was the first time we’d used PHP 7 in production. We discussed the possibility a while back, and eventually decided that for certain projects we’d use PHP 7 without waiting another year or so (or maybe longer) for a version of Debian stable with it by default. I wanted to talk about how our experience has been using it in production.</p>
<h2 id="background">Background</h2>
<p>We’ve never really had a fixed stack that we work with at work before until recently - it was largely based on personal preferences and experience. For many jobs, especially content-based sites, we generally used WordPress - it has its issues, but it does fine for a lot of work. For more complex websites, I tended to use CodeIgniter because I’d learned it during my previous job and knew it fairly well, but I was not terribly happy with it - it’s a bit too basic and simplistic, as well as being somewhat behind the times, and I only really kept using it through inertia. For mobile app backends, I tended to use Django, partly for the admin interface, and partly because Django REST Framework makes it easy to build a REST API quickly and easily in a way that wasn’t viable with CodeIgniter.</p>
<p>This state of affairs couldn’t really continue. I love Python and Django, but I was the only one at work who had ever used Python, so in the event I got hit by a bus there would have been no-one who could have taken over from me. As for CodeIgniter, it was clearly falling further and further behind the curve, and I was sick of it and looking to replace it. Ideally we needed a PHP framework as both myself and my colleague knew it.</p>
<p>I’d also been playing around with Laravel on a few little projects, but I didn’t get the chance to use it for a new web app until autumn last year. Around the same time, we hired a third developer, who also had some experience using Laravel. In addition, the presence of Lumen meant that we could use that for smaller apps or services that were too small to use Laravel. We therefore decided to adopt Laravel as our default framework - in future we’d only use something else if there was a particular justification for it. I was rather sad to have to abandon Django for work, but pleased to have something more modern than CodeIgniter for PHP projects.</p>
<p>This also enabled us to standardize our new server builds. Over the last year or so I’ve been pushing to automate what we can of our server setup using Ansible. We now have two standard stacks that we plan to use for future projects. One is for WordPress sites and consists of:</p>
<ul>
<li>Debian stable</li>
<li>Apache</li>
<li>MySQL</li>
<li>PHP 5.6</li>
<li>Memcached</li>
<li>Varnish</li>
</ul>
<p>The other is for Laravel or Lumen web apps or APIs and consists of:</p>
<ul>
<li>Debian stable</li>
<li>Nginx</li>
<li>PHP 7</li>
<li>PostgreSQL</li>
<li>Redis</li>
</ul>
<p>It took some time to decide what we wanted to settle on, and indeed we had a mobile app backend that went up around Christmas time that we wrote with Laravel, but deployed to Apache with PHP 5.6 because when we first pushed it up PHP 7 wasn’t out yet. However, given that Laravel 5 already had good support for PHP 7, we decided we’d consider it for the next app. I tend to use PostgreSQL rather than MySQL these days because it has a lot of nifty features like JSON fields and full text search, and using an ORM minimises the learning curve in switching, and Redis is much more versatile than Memcached, so they were vital parts of our stack.</p>
<h2 id="our-first-php-7-app">Our first PHP 7 app</h2>
<p>As it happened, we had a Laravel app in the pipeline that was ideal. In the summer of last year, we were hired to make an existing site responsive. In the end, it turned out not to be viable - it was built with Zend Framework, which none of us had ever touched before, and the front end used a lot of custom widgets and fields tied together with RequireJS. The whole thing was rather unwieldy and extremely difficult to maintain and develop. In the end, we decided to tell the client it wasn’t worth developing further and offer to rewrite the whole thing from scratch using Laravel and AngularJS, with Browserify used to handle JavaScript modules - the basic idea was quite simple, it was just the implementation that was overly complex, and AngularJS made it possible to do the same kind of thing with a fraction of the code, so a rewrite in only a few weeks was perfectly viable.</p>
<p>I’d already built a simple prototype to demonstrate the viability of a from-scratch rewrite using Laravel and Angular, and once the client had agreed to the rewrite, we were able to work on this further. As the web app was going to be particularly useful on mobile devices, I wanted to ensure that the performance was as good as I could possibly make it. By the time we were looking at deploying it to a server, three months had passed since PHP 7 had been first released, and I figured that was long enough for the most serious issues to be resolved, and we could definitely do with the very significant speed boost we’d get from using PHP 7 for this app.</p>
<p>I use Jenkins to run my unit tests, and so I decided to try installing PHP 7 on the Jenkins server and using that to run the tests. The results were encouraging - nothing broke as a result of the switch. So we therefore decided that when we deployed it, we’d try it with PHP 7, and if it failed, we’d switch to PHP 5.6.</p>
<p>I opted to use FPM with Nginx rather than Apache and <code>mod_php</code> as since the web app was purely custom we didn’t really need things like <code>.htaccess</code>, and while the amount of static content was limited, Nginx might well perform better for this use case. The results are fairly encouraging - the document for the home page is typically being returned in under 40ms, with the uncached homepage taking around 1.5s in total to load, despite having to load several external fonts. In its current state, the web app scores a solid 93% on YSlow, which I’m very happy with. I don’t know how much of that is down to using PHP 7, but choosing to use it was definitely a good call. I have had absolutely zero issues with it during that time.</p>
<h2 id="summary">Summary</h2>
<p>As always, you should bear in mind that your needs may not be the same as mine, and it could well be that you need something that PHP 7 doesn’t yet provide. However, I have had a very good experience with PHP 7 in production. I may have had to jump through a few more hoops to get it up and running, and there may be some level of risk associated with using PHP 7 when it’s only been available for three months, but it’s more than justified by the speed we get from our web app. Using a configuration management system like Ansible means that even if you do have to jump through some extra hoops, it’s relatively easy to automate that process so it’s not as much of an issue as you might think. For me, using PHP 7 with a Laravel app has worked as well as I could have possibly hoped.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mocking external APIs in Python]]></title>
        <id>http://matthewdaly.co.uk/blog/2016/01/26/mocking-external-apis-in-python/</id>
        <link href="http://matthewdaly.co.uk/blog/2016/01/26/mocking-external-apis-in-python/">
        </link>
        <updated>2016-01-26T23:40:25Z</updated>
        <summary type="html"><![CDATA[<p>It’s quite common to have to integrate an external API into your web app for some of your functionality. However, it’s a really bad idea to have requests be sent to the remote API when running your tests. At best, it means your tests may fail due to unexpected circumstances, such as a network outage. At worst, you could wind up making requests to paid services that will cost you money, or sending push notifications to clients. It’s therefore a good idea to mock these requests in some way, but it can be fiddly.</p>
<p>In this post I’ll show you several ways you can mock an external API so as to prevent requests being sent when running your test suite. I’m sure there are many others, but these have worked for me recently.</p>
<h2 id="mocking-the-client-library">Mocking the client library</h2>
<p>Nowadays many third-party services realise that providing developers with client libraries in a variety of languages is a good idea, so it’s quite common to find a library for interfacing with a third-party service. Under these circumstances, the library itself is usually already thoroughly tested, so there’s no point in you writing additional tests for that functionality. Instead, you can just mock the client library so that the request is never sent, and if you need a response, then you can specify one that will remain constant.</p>
<p>I recently had to integrate Stripe with a mobile app backend, and I used their client library. I needed to ensure that I got the right result back. In this case I only needed to use the <code>Token</code> object’s <code>create()</code> method. I therefore created a new <code>MockToken</code> class that inherited from <code>Token</code>, and overrode its <code>create()</code> method so that it only accepted one card number and returned a hard-coded response for it:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> stripe.resource <span class="hljs-keyword">import</span> Token, convert_to_stripe_object</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> stripe.error <span class="hljs-keyword">import</span> CardError</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockToken</span><span class="hljs-params">(Token)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-meta">    @classmethod</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(cls, api_key=None, idempotency_key=None,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>               stripe_account=None, **params)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">if</span> params[<span class="hljs-string">'card'</span>][<span class="hljs-string">'number'</span>] != <span class="hljs-string">'4242424242424242'</span>:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-keyword">raise</span> CardError(<span class="hljs-string">'Invalid card number'</span>, <span class="hljs-keyword">None</span>, <span class="hljs-number">402</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        response = {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">"card"</span>: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>              <span class="hljs-string">"address_city"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>              <span class="hljs-string">"address_country"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>              <span class="hljs-string">"address_line1"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>              <span class="hljs-string">"address_line1_check"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>              <span class="hljs-string">"address_line2"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>              <span class="hljs-string">"address_state"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>              <span class="hljs-string">"address_zip"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>              <span class="hljs-string">"address_zip_check"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>              <span class="hljs-string">"brand"</span>: <span class="hljs-string">"Visa"</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>              <span class="hljs-string">"country"</span>: <span class="hljs-string">"US"</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>              <span class="hljs-string">"cvc_check"</span>: <span class="hljs-string">"unchecked"</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>              <span class="hljs-string">"dynamic_last4"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>              <span class="hljs-string">"exp_month"</span>: <span class="hljs-number">12</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>              <span class="hljs-string">"exp_year"</span>: <span class="hljs-number">2017</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>              <span class="hljs-string">"fingerprint"</span>: <span class="hljs-string">"49gS1c4YhLaGEQbj"</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>              <span class="hljs-string">"funding"</span>: <span class="hljs-string">"credit"</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>              <span class="hljs-string">"id"</span>: <span class="hljs-string">"card_17XXdZGzvyST06Z022EiG1zt"</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>              <span class="hljs-string">"last4"</span>: <span class="hljs-string">"4242"</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>              <span class="hljs-string">"metadata"</span>: {},</td><tr><td class="linenos" data-pseudo-content="34"></td><td>              <span class="hljs-string">"name"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>              <span class="hljs-string">"object"</span>: <span class="hljs-string">"card"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>              <span class="hljs-string">"tokenization_method"</span>: <span class="hljs-keyword">None</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>          },</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">"client_ip"</span>: <span class="hljs-string">"192.168.1.1"</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            <span class="hljs-string">"created"</span>: <span class="hljs-number">1453817861</span>,</td><tr><td class="linenos" data-pseudo-content="40"></td><td>            <span class="hljs-string">"id"</span>: <span class="hljs-string">"tok_42XXdZGzvyST06Z0LA6h5gJp"</span>,</td><tr><td class="linenos" data-pseudo-content="41"></td><td>            <span class="hljs-string">"livemode"</span>: <span class="hljs-keyword">False</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-string">"object"</span>: <span class="hljs-string">"token"</span>,</td><tr><td class="linenos" data-pseudo-content="43"></td><td>            <span class="hljs-string">"type"</span>: <span class="hljs-string">"card"</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">"used"</span>: <span class="hljs-keyword">False</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-keyword">return</span> convert_to_stripe_object(response, api_key, stripe_account)</td></table></code></pre>
<p>Much of this was lifted straight from the source code for the library. I then wrote a test for the payment endpoint and patched the <code>Token</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">    @mock.patch('stripe.Token', MockToken)</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_payments</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">"number"</span>: <span class="hljs-string">'1111111111111111'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">"exp_month"</span>: <span class="hljs-number">12</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">"exp_year"</span>: <span class="hljs-number">2017</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">"cvc"</span>: <span class="hljs-string">'123'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.post(reverse(<span class="hljs-string">'payments'</span>), data=data, format=<span class="hljs-string">'json'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)</td></table></code></pre>
<p>This replaced <code>stripe.Token</code> with <code>MockToken</code> so that in this test, the response from the client library was always going to be the expected one.</p>
<p>If the response doesn’t matter and all you need to do is be sure that the right method would have been called, this is easier. You can just mock the method in question using <code>MagicMock</code> and assert that it has been called afterwards, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReminderTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_send_reminder</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Mock PushService.create_message()</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        PushService.create_message = mock.MagicMock(name=<span class="hljs-string">"create_message"</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Call reminder task</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        send_reminder()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Check user would have received a push notification</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        PushService.create_message.assert_called_with([{<span class="hljs-string">'text'</span>: <span class="hljs-string">'My push'</span>, <span class="hljs-string">'conditions'</span>: [<span class="hljs-string">'UserID'</span>, <span class="hljs-string">'EQ'</span>, <span class="hljs-number">1</span>]}])</td></table></code></pre>
<h2 id="mocking-lower-level-requests">Mocking lower-level requests</h2>
<p>Sometimes, no client library is available, or it’s not worth using one as you only have to make one or two requests. Under these circumstances, there are ways to mock the actual request to the external API. If you’re using the <code>requests</code> module, then there’s a <code>responses</code> module that’s ideal for mocking the API request.</p>
<p>Suppose we have the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> json, requests</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_request_to_api</span><span class="hljs-params">(data)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment"># Put together the request</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    params = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'auth'</span>: settings.AUTH_KEY,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-string">'data'</span>: data</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = requests.post(settings.API_URL, data={<span class="hljs-string">'params'</span>: json.dumps(params)})</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">return</span> response</td></table></code></pre>
<p>Using <code>responses</code> we can mock the response from the server in our test:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APITest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">    @responses.activate</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_send_request</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-comment"># Mock the API</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        responses.add(responses.POST,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            settings.API_URL,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            status=<span class="hljs-number">200</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            content_type=<span class="hljs-string">"application/json"</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            body=<span class="hljs-string">'{"item_id": "12345678"}'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Call function</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">"surname"</span>: <span class="hljs-string">"Smith"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">"location"</span>: <span class="hljs-string">"London"</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        send_request_to_api(data)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check request went to correct URL</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">assert</span> responses.calls[<span class="hljs-number">0</span>].request.url == settings.API_URL</td></table></code></pre>
<p>Note the use of the <code>@responses.activate</code> decorator. We use <code>responses.add()</code> to set up each URL we want to be able to mock, and pass through details of the response we want to return. We then make the request, and check that it was made as expected.</p>
<p>You can find more details of the <code>responses</code> module <a href="https://github.com/getsentry/responses">here</a>.</p>
<h2 id="summary">Summary</h2>
<p>I’m pretty certain that there are other ways you can mock an external API in Python, but these ones have worked for me recently. If you use another method, please feel free to share it in the comments.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning more about React.js and Flux]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/11/18/learning-more-about-react-dot-js-and-flux/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/11/18/learning-more-about-react-dot-js-and-flux/">
        </link>
        <updated>2015-11-18T19:52:48Z</updated>
        <summary type="html"><![CDATA[<p>Udemy have very kindly provided some vouchers for free access to their course, <a href="https://www.udemy.com/learn-and-understand-reactjs/">“Build Web Apps with ReactJS and Flux”</a> for me to give away to subscribers. To redeem them, follow the link above and use the voucher code <code>MatthewDalysBlog</code>.</p>
<p>There’s only 50 in total, and they are on a first-come, first-serve basis, so I suggest you redeem them sooner rather than later.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a real-time Twitter stream with Node.js, React.js and Redis]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/">
        </link>
        <updated>2015-09-28T19:00:55Z</updated>
        <summary type="html"><![CDATA[<p>In the last year or so, React.js has taken the world of web development by storm. A major reason for this is that it makes it possible to build <strong>isomorphic web applications</strong> - web apps where the same code can run on the client and the server. Using React.js, you can create a template that will be executed on the server when the page first loads, and then the same template can be used to re-render the content when it’s updated, whether that’s via AJAX, WebSockets or another method entirely.</p>
<p>In this tutorial, I’ll show you how to build a simple Twitter streaming app using Node.js. I’m actually <a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">not the only person to have built this to demonstrate React.js</a>, but this is my own particular take on this idea, since it’s such an obvious use case for React.</p>
<h2 id="what-is-react-js-">What is React.js?</h2>
<p>A lot of people get rather confused over this issue. It’s not correct to compare React.js with frameworks like Angular.js or Backbone.js. It’s often described as being just the V in MVC - it represents only the view layer. If you’re familiar with Backbone.js, I think it’s reasonable to compare it to Backbone’s views, albeit with it’s own templating syntax. It does not provide the following functionality like Angular and Backbone do:</p>
<ul>
<li>Support for models</li>
<li>Any kind of helpers for AJAX requests</li>
<li>Routing</li>
</ul>
<p>If you want any of this functionality, you need to look elsewhere. There are other libraries around that offer this kind of functionality, so if you want to use React as part of some kind of MVC structure, you can do so - they’re just not a part of the library itself.</p>
<p>React.js uses a so-called “virtual DOM” - rather than re-rendering the view from scratch when the state changes, it instead retains a virtual representation of the DOM in memory, updates that, then figures out what changes are required to update the existing DOM and applies them. This means it only needs to change what actually changes, making it faster than other client-side templating systems. Combined with the ability to render on the server side, React allows you to build high-performance apps that combine the initial speed and SEO advantages of conventional web apps with the responsiveness of single-page web apps.</p>
<p>To create components with React, it’s common to use an XML-like syntax called JSX. It’s not mandatory, but I highly recommend you do so as it’s much more intuitive than creating elements with Javascript.</p>
<h2 id="getting-started">Getting started</h2>
<p>You’ll need a Twitter account, and you’ll need to <a href="https://apps.twitter.com/">create a new Twitter app</a> and obtain the security credentials to let you access the Twitter Streaming API. You’ll also need to have Node.js installed (ideally using <code>nvm</code>) - at this time, however, you can’t use Node 4.0 because of issues with Redis. You will also need to install Redis and hiredis - if you’ve worked through my previous Redis tutorials you’ll have these already.</p>
<p>We’ll be using Gulp.js as our build system, and Bower to install some client-side packages, so they need to be installed globally:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install -g gulp bower</table></code></pre>
<p>We’ll also be using Compass to help with our stylesheets:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo gem install compass</table></code></pre>
<p>With that all done, let’s start work on our app. First, run the following command to create your <code>package.json</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm init</table></code></pre>
<p>I’m assuming you’re well-acquainted enough with Node.js to know what this does, and can answer the questions without difficulty. I won’t cover writing tests in this tutorial as, but set your test command to <code>gulp test</code> and you should be fine.</p>
<p>Next, we need to install our dependencies:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm install --save babel compression express hbs hiredis lodash morgan react redis socket.io socket.io-client twitter</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ npm install --save-dev browserify chai gulp gulp-compass gulp-coveralls gulp-istanbul gulp-jshint gulp-mocha gulp-uglify jshint-stylish reactify request vinyl-buffer vinyl-source-stream</td></table></code></pre>
<h2 id="planning-our-app">Planning our app</h2>
<p>Now, it’s worth taking a few minutes to plan the architecture of our app. We want to have the app listen to the Twitter Streaming API and filter for messages with any arbitrary string in them - in this case we’ll be searching for “javascript”, but you can set it to anything you like. That means that that part needs to be listening all the time, not just when someone is using the app. Also, it doesn’t fit neatly into the usual request-response cycle - if several people visit the site at once, we could end up with multiple connections to fetch the same data, which is really not efficient, and could cause problems with duplicate tweets showing up.</p>
<p>Instead, we’ll have a separate <code>worker.js</code> file which runs constantly. This will listen for any matching messages on Twitter. When one appears, rather than returning it itself, it will publish it to a Redis channel, as well as persisting it. Then, the web app, which will be the <code>index.js</code> file, will be subscribed to the same channel, and will receive the tweet and push it to all current users using Socket.io.</p>
<p>This is a good example of a message queue, and it’s a common pattern. It allows you to create dedicated sections of your app for different tasks, and means that they will generally be more robust. In this case, if the worker goes down, users will still be able to see some tweets, and if the server goes down, the tweets will still be persisted to Redis. In theory, this would also allow you to scale your app more easily by allowing movement of different tasks to different servers, and several app servers could interface with a single worker process. The only downside I can think of is that on a platform like Heroku you’d need to have a separate dyno for the worker process - however, with Heroku’s pricing model changing recently, since this needs to be listening all the time it won’t be suitable for the free tier anyway.</p>
<p>First let’s create our <code>gulpfile.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> jshint = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-jshint'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> source = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-source-stream'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> buffer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-buffer'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> reactify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'reactify'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> mocha = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-mocha'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> istanbul = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-istanbul'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> coveralls = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-coveralls'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> compass = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-compass'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-uglify'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> paths = {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    scripts: [<span class="hljs-string">'components/*.jsx'</span>],</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    styles: [<span class="hljs-string">'src/sass/*.scss'</span>]</td><tr><td class="linenos" data-pseudo-content="16"></td><td>};</td><tr><td class="linenos" data-pseudo-content="17"></td><td>gulp.task(<span class="hljs-string">'lint'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-keyword">return</span> gulp.src([</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      <span class="hljs-string">'index.js'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      <span class="hljs-string">'components/*.js'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>      ])</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    .pipe(jshint())</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    .pipe(jshint.reporter(<span class="hljs-string">'jshint-stylish'</span>));</td><tr><td class="linenos" data-pseudo-content="24"></td><td>});</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>gulp.task(<span class="hljs-string">'compass'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  gulp.src(<span class="hljs-string">'src/sass/*.scss'</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    .pipe(compass({</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      css: <span class="hljs-string">'static/css'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      sass: <span class="hljs-string">'src/sass'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }))</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'static/css'</span>));</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});;</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>gulp.task(<span class="hljs-string">'test'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  gulp.src(<span class="hljs-string">'index.js'</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    .pipe(istanbul())</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    .pipe(istanbul.hookRequire())</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    .on(<span class="hljs-string">'finish'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      gulp.src(<span class="hljs-string">'test/test.js'</span>, {read: <span class="hljs-literal">false</span>})</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        .pipe(mocha({ reporter: <span class="hljs-string">'spec'</span> }))</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        .pipe(istanbul.writeReports({</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          reporters: [</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'lcovonly'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            <span class="hljs-string">'cobertura'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>            <span class="hljs-string">'html'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>          ]</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        }))</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        .pipe(istanbul.enforceThresholds({ thresholds: { global: <span class="hljs-number">90</span> } }))</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        .once(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="51"></td><td>          process.exit(<span class="hljs-number">0</span>);</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        })</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        .once(<span class="hljs-string">'end'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="54"></td><td>          process.exit(<span class="hljs-number">0</span>);</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="57"></td><td>});</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>gulp.task(<span class="hljs-string">'coveralls'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="60"></td><td>  gulp.src(<span class="hljs-string">'coverage/lcov.info'</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    .pipe(coveralls());</td><tr><td class="linenos" data-pseudo-content="62"></td><td>});</td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>gulp.task(<span class="hljs-string">'react'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="65"></td><td>  <span class="hljs-keyword">return</span> browserify({ entries: [<span class="hljs-string">'components/index.jsx'</span>], debug: <span class="hljs-literal">true</span> })</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    .transform(reactify)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    .bundle()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>    .pipe(source(<span class="hljs-string">'bundle.js'</span>))</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    .pipe(buffer())</td><tr><td class="linenos" data-pseudo-content="70"></td><td>    .pipe(uglify())</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'static/jsx/'</span>));</td><tr><td class="linenos" data-pseudo-content="72"></td><td>});</td><tr><td class="linenos" data-pseudo-content="73"></td><td></td><tr><td class="linenos" data-pseudo-content="74"></td><td>gulp.task(<span class="hljs-string">'default'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="75"></td><td>  gulp.watch(paths.scripts, [<span class="hljs-string">'react'</span>]);</td><tr><td class="linenos" data-pseudo-content="76"></td><td>  gulp.watch(paths.styles, [<span class="hljs-string">'compass'</span>]);</td><tr><td class="linenos" data-pseudo-content="77"></td><td>});</td></table></code></pre>
<p>I’ve added tasks for the tests and JSHint if you choose to implement them, but the only ones I’ve actually used are the <code>compass</code> and <code>react</code> tasks. The <code>compass</code> task compiles our Sass files into CSS, while the <code>react</code> task uses Browserify to take our React components and various modules installed using NPM and build them for use in the browser, as well as minifying them. Note that we installed React and lodash with NPM? We’re going to be able to use them in the browser and on the server, thanks to Browserify.</p>
<p>Next, let’s create our <code>worker.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> Twitter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'twitter'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Set up Twitter client</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> Twitter({</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  consumer_key: process.env.TWITTER_CONSUMER_KEY,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-keyword">var</span> redis;</td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>}</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>client.stream(<span class="hljs-string">'statuses/filter'</span>, {track: <span class="hljs-string">'javascript'</span>, lang: <span class="hljs-string">'en'</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">stream</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  stream.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tweet</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment">// Log it to console</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-built_in">console</span>.log(tweet);</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    redis.publish(<span class="hljs-string">'tweets'</span>, <span class="hljs-built_in">JSON</span>.stringify(tweet));</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// Persist it to a Redis list</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    redis.rpush(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-built_in">JSON</span>.stringify(tweet));</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>  <span class="hljs-comment">// Handle errors</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>  stream.on(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-built_in">console</span>.log(error);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>});</td></table></code></pre>
<p>Most of this file should be fairly straightforward. We set up our connection to Twitter (you’ll need to set the various environment variables listed here using the appropriate method for your operating system), and a connection to Redis.</p>
<p>We then stream the Twitter statuses that match our filter. When we receive a tweet, we log it to the console (feel free to comment this out in production if desired), publish it to a Redis channel called <code>tweets</code>, and push it to the end of a Redis list called <code>stream:tweets</code>. When an error occurs, we output it to the console.</p>
<p>Let’s use Bootstrap to style the app. Create the following <code>.bowerrc</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"directory"</span>: <span class="hljs-string">"static/bower_components"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>Then run <code>bower init</code> to create your <code>bower.json</code> file, and install Bootstrap with <code>bower install --save sass-bootstrap</code>.</p>
<p>With that done, create the file <code>src/sass/style.scss</code> and enter the following:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"compass/css3/user-interface"</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"compass/css3"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"../../static/bower_components/sass-bootstrap/lib/bootstrap.scss"</span>;</td></table></code></pre>
<p>This includes some dependencies from Compass, as well as Bootstrap. We won’t be using any of the Javascript features of Bootstrap, so we don’t need to worry too much about that.</p>
<p>Next, we need to create our view files. As React will be used to render the main part of the page, these will be very basic, with just the header, footer, and a section where the content can be rendered. First, create <code>views/index.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-variable">{{&gt; header }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'view'</span>&gt;</span></span><span class="hljs-template-variable">{{{ markup }}</span><span class="xml">}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"initial-state"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/json"</span>&gt;</span><span class="undefined"></span></span><span class="hljs-template-variable">{{{state}}</span><span class="xml"><span class="undefined">}</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span><span class="hljs-template-variable">{{&gt; footer }}</span><span class="xml"></span></td></table></code></pre>
<p>As promised, this a very basic layout. Note the <code>markup</code> variable, which is where the markup generated by React will be inserted when rendered on the server, and the <code>state</code> variable, which will contain the JSON representation of the data used to generate that markup. By passing that data through, you can ensure that the instance of React on the client has access to the same raw data as was passed through to the view on the server side, so that when the data needs to be re-rendered, it can be done so correctly.</p>
<p>We’ll also define partials for the header and footer. The header should be in <code>views/partials/header.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tweet Stream<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-inverse navbar-static-top"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"navigation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>Tweet Stream<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse navbar-right"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span></td></table></code></pre>
<p>The footer should be in <code>views/partials/footer.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/jsx/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Note that we load the Javascript file <code>/jsx/bundle.js</code> - this is the output from the command <code>gulp react</code>.</p>
<h2 id="creating-the-back-end">Creating the back end</h2>
<p>The next step is to implement the back end of the website. Add the following code as <code>index.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel/register'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> app = express();</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">'morgan'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-keyword">var</span> Tweets = React.createFactory(<span class="hljs-built_in">require</span>(<span class="hljs-string">'./components/tweets.jsx'</span>));</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-keyword">var</span> redis, subscribe;</td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-comment">// Set up logging</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>app.use(morgan(<span class="hljs-string">'combined'</span>));</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td><span class="hljs-comment">// Compress responses</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>app.use(compression());</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td><span class="hljs-comment">// Render main view</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="49"></td><td>  <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>  redis.lrange(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, tweets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>      <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="54"></td><td>      <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>      <span class="hljs-keyword">var</span> tweet_list = [];</td><tr><td class="linenos" data-pseudo-content="56"></td><td>      tweets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tweet, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        tweet_list.push(<span class="hljs-built_in">JSON</span>.parse(tweet));</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>      <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>      <span class="hljs-keyword">var</span> markup = React.renderToString(Tweets({ data: tweet_list.reverse() }));</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      res.render(<span class="hljs-string">'index'</span>, {</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        markup: markup,</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        state: <span class="hljs-built_in">JSON</span>.stringify(tweet_list)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="67"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="68"></td><td>});</td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="73"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td><span class="hljs-comment">// Handle connections</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="77"></td><td>  <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>  subscribe.subscribe(<span class="hljs-string">'tweets'</span>);</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>  <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>  <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="83"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="84"></td><td>  subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td>  <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>  socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>    subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="89"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="90"></td><td>});</td></table></code></pre>
<p>Let’s go through this bit by bit:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel/register'</span>);</td></table></code></pre>
<p>Here we’re using Babel, which is a library that allows you to use new features in Javascript even if the interpreter doesn’t support it. It also includes support for JSX, allowing us to require JSX files in the same way we would require Javascript files.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> app = express();</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">'morgan'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> Tweets = React.createFactory(<span class="hljs-built_in">require</span>(<span class="hljs-string">'./components/tweets.jsx'</span>));</td></table></code></pre>
<p>Here we include our dependencies. Most of this will be familiar if you’ve used Express before, but we also use React to create a factory for a React component called <code>Tweets</code>.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> redis, subscribe;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-comment">// Set up logging</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>app.use(morgan(<span class="hljs-string">'combined'</span>));</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-comment">// Compress responses</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>app.use(compression());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td></table></code></pre>
<p>This section sets up the various dependencies of our app. We set up two connections to Redis - one for handling subscriptions, the other for reading from Redis in order to populate the view.</p>
<p>We also set up our views, logging, compression of the HTTP response, a base URL, and serving static files.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Render main view</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  redis.lrange(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, tweets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>      <span class="hljs-keyword">var</span> tweet_list = [];</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      tweets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tweet, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tweet_list.push(<span class="hljs-built_in">JSON</span>.parse(tweet));</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">var</span> markup = React.renderToString(Tweets({ data: tweet_list.reverse() }));</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      res.render(<span class="hljs-string">'index'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        markup: markup,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        state: <span class="hljs-built_in">JSON</span>.stringify(tweet_list)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>});</td></table></code></pre>
<p>Our app only has a single view. When the root is loaded, we first of all fetch all of the tweets stored in the <code>stream:tweets</code> list. We then convert them into an array of objects.</p>
<p>Next, we render the <code>Tweets</code> component to a string, passing through our list of tweets, and store the resulting markup. We then pass through this markup and the string representation of the list of tweets to the template.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Handle connections</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  subscribe.subscribe(<span class="hljs-string">'tweets'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>});</td></table></code></pre>
<p>Finally, we set up Socket.io. On a connection, we subscribe to the Redis channel <code>tweets</code>. When we receive a tweet from Redis, we emit that tweet so that it can be rendered on the client side. We also handle disconnections by removing our Redis subscription.</p>
<h2 id="creating-our-react-components">Creating our React components</h2>
<p>Now it’s time to create our first React component. We’ll create a folder called <code>components</code> to hold all of our component files. Our first file is <code>components/index.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> Tweets = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweets.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> initialState = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'initial-state'</span>).innerHTML);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>React.render(</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tweets</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{initialState}</span> /&gt;</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  document.getElementById('view')</td><tr><td class="linenos" data-pseudo-content="9"></td><td>);</span></td></table></code></pre>
<p>First of all, we include React and the same <code>Tweets</code> component we require on the server side (note that we need to specify the <code>.jsx</code> extension). Then we fetch the initial state from the script tag we created earlier. Finally we render the <code>Tweets</code> components, passing through the initial state, and specify that it should be inserted into the element with an id of <code>view</code>. Note that we store the initial state in <code>data</code> - inside the component, this can be accessed as <code>this.props.data</code>.</p>
<p>This particular component is only ever used on the client side - when we render on the server side, we don’t need any of this functionality since we insert the markup into the <code>view</code> element anyway, and we don’t need to specify the initial data in the same way.</p>
<p>Next, we define the <code>Tweets</code> component in <code>components/tweets.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetlist.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> Tweets = React.createClass({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  componentDidMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">// Get reference to this item</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-keyword">var</span> tweets = that.props.data;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      tweets.push(<span class="hljs-built_in">JSON</span>.parse(data));</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      tweets = _.sortBy(tweets, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> item.created_at;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      }).reverse();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      that.setProps({data: tweets});</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  getInitialState: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">return</span> {data: <span class="hljs-keyword">this</span>.props.data};</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tweets<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">TweetList</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{this.props.data}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>});</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>module.exports = Tweets;</span></td></table></code></pre>
<p>Let’s work our way through each section in turn:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetlist.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>);</td></table></code></pre>
<p>Here we include React and the Socket.io client, as well as Lodash and our TweetList component. With React.js, it’s recommend that you break up each individual part of your interface into a single component - here <code>Tweets</code> is a wrapper for the tweets that includes a heading. <code>TweetList</code> will be a list of tweets, and <code>TweetItem</code> will be an individual tweet.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> Tweets = React.createClass({</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  componentDidMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get reference to this item</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-keyword">var</span> tweets = that.props.data;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      tweets.push(<span class="hljs-built_in">JSON</span>.parse(data));</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      tweets = _.sortBy(tweets, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> item.created_at;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      }).reverse();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      that.setProps({data: tweets});</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  },</td></table></code></pre>
<p>Note the use of the <code>componentDidMount</code> method - this fires when a component has been rendered on the client side for the first time. You can therefore use it to set up events. Here, we’re setting up a callback so that when a new tweet is received, we get the existing tweets (stored in <code>this.props.data</code>, although we copy <code>this</code> to <code>that</code> so it works inside the callback), push the tweet to this list, sort it by the time created, and set <code>this.props.data</code> to the new value. This will result in the tweets being re-rendered.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  getInitialState: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> {data: <span class="hljs-keyword">this</span>.props.data};</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  },</td></table></code></pre>
<p>Here we set the initial state of the component - it sets the value of <code>this.state</code> to the object passed through. In this case, we pass through an object with the attribute <code>data</code> defined as the value of <code>this.props.data</code>, meaning that <code>this.state.data</code> is the same as <code>this.props.data</code>.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tweets<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">TweetList</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{this.props.data}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>});</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>module.exports = Tweets;</span></td></table></code></pre>
<p>Here we define our <code>render</code> function. This can be thought of as our template. Note that we include <code>TweetList</code> inside our template and pass through the data. Afterwards, we export <code>Tweets</code> so it can be used elsewhere.</p>
<p>Next, let’s create <code>components/tweetlist.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> TweetItem = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetitem.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> TweetList = React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">var</span> tweetNodes = <span class="hljs-keyword">this</span>.props.data.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TweetItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{index}</span> <span class="hljs-attr">text</span>=<span class="hljs-string">{item.text}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TweetItem</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      );</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"tweets list-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        {tweetNodes}</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-built_in">module</span>.exports = TweetList;</td></table></code></pre>
<p>This component is much simpler - it only has a <code>render</code> method. First, we get our individual tweets and for each one define a <code>TweetItem</code> component. Then we create an unordered list and insert the tweet items into it. We then export it as <code>TweetList</code>.</p>
<p>Our final component is the <code>TweetItem</code> component. Create the following file at <code>components/tweetitem.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetItem = React.createClass({</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"list-group-item"</span>&gt;</span>{this.props.text}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>});</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-built_in">module</span>.exports = TweetItem;</td></table></code></pre>
<p>This component is quite simple. It’s just a single list item with the text set to the value of the tweet’s <code>text</code> attribute.</p>
<p>That should be all of our components done. Time to compile our Sass and run Browserify:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ gulp compass</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ gulp react</td></table></code></pre>
<p>Now, if you make sure you have set the appropriate environment variables, and then run <code>node worker.js</code> in one terminal, and <code>node index.js</code> in another, and visit <a href="http://localhost:5000/">http://localhost:5000/</a>, you should see your Twitter stream in all its glory! You can also try it with Javascript disabled, or in a text-mode browser such as Lynx, to demonstrate that it still renders the page without having to do anything on the client side - you’re only missing the constant updates.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>I hope this gives you some idea of how you can easily use React.js on both the client and server side to make web apps that are fast and search-engine friendly while also being easy to update dynamically. You can find the source code on <a href="https://github.com/matthewbdaly/twitter-stream">GitHub</a>.</p>
<p>Hopefully I’ll be able to publish some later tutorials that build on this to show you how to build more substantial web apps with React.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[A quick and easy Varnish primer]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/09/19/a-quick-and-easy-varnish-primer/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/09/19/a-quick-and-easy-varnish-primer/">
        </link>
        <updated>2015-09-19T18:42:17Z</updated>
        <summary type="html"><![CDATA[<p>As I <a href="/blog/2015/08/22/when-you-should-not-use-wordpress/">mentioned in an earlier post</a>, I recently had the occasion to use Varnish to improve the performance of a website that otherwise would have been unreliable and unusably slow due to WordPress making an excessive number of queries. The difference it made was nothing short of staggering, and I’m not exaggerating when I say it saved the day. I now use Ansible for provisioning new WordPress sites, and Varnish is now a standard part of my WordPress site setup playbook.</p>
<p>However, Varnish can be quite fiddly to configure, and it was something of a baptism of fire for me to learn how to configure it appropriately for this use case. I did make a few mistakes that caused problems down the line, so I thought I’d share the details of how I got it working for that particular site.</p>
<h2 id="what-is-varnish-">What is Varnish?</h2>
<p>From <a href="https://www.varnish-cache.org/about">the website</a>:</p>
<blockquote>
<p>Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents. Varnish Cache is really, really fast. It typically speeds up delivery with a factor of 300 - 1000x, depending on your architecture.</p>
</blockquote>
<p>In other words, you run it on the usual HTTP or HTTPS port, move your usual web server to a different port, and configure it, and it will cache web pages so they can be served more quickly to subsequent visitors.</p>
<p>Be warned - Varnish is not something where you can generally stick with the default settings. The default behaviour does make a lot of sense, but in practice almost no-one will be able to get away with leaving the configuration unchanged.</p>
<h2 id="installing-varnish">Installing Varnish</h2>
<p>If you’re using Debian or a derivative such as Ubuntu, Varnish is available via <code>apt-get</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo apt-get install varnish</table></code></pre>
<p>You may also want to install the documentation:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo apt-get install varnish-doc</table></code></pre>
<p>If you’re using Apache I’d also recommend installing <code>libapache2-mod-rpaf</code> and enabling it with <code>sudo a2enmod rpaf</code> - without this, Apache will log all incoming requests as coming from the same server.</p>
<p>I’m assuming you already have a normal web server installed. I’ll assume you’re using Apache, but it shouldn’t be hard to adapt these instructions to work with Nginx. I’m also assuming that the site you want to use Varnish for is a WordPress site with WooCommerce and W3 Total Cache installed. However, this is only for example purposes. If you want to use Varnish for a different web app, you’ll need to plan your caching strategy around that web app yourself.</p>
<p>Please also note that this is using Varnish 4.0, which is the version available with Debian Jessie. If you’re using an older operating system, you may have Varnish 3.0 in the repositories - be warned, the configuration language changed in Varnish 4.0, so the examples here will not work with older versions of Varnish.</p>
<p>By default, Varnish runs on port 6081, which is fine for testing it out, but once you want to go live it’s not what you want. When it’s time to go live, you’ll need to open up <code>/etc/default/varnish</code> and edit the value of <code>DAEMON_OPTS</code> to something like this:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DAEMON_OPTS=<span class="hljs-string">"-a :80 \</td><tr><td class="linenos" data-pseudo-content="2"></td><td>             -T localhost:6082 \</td><tr><td class="linenos" data-pseudo-content="3"></td><td>             -f /etc/varnish/default.vcl \</td><tr><td class="linenos" data-pseudo-content="4"></td><td>             -S /etc/varnish/secret \</td><tr><td class="linenos" data-pseudo-content="5"></td><td>             -s malloc,256m"</span></td></table></code></pre>
<p>Note that the <code>-a</code> flag represents the port Varnish is running on.</p>
<p>If you’re using an operating system that uses <code>systemd</code>, such as Debian Jessie, this alone won’t be sufficient. Create a new file at <code>/etc/systemd/system/varnish.service</code> and enter the following:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>[Unit]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Description=Varnish HTTP accelerator</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>[Service]</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Type=forking</td><tr><td class="linenos" data-pseudo-content="6"></td><td>LimitNOFILE=131072</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LimitMEMLOCK=82000</td><tr><td class="linenos" data-pseudo-content="8"></td><td>ExecStartPre=/usr/sbin/varnishd -C <span class="hljs-_">-f</span> /etc/varnish/default.vcl</td><tr><td class="linenos" data-pseudo-content="9"></td><td>ExecStart=/usr/sbin/varnishd <span class="hljs-_">-a</span> :80 -T localhost:6082 <span class="hljs-_">-f</span> /etc/varnish/default.vcl -S /etc/varnish/secret <span class="hljs-_">-s</span> malloc,256m</td><tr><td class="linenos" data-pseudo-content="10"></td><td>ExecReload=/usr/share/varnish/reload-vcl</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Install]</td><tr><td class="linenos" data-pseudo-content="13"></td><td>WantedBy=multi-user.target</td></table></code></pre>
<p>Next, we need to move our web server to a different port. We’ll use port 8080. Replace the contents of <code>/etc/apache2/ports.conf</code> with this:</p>
<pre><code class="hljs lang-apache"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># If you just change the port or add more ports here, you will likely also</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># have to change the VirtualHost statement in</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># /etc/apache2/sites-enabled/000-default</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># This is also true if you have upgraded from before 2.2.9-3 (i.e. from</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># README.Debian.gz</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attribute">NameVirtualHost</span> *:8080</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> 8080</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">&lt;IfModule mod_ssl.c&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># If you add NameVirtualHost *:443 here, you will also have to change</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># the VirtualHost statement in /etc/apache2/sites-available/default-ssl</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment"># to &lt;VirtualHost *:443&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Server Name Indication for SSL named virtual hosts is currently not</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># supported by MSIE on Windows XP.</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> 443</td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-section">&lt;/IfModule&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-section">&lt;IfModule mod_gnutls.c&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> 443</td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-section">&lt;/IfModule&gt;</span></td></table></code></pre>
<p>You’ll also need to change the ports for the individual site files under <code>/etc/apache2/sites-available</code>, as in this example:</p>
<pre><code class="hljs lang-apache"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">&lt;VirtualHost *:8080&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">ServerAdmin</span> webmaster@localhost</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute"><span class="hljs-nomarkup">DocumentRoot</span></span> /var/www</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-section">&lt;Directory /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> FollowSymLinks</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-section">&lt;/Directory&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-section">&lt;Directory /var/www/&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> FollowSymLinks MultiViews</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> allow,deny</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">allow</span></span> from <span class="hljs-literal">all</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-section">&lt;/Directory&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">ScriptAlias</span> /cgi-bin/ /usr/lib/cgi-bin/</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-section">&lt;Directory "/usr/lib/cgi-bin"&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-attribute">AllowOverride</span> None</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> +ExecCGI -MultiViews +SymLinksIfOwnerMatch</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> allow,deny</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Allow</span></span> from <span class="hljs-literal">all</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-section">&lt;/Directory&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">ErrorLog</span> <span class="hljs-variable">${APACHE_LOG_DIR}</span>/error.log</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment"># Possible values include: debug, info, notice, warn, error, crit,</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment"># alert, emerg.</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">LogLevel</span> warn</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attribute">CustomLog</span> <span class="hljs-variable">${APACHE_LOG_DIR}</span>/access.log combined</td><tr><td class="linenos" data-pseudo-content="31"></td><td><span class="hljs-section">&lt;/VirtualHost&gt;</span></td></table></code></pre>
<h2 id="writing-our-vcl-file">Writing our VCL file</h2>
<p>Next, we come to our Varnish configuration proper, which resides at <code>/etc/varnish/default.vcl</code>. The <code>vcl</code> stands for Varnish Configuration Language, and it has a syntax somewhat reminiscent of C.</p>
<p>The default behaviour for Varnish is as follows:</p>
<ul>
<li>It does not cache requests that contain cookie or authorization headers</li>
<li>It does not cache requests which the backend HTTP server indicates should not be cached</li>
<li>It will only cache GET and HEAD requests</li>
</ul>
<p>This behaviour is unlikely to meet your needs. We’ll therefore work through the Varnish config file I wrote for this WordPress site in the hope that it will teach you enough to adapt it to your own needs.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>vcl 4.0;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>backend default {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    .host = <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    .port = <span class="hljs-string">"8080"</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>}</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>acl purge {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"localhost"</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>sub vcl_recv {</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Never cache PUT, PATCH, DELETE or POST requests</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PUT"</span> || req.method == <span class="hljs-string">"PATCH"</span> || req.method == <span class="hljs-string">"DELETE"</span> || req.method == <span class="hljs-string">"POST"</span>) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment"># Never cache cart, account, checkout or addons</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/(cart|my-account|checkout|addons)"</span>) {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment"># Never cache adding to cart</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"\?add-to-cart="</span> ) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment"># Never cache admin or login</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"^/wp-(admin|login|cron)"</span> ) {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-comment"># Never cache WooCommerce API</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"wc-api"</span> ) {</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment"># Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-comment"># Remove a ";" prefix, if present.</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsub(req.http.Cookie, <span class="hljs-string">"^;\s*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-comment"># Remove the wp-settings-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-1=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-comment"># Remove the wp-settings-time-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-time-1=[^;]+(; )?"</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>            , <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-comment"># Remove the wp test cookie</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wordpress_test_cookie=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-comment"># Static content unique to the theme can be cached (so no user uploaded images)</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-comment"># The reason I don't take the wp-content/uploads is because of cache size on bigger blogs</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-comment"># that would fill up with all those files getting pushed into cache</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"wp-content/themes/"</span> &amp;&amp; req.url ~ <span class="hljs-string">"\.(css|js|png|gif|jp(e)?g)"</span>) {</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-built_in">unset</span> req.http.cookie;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>    <span class="hljs-comment"># Even if no cookies are present, I don't want my "uploads" to be cached due to their potential size</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"/wp-content/uploads/"</span>) {</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td>    <span class="hljs-comment"># any pages with captchas need to be excluded</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/contact/"</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    {</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-built_in">return</span>(pass);</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>    <span class="hljs-comment"># Check the cookies for wordpress-specific items</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cookie ~ <span class="hljs-string">"wordpress_"</span> || req.http.Cookie ~ <span class="hljs-string">"comment_"</span>) {</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-comment"># A wordpress specific cookie has been set</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="77"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>    <span class="hljs-comment"># allow PURGE from localhost</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PURGE"</span>) {</td><tr><td class="linenos" data-pseudo-content="81"></td><td>        <span class="hljs-keyword">if</span> (!client.ip ~ purge) {</td><tr><td class="linenos" data-pseudo-content="82"></td><td>            <span class="hljs-built_in">return</span>(synth(405, <span class="hljs-string">"Not allowed."</span>));</td><tr><td class="linenos" data-pseudo-content="83"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="84"></td><td>        <span class="hljs-built_in">return</span> (purge);</td><tr><td class="linenos" data-pseudo-content="85"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-comment"># Force lookup if the request is a no-cache request from the client</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cache-Control ~ <span class="hljs-string">"no-cache"</span>) {</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="90"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="91"></td><td></td><tr><td class="linenos" data-pseudo-content="92"></td><td>    <span class="hljs-comment"># Try a cache-lookup</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>    <span class="hljs-built_in">return</span> (<span class="hljs-built_in">hash</span>);</td><tr><td class="linenos" data-pseudo-content="94"></td><td>}</td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>sub vcl_backend_response {</td><tr><td class="linenos" data-pseudo-content="97"></td><td>    <span class="hljs-built_in">set</span> beresp.grace = 5m;</td><tr><td class="linenos" data-pseudo-content="98"></td><td>}</td></table></code></pre>
<p>Let’s take a closer look at the first part of the config:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>vcl 4.0;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>backend default {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    .host = <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    .port = <span class="hljs-string">"8080"</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>}</td></table></code></pre>
<p>Here we define that we’re using version 4.0 of VCL, and that the host to use as a back end is port 8080 on the same server. If your normal HTTP server is running on a different port, you will need to set it here. Also, note that you can use a different host as the backend.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>acl purge {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"localhost"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>}</td></table></code></pre>
<p>We also set which hosts can trigger a purge of the cache, namely <code>localhost</code> and <code>127.0.0.1</code>. The web app hosted on the server can then make an HTTP <code>PURGE</code> request to a given path, which will clear that path from the cache. In our case, W3 Total Cache supports this - if it’s a custom web app, you’ll need to implement this functionality yourself to clear the cache when new content is added.</p>
<p>Next, we start the <code>vcl_recv</code> subroutine. This is where we define our rules for deciding whether or not to serve content from the cache. Let’s look at our first rule:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>sub vcl_recv {</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment"># Never cache PUT, PATCH, DELETE or POST requests</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PUT"</span> || req.method == <span class="hljs-string">"PATCH"</span> || req.method == <span class="hljs-string">"DELETE"</span> || req.method == <span class="hljs-string">"POST"</span>) {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }</td></table></code></pre>
<p>Here, we declare that we should never cache any <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> or <code>POST</code> requests, on the basis that these change the state of the application. This ensures that things like contact forms will work as expected.</p>
<p>Note that we’re getting the value of <code>req.method</code> to determine the HTTP verb used. The <code>req</code> object has many other properties we’ll see being used.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Never cache cart, account, checkout or addons</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/(cart|my-account|checkout|addons)"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Never cache adding to cart</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"\?add-to-cart="</span> ) {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment"># Never cache admin or login</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"^/wp-(admin|login|cron)"</span> ) {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># Never cache WooCommerce API</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"wc-api"</span> ) {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td></table></code></pre>
<p>Next, we define a series of regular expressions, and if the URL (represented by <code>req.url</code>) matches that regex, then the request is passed straight through to Apache without Varnish getting involved. In this case, we never want to cache the following sections:</p>
<ul>
<li>The shopping cart, checkout, addons page or account page</li>
<li>The Add to cart button</li>
<li>The WordPress admin and login screen, and cron requests</li>
<li>The WooCommerce API</li>
</ul>
<p>You’ll need to consider which parts of your site must always serve the latest content and which don’t need everything to be fully up to date. Typically admin areas any anything interactive must not be cached, while the front page is usually fine.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment"># Remove a ";" prefix, if present.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsub(req.http.Cookie, <span class="hljs-string">"^;\s*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Remove the wp-settings-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-1=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Remove the wp-settings-time-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-time-1=[^;]+(; )?"</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            , <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Remove the wp test cookie</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wordpress_test_cookie=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td></table></code></pre>
<p>Cookies, even ones set on the client side such as those for Google Analytics, can prevent content from being cached. To prevent this, you need to configure Varnish to discard these cookies before passing them on to Apache. In this case, we want to exclude Google Analytics and various WordPress cookies.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Static content unique to the theme can be cached (so no user uploaded images)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"wp-content/themes/"</span> &amp;&amp; req.url ~ <span class="hljs-string">"\.(css|js|png|gif|jp(e)?g)"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">unset</span> req.http.cookie;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we allow static content that’s part of the site theme to be cached since that doesn’t change often, so we unset the cookies for that request.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Even if no cookies are present, I don't want my "uploads" to be cached due to their potential size</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"/wp-content/uploads/"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we prevent any user-uploaded content from being cached, since that can change often.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># any pages with captchas need to be excluded</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/contact/"</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-built_in">return</span>(pass);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }</td></table></code></pre>
<p>Captchas must obviously never be cached since that will break them. In this case, we assume that the contact form has a captcha, so it gets excluded from the cache.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Check the cookies for wordpress-specific items</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cookie ~ <span class="hljs-string">"wordpress_"</span> || req.http.Cookie ~ <span class="hljs-string">"comment_"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># A wordpress specific cookie has been set</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }</td></table></code></pre>
<p>Here we check for remaining WordPress-specific cookies. These would indicate that a user is signed in, in which case we may want to serve them all the latest content rather than displaying content from the cache.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># allow PURGE from localhost</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PURGE"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">if</span> (!client.ip ~ purge) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-built_in">return</span>(synth(405, <span class="hljs-string">"Not allowed."</span>));</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-built_in">return</span> (purge);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }</td></table></code></pre>
<p>Remember where we allowed the local server to clear the cache? This section actually carries out the purge when it receives a request from an authorised client.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Force lookup if the request is a no-cache request from the client</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cache-Control ~ <span class="hljs-string">"no-cache"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we check to see if the <code>Cache-Control</code> HTTP header is set to <code>no-cache</code>. If so, we pass it straight through to Apache.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Try a cache-lookup</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-built_in">return</span> (<span class="hljs-built_in">hash</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>This is the last rule under <code>vcl_recv</code>, because it only reaches this point if the request has got past all the other rules. It tries to fetch the page from the cache. If the page is not in the cache, it passes it on to Apache and will cache the response.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>sub vcl_backend_response {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-built_in">set</span> beresp.grace = 5m;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>This is where we set how long responses are cached for. Here we’ve set it to 5 minutes.</p>
<p>With that done, we should be ready to restart Varnish and Apache. If you are using an operating system with <code>systemd</code>, then the following commands should restart Apache and Varnish:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo systemctl reload apache2.service</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo systemctl reload varnish.service</td></table></code></pre>
<p>For those not yet using <code>systemd</code>, try this instead:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo service apache2 restart</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo service varnish restart</td></table></code></pre>
<p>If you then visit your site and inspect the HTTP headers using your browser’s dev tools, you’ll notice the new HTTP header <code>X-Varnish</code> in the response. This tells you that Varnish is up and running. If you make sure you’re logged out, you should hopefully see that if you load a page, and then load it again, the second response is noticeably quicker.</p>
<p>Installing and configuring Varnish is a relatively quick and easy way of helping your website scale to be able to serve many more users, and if the site becomes popular all of a sudden, it can make a huge difference as to whether the site can stand up to the load or not. If you need more information on how to configure Varnish for your own needs, I recommend consulting the excellent <a href="https://www.varnish-cache.org/docs/4.0/">documentation</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[When you should not use Wordpress]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/">
        </link>
        <updated>2015-08-22T18:32:34Z</updated>
        <summary type="html"><![CDATA[<p>I must admit, I’ve had a rather bad experience with WordPress recently. The site in question was an e-commerce site, built with WordPress and WooCommerce. In development, we originally put the site on shared hosting, but after a while the hosting company told us off because it was using too much database space, so we moved to a VPS earlier than we normally would. With the benefit of hindsight, we probably should have seen that as the first warning sign.</p>
<p>Then, once the site was up and running on the VPS, it got slower and slower, and eventually the server was killing MySQL off because it was using too many resources. I decided to install a benchmarking plugin and investigate why it was so slow. On loading the home page, it became obvious why the site was so slow - there were in excess of 300 queries on the home page. Looking elsewhere, some other pages were even worse, with one making over 1,000 queries!</p>
<p>At this point, I was practically hyperventilating. If I had written a web app that made that many queries on one page from scratch, I’d be seriously considering whether I was cut out for this industry. With an off-the-shelf CMS, you do have to accept some degree of bloat as a trade-off for quicker development time, but these numbers beggar belief.</p>
<p>I was able to mitigate this to some extent. First, I cut down the number of products shown on individual pages and audited the installed plugins, removing ones we could do without. This still left a lot more queries than I liked.</p>
<p>The next step was to enable caching. I installed Memcached and Varnish (incidentally, if you haven’t used Varnish before, you should check it out - it can make a huge difference for slow sites). I then installed and configured W3 Total Cache to work with them. This didn’t solve the fundamental problem of the initial page loads being too database-intensive, but it did mean that the result was cached for some time afterwards, making things easier on subsequent users.</p>
<p>This still wasn’t enough, however. The admin was still very slow, and often crashed. I actually wound up having to write a shell script that would check to see if MySQL was running and restart it if it wasn’t, and set up a cron job to run it every minute, just to ensure I wasn’t having to restart it myself. The issue was only really dealt with once we upped the specs on the VPS from 1GB RAM and 1 core to 3GB RAM and 2 cores, which should really have been overkill for something like WordPress.</p>
<p>As it turned out, the issue wasn’t exactly helped by the fact that someone had been making an unusually persistent attempt to brute-force <code>wp-login.php</code>. I was able to mitigate this by password-protecting it in the <code>.htaccess</code> file and adding some custom rules to fail2ban. But the fundamental problem remained that the resources used by WordPress to load a single page were grossly excessive.</p>
<p>Since then, we’ve continued to have some difficulties with it. There are some rather arcane criteria for calculating the shipping costs, and implementing them has been a real uphill struggle. We’ve also had to deal with breakages in the theme when updating WooCommerce, and other painful issues. It feels at times like the site will never be “done done”.</p>
<p>Now, I’ve had some issues with WordPress before, but this was by far the nastiest I’d ever seen, and it made me think very hard about when we should and should not consider WordPress as a solution. In hindsight, it would have been much easier to use Laravel to build the site from scratch - it would have made for a much leaner, more efficient site, updating the templates would have been a breeze, and implementing additional functionality would have been straightforward.</p>
<p>NB: I’m trying hard to make sure this is NOT one of those “WordPress sucks” blog posts. I’ll admit that I agree with many of the points from a lot of those, and I abandoned WordPress for my own site a long time ago in favour of a static site generator, but there are times when it is appropriate to use it. What I’m trying to do here is to help others avoid making the mistakes we did recently by giving some advice on when you should and should not use WordPress. Of course, your mileage may vary.</p>
<h2 id="why-was-wordpress-inappropriate-here-">Why was WordPress inappropriate here?</h2>
<p>With the benefit of hindsight, I can say that WordPress was definitely not the right solution in this case, and I will be advising against using it in similar circumstances. But why was it inappropriate?</p>
<ul>
<li><strong>Less flexible than rolling a custom solution</strong> - While the ecosystem of plugins and themes make it possible to use WordPress for a lot of use cases outside the core functionality of the platform, those plugins and themes aren’t infinitely flexible. If you want to do something one way and the plugin you’re using doesn’t support that, you’re out of luck unless you can fork the plugin or write a new one.</li>
<li><strong>Dependence on third party plugins</strong> - While we were working on the site, WooCommerce made some changes that broke the theme we were using. We were using a child theme, but updating the parent theme alone didn’t fix it - we had to then apply some of the changes to the child theme as well, which was extremely fiddly. As a result, we’re now very wary about updating plugins and themes. Yet we don’t dare put it off too long, because in my experience attempts to break into WordPress are common, and if you fail to install an upgrade that fixes a vulnerability in good time, you can easily find yourself getting a phone call about a site having been hacked (as I did in December last year).</li>
<li><strong>Poor performance</strong> - This is a big one, and I have therefore broken it down further:<ul>
<li><strong>Loading styling from the database</strong> - Many of the high end, customisable themes have large numbers of configuration options that can be used to style the site. The downside of these is that it creates additional queries to the database to fetch that data. Unless you have some form of caching in place, that data is loaded for every single request to the front end, generating a significant number of additional queries. You can mitigate this by rolling your own custom WordPress theme for the site, however.</li>
<li><strong>Too many queries</strong> - My experience has been that as a general rule of thumb, it’s much quicker to make a smaller number of more complex queries to a database than to make a larger number of simple queries. If you build a custom web app, you will always know exactly what data you want to retrieve on a particular page and through careful use of joins, can retrieve exactly the data you need with as few queries as possible. Being a generic solution, WordPress doesn’t know exactly what data you need on any one page, and so may fetch the data using an excessive number of queries. It may also fetch data you don’t actually need.</li>
<li><strong>Suboptimal database layout</strong> - The database schema for WordPress was originally created with a blog in mind, and may not always be optimal for your particular use case.</li>
<li><strong>Caching is not a silver bullet</strong> - You can do a lot to improve performance by installing Memcached and Varnish, and configuring a caching plugin to work with them. However, this doesn’t solve the problem of the excessive number of queries, it only mitigates the effects somewhat. Not everything can be cached, and the expensive queries will still have to be run at some point. Caching only increases the time between the queries. Also, configuring Varnish in particular can be something of a black art, and it’s easy to miss something and find out some functionality or other hasn’t been working.</li>
</ul>
</li>
</ul>
<p>WordPress has a lot of technical limitations and deficiencies from a programmer’s point of view. For all that, it works, it’s easy to set up, and there’s a wide variety of plugins and themes available, so it’s often an appropriate choice. While the performance is poorer than I would like, the harsh truth is that often it doesn’t matter - if your site isn’t serving a huge amount of page requests, a few extra queries don’t actually make all that much difference (within reason, of course). My concern is that use of WordPress when it’s entirely inappropriate is widespread.</p>
<h2 id="is-wordpress-being-overused-">Is WordPress being overused?</h2>
<p><img src="/static/images/wordpress-dane-cook.jpg" alt="Archer - WordPress? The Dane Cook of content management systems?"></p>
<p>I suspect I’m running the risk of being branded a hipster for saying this (“Now it’s popular, you hate WordPress…”), but the fact that WordPress is widespread and popular does not mean that it’s the best solution for your project. Nor does the fact that it’s technically possible to use it for your project.</p>
<p>A few years ago, I built a now-defunct site and mobile app for a client that monitored web pages, or product prices on web pages, for changes, and notified the user when a change occurred. It was built using CodeIgniter 2, and had an integrated blog. At one point, the client was unhappy because it wasn’t built with WordPress, believing that this was the reason why few people were signing up. To use WordPress for this project would have involved building the additional functionality, including the API for the mobile app, as a plugin, which would have slowed down development considerably - in my experience it’s generally much harder to build something as a WordPress plugin than using an MVC framework due to the lack of separation of concerns, which makes the code base more confusing.</p>
<p>This is a good example of the alarming trend I’ve noticed in the last few years whereby a large number of people seem to be under the mistaken impression that WordPress is some kind of all-singing, all-dancing general purpose solution for building websites. I suspect that the reason for this may be that WordPress is commonplace enough that people outside of the web industry have often heard of it, and therefore they often ask for it since it’s what they’ve heard of, not knowing whether or not it’s actually appropriate for their needs. What isn’t always apparent to non-developers is that it’s often considerably easier for a developer to implement the core functionality of WordPress using a modern MVC framework than it is for them to implement the other functionality using WordPress, and as the functionality is being built with your exact use case in mind, the user interface is often more straightforward than the WordPress admin. Also, the WordPress privilege system can make it difficult for you to limit the user to just the functionality you want them to have, resulting in a situation where either you give the users a potentially dangerous level of access, or force them to contact you to make certain changes, making more work for you.</p>
<p>I’ve heard plenty of people say things like “WordPress is a framework” and “A competent developer can build anything with WordPress”. These claims are utter hogwash. A competent developer is smart enough to recognise that WordPress is not a one-size fits all solution and it’s not always appropriate to use it - you can easily spend more time trying to get it to do something off the beaten track than it would take to build that functionality from scratch. I think the way that Automattic are trying to promote WordPress as an application framework is a really bad idea - trying to use it for this is much more cumbersome than using a modern PHP framework like Laravel.</p>
<p>Even if you ignore the technical deficiencies of WordPress, it is too opinionated to be a good solution for use as a framework, and as such you’ll spend a lot of time trying to work around the existing implementations of existing functionality when they don’t quite meet your requirements.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For all its flaws, WordPress is very useful. It’s generally a good choice for blogs, brochure-style sites, and small e-commerce solutions where the client is not too fussy about the details of how it works. For virtually every other situation, I plan on looking elsewhere in future.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Django views in isolation]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/">
        </link>
        <updated>2015-08-02T16:58:45Z</updated>
        <summary type="html"><![CDATA[<p>One thing you may hear said often about test-driven development is that as far as possible, you should test everything in isolation. However, it’s not always immediately clear how you actually go about doing this. In Django, it’s fairly easy to get your head around testing models in isolation because they’re single objects that you can just create, save, and then check their attributes. Forms are also quite easy to test, because you can just set the parameters with the appropriate values and check that the validation works as expected. With views, it’s much harder to imagine how you’d go about testing them in isolation, and often people just settle for writing higher-level functional tests instead. While functional tests are important, they’re also slower than unit tests, which makes it less likely they’ll be run often. So I thought I’d show you a quick and simple example of testing a Django view in isolation.</p>
<p>One of the little projects I’ve written in the past to help get my head around certain aspects of Django is a code-snippet sharing Django application which I named <a href="https://github.com/matthewbdaly/snippetr">Snippetr</a>. The index route of this application is a form for submitting a brand-new code snippet and I’ll show you how we would write a test for that.</p>
<h2 id="testing-a-get-request">Testing a GET request</h2>
<p>Before now, you may well have used the Django test client to test views. That is fine for higher-level tests, but if you want to test a view in isolation, it’s no use because it emulates a real web server and all of the middleware and authentication, which we want to keep out of the way. Instead, we need to use <code>RequestFactory</code>:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</table></code></pre>
<p><code>RequestFactory</code> actually implements a subset of the functionality of the Django test client, so while it will feel somewhat familiar, it won’t have all the same functionality. For instance, it doesn’t support middleware, so rather than logging in using the test client’s <code>login()</code> method, you instead attach a user directly to the request, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>request = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>request.user = user</td></table></code></pre>
<p>You have to specify the URL in the request, but you also have to explicitly pass the request through to the view you want to test, which can be a bit confusing. Let’s see it in context. First of all, we want to write a test for making a GET request:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnippetCreateViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Test the snippet create view</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        self.user = UserFactory()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        Test GET requests</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'snippet_create'</span>))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'user'</span>], self.user)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'request'</span>], request)</td></table></code></pre>
<p>First of all, we define a <code>setUp()</code> method that creates a user and an instance of <code>RequestFactory()</code> for use in the test. Note that I’m using Factory Boy to define <code>UserFactory</code> in order to make it easier to work with. Also, if you have more than one view to test, you should create a base class containing the <code>setUp()</code> method that your view tests inherit from.</p>
<p>Next, we have our test for making a GET request. Note that we’re using the <code>reverse()</code> method to get the route for the view named <code>snippet_create</code>. You’ll need to import this as follows if you’re not yet using it:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</table></code></pre>
<p>We then attach our user object to the request manually, and fetch the response by passing the request to the view as follows:</p>
<pre><code class="hljs lang-python singleline"><table>    response = SnippetCreateView.as_view()(request)</table></code></pre>
<p>Note that this is the syntax used for class-based views - we call the view’s <code>as_view()</code> method. For a function-based view, the syntax is a bit simpler:</p>
<pre><code class="hljs lang-python singleline"><table>    response = my_view(request)</table></code></pre>
<p>We then test our response as usual. In this case, the view adds some additional context data, and we check that we can access that, as well as checking the status code.</p>
<h2 id="testing-a-post-request">Testing a POST request</h2>
<p>Testing a POST request is a little more challenging in this case because submitting the form will create a new <code>Snippet</code> object and we don’t want to interact with the model layer at all if we can help it. We want to test the view in isolation, partly because it will be faster, and partly because it’s a good idea. We can do this by mocking the <code>Snippet</code> model’s <code>save()</code> method.</p>
<p>To do so, we need to import two things from the <code>mock</code> library. If you’re using Python 3.4 or later, then <code>mock</code> is part of <code>unittest</code> as <code>unittest.mock</code>. Otherwise, it’s a separate library you need to install with <code>pip</code>. Here’s the import statement for those on Python 3.4 or later:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> unittest.mock <span class="hljs-keyword">import</span> patch, MagicMock</table></code></pre>
<p>And for those on earlier versions:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> mock <span class="hljs-keyword">import</span> patch, MagicMock</table></code></pre>
<p>Now, our test for the POST requests should look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">    @patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        Test post requests</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the request</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My snippet'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'content'</span>: <span class="hljs-string">'This is my snippet'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'snippet_create'</span>), data)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Get the response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">302</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check save was called</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertTrue(Snippet.save.called)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEqual(Snippet.save.call_count, <span class="hljs-number">1</span>)</td></table></code></pre>
<p>Note first of all the following line:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-meta">    @patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></table></code></pre>
<p>Here we’re saying that in this test, when the <code>save()</code> method of the <code>Snippet</code> model is called, it should instead call a mocked version, which lacks the functionality and only registers that it has been called and a few details about it.</p>
<p>Next, we put together the data to be passed through and create a POST request for it. As before, we attach the user to the request. We then pass the request through in the same way as for the GET request. We also check that the response code was 302, meaning that the user would be redirected elsewhere after the form was submitted correctly.</p>
<p>Finally, we assert that <code>Snippet.save.called</code> is true. <code>called</code> is a Boolean value, representing whether the method was called or not. We also check the value of <code>Snippet.save.call_count</code>, which is a count of the number of times the method was called - here we check that it’s set to 1.</p>
<p>As you can see, while the request factory is a little harder than the Django test client to figure out, it’s not too difficult once you get the hang of it. By combining it with judicious use of <code>mock</code>, you can easily test your views in isolation, and without having to interact with the database or set up any middleware, these tests will be much faster than those using the Django test client.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploring the HStoreField in Django 1.8]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/">
        </link>
        <updated>2015-08-01T17:26:54Z</updated>
        <summary type="html"><![CDATA[<p>One of the most interesting additions in Django 1.8 is the new Postgres-specific fields. I started using PostgreSQL in preference to MySQL for Django apps last year, and so I was interested in the additional functionality they offer.</p>
<p>By far the biggest deal out of all of these was the new <code>HStoreField</code> type. PostgreSQL added a JSON data type a little while back, and <code>HStoreField</code> allows you to use that field type. This is a really big deal because it allows you to store arbitrary data as JSON and query it. Previously, you could of course just store data as JSON in a text field, but that lacked the same ability to query it. This gives you many of the advantages of a NoSQL document database such as MongoDB in a relational database. For instance, you can store different products with different data about them, and crucially, query them by that data. Previously, the only way to add arbitrary product data and be able to query it was to have it in a separate table, and it was often cumbersome to join them when fetching multiple products.</p>
<p>Let’s see a working example. We might be building an online store where products can have all kinds of arbitrary data stored about them. One product might be a plastic box, and you’d need to list the capacity as an additional attribute. Another product might be a pair of shoes, which have no capacity, but do have a size. It might be difficult to model this otherwise, but <code>HStoreField</code> is perfect for this kind of data.</p>
<p>First, let’s set up our database. I’ll assume you already have PostgreSQL up and running via your package manager. First, we need to create our database:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createdb djangostore</table></code></pre>
<p>Next, we need to create a new user for this database with superuser access:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createuser store <span class="hljs-_">-s</span> -P</table></code></pre>
<p>You’ll be prompted for a password - I’m assuming this will just be <code>password</code> here. Next, we need to connect to PostgreSQL using the <code>psql</code> utility:</p>
<pre><code class="hljs lang-bash singleline"><table>$ psql djangostore -U store -W</table></code></pre>
<p>You’ll be prompted for your new password. Next, run the following command:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># CREATE EXTENSION hstore;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE djangostore TO store;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>The first command installs the HStore extension. Next we make sure our new user has the privileges required on the new database:</p>
<p>We’ve now created our database and a user to interact with it. Next, we’ll set up our Django install:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ <span class="hljs-built_in">cd</span> Projects</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir djangostore</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ <span class="hljs-built_in">cd</span> djangostore</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ pyvenv venv</td><tr><td class="linenos" data-pseudo-content="5"></td><td>$ <span class="hljs-built_in">source</span> venv/bin/activate</td><tr><td class="linenos" data-pseudo-content="6"></td><td>$ pip install Django psycopg2 ipdb</td><tr><td class="linenos" data-pseudo-content="7"></td><td>$ django-admin.py startproject djangostore</td><tr><td class="linenos" data-pseudo-content="8"></td><td>$ python manage.py startapp store</td></table></code></pre>
<p>I’m assuming here that you’re using Python 3.4. On Ubuntu, getting it working is <a href="https://gist.github.com/denilsonsa/21e50a357f2d4920091e">a bit more involved</a>.</p>
<p>Next, open up <code>djangostore/settings.py</code> and amend <code>INSTALLED_APPS</code> to include the new app and the PostgreSQL-specific functionality:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'django.contrib.postgres'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>)</td></table></code></pre>
<p>You’ll also need to configure the database settings:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.postgresql_psycopg2'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'djangostore'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-string">'HOST'</span>: <span class="hljs-string">'localhost'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-string">'PORT'</span>: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>We need to create an empty migration to use <code>HStoreField</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py makemigrations --empty store</table></code></pre>
<p>This command should create the file <code>store/migrations/0001_initial.py</code>. Open this up and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># -*- coding: utf-8 -*-</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models, migrations</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.operations <span class="hljs-keyword">import</span> HStoreExtension</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Migration</span><span class="hljs-params">(migrations.Migration)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    dependencies = [</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    operations = [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        HStoreExtension(),</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    ]</td></table></code></pre>
<p>This will make sure the HStore extension is installed. Next, let’s run these migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Synchronize unmigrated apps: messages, staticfiles, postgres</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Apply all migrations: sessions, store, admin, auth, contenttypes</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Synchronizing apps without migrations:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Creating tables...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    Running deferred SQL...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Installing custom SQL...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying contenttypes.0002_remove_content_<span class="hljs-built_in">type</span>_name... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  Applying sessions.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  Applying store.0001_initial... OK</td></table></code></pre>
<p>Now, we’re ready to start creating our <code>Product</code> model. Open up <code>store/models.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.fields <span class="hljs-keyword">import</span> HStoreField</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    updated_at = models.DateTimeField(auto_now=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    price = models.FloatField()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    attributes = HStoreField()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> self.name</td></table></code></pre>
<p>Note that <code>HStoreField</code> is not part of the standard group of model fields, and needs to be imported from the Postgres-specific fields module. Next, let’s create and run our migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>We should now have a <code>Product</code> model where the <code>attributes</code> field can be any arbitrary data we want. Note that we installed <code>ipdb</code> earlier - if you’re not familiar with it, this is an improved Python debugger, and also pulls in <code>ipython</code>, an improved Python shell, which Django will use if available.</p>
<p>Open up the Django shell:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py shell</table></code></pre>
<p>Then, import the <code>Product</code> model:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> store.models <span class="hljs-keyword">import</span> Product</table></code></pre>
<p>Let’s create our first product - a plastic storage box:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>box = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>box.name = <span class="hljs-string">'Box'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>box.description = <span class="hljs-string">'A big box'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>box.price = <span class="hljs-number">5.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>box.attributes = { <span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">"colour"</span>: <span class="hljs-string">"blue"</span>}</td><tr><td class="linenos" data-pseudo-content="6"></td><td>box.save()</td></table></code></pre>
<p>If we take a look, we can see that the attributes can be returned as a Python dictionary:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">12</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">12</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>We can easily retrieve single values:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">15</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes[<span class="hljs-string">'capacity'</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">15</span>]: <span class="hljs-string">'1L'</span></td></table></code></pre>
<p>Let’s add a second product - a mop:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>mop = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>mop.name = <span class="hljs-string">'Mop'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>mop.description = <span class="hljs-string">'A mop'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>mop.price = <span class="hljs-number">12.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>mop.attributes = { <span class="hljs-string">'colour'</span>: <span class="hljs-string">"red"</span> }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>mop.save()</td></table></code></pre>
<p>Now, we can filter out only the red items easily:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">2</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'red'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">2</span>]: [&lt;Product: Mop&gt;]</td></table></code></pre>
<p>Here we search for items where the <code>colour</code> attribute is set to <code>red</code>, and we only get back the mop. Let’s do the same for blue items:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">3</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Here it returns the box. Let’s now search for an item with a capacity of 1L:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">4</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">4</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Only the box has the capacity attribute at all, and it’s the only one returned. Let’s see what happens when we search for an item with a capacity of 2L, which we know is not present:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">5</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'2L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">5</span>]: []</td></table></code></pre>
<p>No items returned, as expected. Let’s look for any item with the <code>capacity</code> attribute:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">6</span>]: Product.objects.filter(attributes__has_key=<span class="hljs-string">'capacity'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">6</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Again, it only returns the box, as that’s the only one where that key exists. Note that all of this is tightly integrated with the existing API for the Django ORM. Let’s add a third product, a food hamper:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: hamper = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">4</span>]: hamper.name = <span class="hljs-string">'Hamper'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>In [<span class="hljs-number">5</span>]: hamper.description = <span class="hljs-string">'A food hamper'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>In [<span class="hljs-number">6</span>]: hamper.price = <span class="hljs-number">19.99</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>In [<span class="hljs-number">7</span>]: hamper.attributes = {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>   ...: <span class="hljs-string">'contents'</span>: <span class="hljs-string">'ham, cheese, coffee'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>   ...: <span class="hljs-string">'size'</span>: <span class="hljs-string">'90cmx60cm'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   ...: }</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>In [<span class="hljs-number">8</span>]: hamper.save()</td></table></code></pre>
<p>Next, let’s return only those items that have a <code>contents</code> attribute that contains <code>cheese</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">9</span>]: Product.objects.filter(attributes__contents__contains=<span class="hljs-string">'cheese'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">9</span>]: [&lt;Product: Hamper&gt;]</td></table></code></pre>
<p>As you can see, the <code>HStoreField</code> type allows for quite complex queries, while allowing you to set arbitrary values for an individual item. This overcomes one of the biggest issues with relational databases - the inability to set arbitrary data. Previously, you might have to work around it in some fashion, such as creating a table containing attributes for individual items which had to be joined on the product table. This is very cumbersome and difficult to use, especially when you wanted to work with more than one product. With this approach, it’s easy to filter products by multiple values in the HStore field, and you get back all of the attributes at once, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">13</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">13</span>]: [&lt;Product: Box&gt;]</td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">14</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Out[<span class="hljs-number">14</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>Similar functionality is coming in a future version of MySQL, so it wouldn’t be entirely surprising to see <code>HStoreField</code> become more generally available in Django in the near future. For now, this functionality is extremely useful and makes for a good reason to ditch MySQL in favour of PostgreSQL for your future Django apps.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[New laptop]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/07/21/new-laptop/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/07/21/new-laptop/">
        </link>
        <updated>2015-07-21T20:15:52Z</updated>
        <summary type="html"><![CDATA[<p>For a while now it’s been obvious that I needed a new laptop. My main workhorse for a while has been a 2008 MacBook, but I’m not really a fan of Mac OS X and it was stuck on Snow Leopard, so it was somewhat behind the times. It was also painfully slow by modern standards - regenerating this site took a couple of minutes. I had two other reasonably modern laptops, but one was too big and cumbersome, while the other was a Dell Mini, which isn’t really fast enough for a developer. When I last bought a laptop, I wasn’t even a developer, so it was long past time I got a more suitable machine.</p>
<p>I therefore took the plunge and ordered a new Dell XPS 13 Developer Edition, which arrived today. It’s an absolutely beautiful machine, and it’s extremely light. It’s also a <em>lot</em> faster than any other machine I own. The screen is exceptionally sharp, and setting it up was nice and easy.</p>
<p>After an hour or so with this machine, I’m already really happy with it. We’ll have to see whether I still think so after a few months using it.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Handling images as base64 strings with Django REST Framework]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/">
        </link>
        <updated>2015-07-04T12:01:40Z</updated>
        <summary type="html"><![CDATA[<p>I’m currently working on a Phonegap app that involves taking pictures and uploading them via a REST API. I’ve done this before, and I found at that time that the best way to do so was to fetch the image as a base-64 encoded string and push that up, rather than the image file itself. However, the last time I did so, I was using Tastypie to build the API, and I’ve since switched over to Django REST Framework as my API toolkit of choice.</p>
<p>It didn’t take long to find <a href="https://gist.github.com/yprez/7704036">this gist</a> giving details of how to do so, but it didn’t work as is, partly because I was using Python 3, and partly because the <code>from_native</code> method has gone as at Django REST Framework 3.0. It was, however, straightforward to adapt it to work. Here’s my solution:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> base64, uuid</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.core.files.base <span class="hljs-keyword">import</span> ContentFile</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># Custom image field - handles base 64 encoded images</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base64ImageField</span><span class="hljs-params">(serializers.ImageField)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_internal_value</span><span class="hljs-params">(self, data)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">if</span> isinstance(data, str) <span class="hljs-keyword">and</span> data.startswith(<span class="hljs-string">'data:image'</span>):</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-comment"># base64 encoded image - decode</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            format, imgstr = data.split(<span class="hljs-string">';base64,'</span>) <span class="hljs-comment"># format ~= data:image/X,</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            ext = format.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>] <span class="hljs-comment"># guess file extension</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            id = uuid.uuid4()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            data = ContentFile(base64.b64decode(imgstr), name = id.urn[<span class="hljs-number">9</span>:] + <span class="hljs-string">'.'</span> + ext)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> super(Base64ImageField, self).to_internal_value(data)</td></table></code></pre>
<p>This solution will handle both base 64 encoded strings and image files. Then, just use this field as normal.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting django-behave and Celery to work together]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/">
        </link>
        <updated>2015-06-17T19:34:08Z</updated>
        <summary type="html"><![CDATA[<p>I ran into a small issue today. I’m working on a Django app which uses Celery to handle certain tasks that don’t need to return a response within the context of the HTTP request. I also wanted to use <code>django_behave</code> for running BDD tests. The trouble is that both <code>django_behave</code> and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.</p>
<p>However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default test runner to make it work with Celery. I was therefore able to create my own custom test runner that inherited from <code>DjangoBehaveTestSuiteRunner</code> and applied the changes necessary to get Celery working with it. Here is the test runner I wrote, which was saved as <code>myproject/runner.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> djcelery.contrib.test_runner <span class="hljs-keyword">import</span> _set_eager</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django_behave.runner <span class="hljs-keyword">import</span> DjangoBehaveTestSuiteRunner</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CeleryAndBehaveRunner</span><span class="hljs-params">(DjangoBehaveTestSuiteRunner)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup_test_environment</span><span class="hljs-params">(self, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        _set_eager()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        settings.BROKER_BACKEND = <span class="hljs-string">'memory'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        super(CeleryAndBehaveRunner, self).setup_test_environment(**kwargs)</td></table></code></pre>
<p>To use it, you need to set the test runner in <code>settings.py</code></p>
<pre><code class="hljs lang-python singleline"><table>TEST_RUNNER = <span class="hljs-string">'myproject.runner.CeleryAndBehaveRunner'</span></table></code></pre>
<p>Once that was done, my tests worked flawlessly with Celery, and the Behave tests ran as expected.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting ETags in Laravel 5]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/">
        </link>
        <updated>2015-06-14T20:29:52Z</updated>
        <summary type="html"><![CDATA[<p>Although I’d prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, but that was through nothing more than inertia. For some time I’d been planning to switch to Laravel, largely because of the baked-in PHPUnit support, but events conspired against me - one big project that came along had a lot in common with an earlier one, so I forked it rather than starting over.</p>
<p>Recently I built a REST API for a mobile app, and I decided to use that to try out Laravel (if it had been available at the time, I’d have gone for Lumen instead). I was very pleased with the results - I was able to quickly put together the back end I wanted, with good test coverage, and the <code>tinker</code> command in particular was useful in debugging. The end result is fast and efficient, with query caching in place using Memcached to improve response times.</p>
<p>I also implemented a simple middleware to add ETags to HTTP responses and compare them on incoming requests, returning a <code>304 Not Modified</code> status code if they are the same, which is given below:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ETagMiddleware</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Implement Etag support</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Get response</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $response = $next($request);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// If this was a GET request...</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;isMethod(<span class="hljs-string">'get'</span>)) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-comment">// Generate Etag</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $etag = md5($response-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            $requestEtag = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">''</span>, $request-&gt;getETags());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-comment">// Check to see if Etag has changed</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-keyword">if</span>($requestEtag &amp;&amp; $requestEtag[<span class="hljs-number">0</span>] == $etag) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                $response-&gt;setNotModified();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-comment">// Set Etag</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>            $response-&gt;setEtag($etag);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">return</span> $response;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td></table></code></pre>
<p>This is based on <a href="https://www.nickv.codes/blog/etags-in-laravel-4/">a solution for Laravel 4 by Nick Verwymeren</a>, but implemented as Laravel 5 middleware, not a Laravel 4 filter. To use this with Laravel 5, save this as <code>app/Http/Middleware/ETagMiddleware.php</code>. Then add this to the <code>$middleware</code> array in <code>app/Http/Kernel.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>        <span class="hljs-string">'App\Http\Middleware\ETagMiddleware'</span>,</table></code></pre>
<p>It’s quite simple to write this kind of middleware with Laravel, and using something like this is a no-brainer for most web apps considering the bandwidth it will likely save your users.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My static site generator post on Sitepoint]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/">
        </link>
        <updated>2015-05-03T18:55:30Z</updated>
        <summary type="html"><![CDATA[<p>I wrote an article for Sitepoint recently about creating a static site generator as a Grunt plugin, similar to the one for this site. You can find it <a href="http://www.sitepoint.com/building-static-site-generator-grunt-plugin/">here</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I added search to my site with Lunr.js]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/">
        </link>
        <updated>2015-04-18T14:05:41Z</updated>
        <summary type="html"><![CDATA[<p>As I mentioned a while back, I recently switched the search on my site from Google’s site-specific search to <a href="http://lunrjs.com/">Lunr.js</a>. Since my site is built with a static site generator, I can’t implement search using database queries, and I was keen to have an integrated search method that would be fast and not require server-side scripting, and Lunr.js seemed to fit the bill.</p>
<p>The first task in implementing it was to generate the index. As I wrote the Grunt task that generates the blog, I amended that task to generate an index at the same time as I generated the posts. I installed Lunr.js with the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>npm install lunr --save</table></code></pre>
<p>I then imported it in the task, and set up the field names:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">var</span> lunr = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lunr'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    searchIndex = lunr(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">this</span>.field(<span class="hljs-string">'title'</span>, { boost: <span class="hljs-number">10</span> });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">this</span>.field(<span class="hljs-string">'body'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">this</span>.ref(<span class="hljs-string">'href'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    });</td></table></code></pre>
<p>This defined fields for the title, body, and hyperlink, and set the hyperlink as the reference. The variable <code>searchIndex</code> represents the Lunr index.</p>
<p>Next, I looped through the posts, and passed the appropriate details to be added to the index:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">for</span> (post <span class="hljs-keyword">in</span> post_items) {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">var</span> doc = {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-string">'title'</span>: post_items[post].meta.title,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'body'</span>: post_items[post].post.rawcontent,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'href'</span>: post_items[post].path</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        store[doc.href] = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>: doc.title</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        searchIndex.add(doc);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td></table></code></pre>
<p>At this point, <code>post_items</code> represents an array of objects, with each object representing a blog post. Note that the <code>body</code> field is set to the value of the item’s attribute <code>post.rawcontent</code>, which represents the raw Markdown rather than the compiled HTML.</p>
<p>I then store the title in the <code>store</code> object, so that it can be accessed using the <code>href</code> field as a key.</p>
<p>I then do the same thing when generating the pages:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Add them to the index</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> doc = {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'title'</span>: data.meta.title,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'body'</span>: data.post.rawcontent,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'href'</span>: permalink + <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    store[doc.href] = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-string">'title'</span>: data.meta.title</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    searchIndex.add(doc);</td></table></code></pre>
<p>Note that this is already inside the loop that generates the pages, so I don’t include that.</p>
<p>We then write the index to a file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Write index</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    grunt.file.write(options.www.dest + <span class="hljs-string">'/lunr.json'</span>, <span class="hljs-built_in">JSON</span>.stringify({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        index: searchIndex.toJSON(),</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        store: store</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }));</td></table></code></pre>
<p>That takes care of generating our index, but we need to implement some client-side code to handle the search. We need to include Lunr.js on the client side as well, (I recommend using Bower to do so), alongside jQuery. If you include both, the following code should do the trick:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment">// Set up search</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">var</span> index, store;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    $.getJSON(<span class="hljs-string">'/lunr.json'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Create index</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        index = lunr.Index.load(response.index);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Create store</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        store = response.store;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Handle search</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $(<span class="hljs-string">'input#search'</span>).on(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-comment">// Get query</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">var</span> query = $(<span class="hljs-keyword">this</span>).val();</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-comment">// Search for it</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-keyword">var</span> result = index.search(query);</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-comment">// Output it</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-keyword">var</span> resultdiv = $(<span class="hljs-string">'ul.searchresults'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-keyword">if</span> (result.length === <span class="hljs-number">0</span>) {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                <span class="hljs-comment">// Hide results</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                resultdiv.hide();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                <span class="hljs-comment">// Show results</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>                resultdiv.empty();</td><tr><td class="linenos" data-pseudo-content="30"></td><td>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> result) {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-keyword">var</span> ref = result[item].ref;</td><tr><td class="linenos" data-pseudo-content="32"></td><td>                    <span class="hljs-keyword">var</span> searchitem = <span class="hljs-string">'&lt;li&gt;&lt;a href="'</span> + ref + <span class="hljs-string">'"&gt;'</span> + store[ref].title + <span class="hljs-string">'&lt;/a&gt;&lt;/li&gt;'</span>;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                    resultdiv.append(searchitem);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                resultdiv.show();</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>});</td></table></code></pre>
<p>This should be easy to understand. On load, we fetch and parse the <code>lunr.json</code> file from the server, and load the index. We then set up an event handler for the <code>keyup</code> event on an input with the ID of <code>search</code>. We get the value of the input, and query our index, and we loop through our results and display them.</p>
<p>I was pleased with how straightforward it was to implement search with Lunr.js, and it works well. It’s also a lot faster than any server-side solution since the index is generated during the build process, and is loaded with the rest of the site, so the only factor in the speed of the response is how quick your browser executes JavaScript. You could probably also use it with a Node.js application by generating the index dynamically, although you’d probably want to cache it to some extent.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding a new search engine to my site]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/">
        </link>
        <updated>2015-04-04T00:47:43Z</updated>
        <summary type="html"><![CDATA[<p>I’ve just finished implementing a new search engine for this site. Obviously, with it using a static site generator, searching a relational database isn’t an option. For a long while I’d just been getting by with Google’s site-specific search, which worked, but meant leaving the site to view the search results.</p>
<p>Now, I’ve implemented a client-side search system using <a href="http://lunrjs.com/">Lunr.js</a>. It wasn’t too time consuming, and as the index is generated with the rest of the site and loaded with the page, the response is almost instantaneous. I may write a future blog post on how to integrate Lunr.js with your site, as it’s very handy and is an ideal solution for implementing search on a static site.</p>
]]></summary>
    </entry>
</feed>