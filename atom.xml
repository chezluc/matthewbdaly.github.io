<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Matthew Daly&apos;s Blog</title>
    <link>http://matthewdaly.co.uk</link>
    <updated>2015-09-09T19:39:20Z</updated>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>http://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="http://matthewdaly.co.uk"/>
    <subtitle>I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2015</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[When you should not use Wordpress]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/">
        </link>
        <updated>2015-08-22T18:32:34Z</updated>
        <summary type="html"><![CDATA[<p>I must admit, I’ve had a rather bad experience with WordPress recently. The site in question was an e-commerce site, built with WordPress and WooCommerce. In development, we originally put the site on shared hosting, but after a while the hosting company told us off because it was using too much database space, so we moved to a VPS earlier than we normally would. With the benefit of hindsight, we probably should have seen that as the first warning sign.</p>
<p>Then, once the site was up and running on the VPS, it got slower and slower, and eventually the server was killing MySQL off because it was using too many resources. I decided to install a benchmarking plugin and investigate why it was so slow. On loading the home page, it became obvious why the site was so slow - there were in excess of 300 queries on the home page. Looking elsewhere, some other pages were even worse, with one making over 1,000 queries!</p>
<p>At this point, I was practically hyperventilating. If I had written a web app that made that many queries on one page from scratch, I’d be seriously considering whether I was cut out for this industry. With an off-the-shelf CMS, you do have to accept some degree of bloat as a trade-off for quicker development time, but these numbers beggar belief.</p>
<p>I was able to mitigate this to some extent. First, I cut down the number of products shown on individual pages and audited the installed plugins, removing ones we could do without. This still left a lot more queries than I liked.</p>
<p>The next step was to enable caching. I installed Memcached and Varnish (incidentally, if you haven’t used Varnish before, you should check it out - it can make a huge difference for slow sites). I then installed and configured W3 Total Cache to work with them. This didn’t solve the fundamental problem of the initial page loads being too database-intensive, but it did mean that the result was cached for some time afterwards, making things easier on subsequent users.</p>
<p>This still wasn’t enough, however. The admin was still very slow, and often crashed. I actually wound up having to write a shell script that would check to see if MySQL was running and restart it if it wasn’t, and set up a cron job to run it every minute, just to ensure I wasn’t having to restart it myself. The issue was only really dealt with once we upped the specs on the VPS from 1GB RAM and 1 core to 3GB RAM and 2 cores, which should really have been overkill for something like WordPress.</p>
<p>As it turned out, the issue wasn’t exactly helped by the fact that someone had been making an unusually persistent attempt to brute-force <code>wp-login.php</code>. I was able to mitigate this by password-protecting it in the <code>.htaccess</code> file and adding some custom rules to fail2ban But the fundamental problem remained that the resources used by WordPress to load a single page were grossly excessive.</p>
<p>Since then, we’ve continued to have some difficulties with it. There are some rather arcane criteria for calculating the shipping costs, and implementing them has been a real uphill struggle. We’ve also had to deal with breakages in the theme when updating WooCommerce, and other painful issues. It feels at times like the site will never be “done done”.</p>
<p>Now, I’ve had some issues with WordPress before, but this was by far the nastiest I’d ever seen, and it made me think very hard about when we should and should not consider WordPress as a solution. In hindsight, it would have been much easier to use Laravel to build the site from scratch - it would have made for a much leaner, more efficient site, updating the templates would have been a breeze, and implementing additional functionality would have been straightforward.</p>
<p>NB: I’m trying hard to make sure this is NOT one of those “WordPress sucks” blog posts. I’ll admit that I agree with many of the points from a lot of those, and I abandoned WordPress for my own site a long time ago in favour of a static site generator, but there are times when it is appropriate to use it. What I’m trying to do here is to help others avoid making the mistakes we did recently by giving some advice on when you should and should not use WordPress. Of course, your mileage may vary.</p>
<h2 id="why-was-wordpress-inappropriate-here-">Why was WordPress inappropriate here?</h2>
<p>With the benefit of hindsight, I can say that WordPress was definitely not the right solution in this case, and I will be advising against using it in similar circumstances. But why was it inappropriate?</p>
<ul>
<li><strong>Less flexible than rolling a custom solution</strong> - While the ecosystem of plugins and themes make it possible to use WordPress for a lot of use cases outside the core functionality of the platform, those plugins and themes aren’t infinitely flexible. If you want to do something one way and the plugin you’re using doesn’t support that, you’re out of luck unless you can fork the plugin or write a new one.</li>
<li><strong>Dependence on third party plugins</strong> - While we were working on the site, WooCommerce made some changes that broke the theme we were using. We were using a child theme, but updating the parent theme alone didn’t fix it - we had to then apply some of the changes to the child theme as well, which was extremely fiddly. As a result, we’re now very wary about updating plugins and themes. Yet we don’t dare put it off too long, because in my experience attempts to break into WordPress are common, and if you fail to install an upgrade that fixes a vulnerability in good time, you can easily find yourself getting a phone call about a site having been hacked (as I did in December last year).</li>
<li><strong>Poor performance</strong> - This is a big one, and I have therefore broken it down further:<ul>
<li><strong>Loading styling from the database</strong> - Many of the high end, customisable themes have large numbers of configuration options that can be used to style the site. The downside of these is that it creates additional queries to the database to fetch that data. Unless you have some form of caching in place, that data is loaded for every single request to the front end, generating a significant number of additional queries. You can mitigate this by rolling your own custom WordPress theme for the site, however.</li>
<li><strong>Too many queries</strong> - My experience has been that as a general rule of thumb, it’s much quicker to make a smaller number of more complex queries to a database than to make a larger number of simple queries. If you build a custom web app, you will always know exactly what data you want to retrieve on a particular page and through careful use of joins, can retrieve exactly the data you need with as few queries as possible. Being a generic solution, WordPress doesn’t know exactly what data you need on any one page, and so may fetch the data using an excessive number of queries. It may also fetch data you don’t actually need.</li>
<li><strong>Suboptimal database layout</strong> - The database schema for WordPress was originally created with a blog in mind, and may not always be optimal for your particular use case.</li>
<li><strong>Caching is not a silver bullet</strong> - You can do a lot to improve performance by installing Memcached and Varnish, and configuring a caching plugin to work with them. However, this doesn’t solve the problem of the excessive number of queries, it only mitigates the effects somewhat. Not everything can be cached, and the expensive queries will still have to be run at some point. Caching only increases the time between the queries. Also, configuring Varnish in particular can be something of a black art, and it’s easy to miss something and find out some functionality or other hasn’t been working.</li>
</ul>
</li>
</ul>
<p>WordPress has a lot of technical limitations and deficiencies from a programmer’s point of view. For all that, it works, it’s easy to set up, and there’s a wide variety of plugins and themes available, so it’s often an appropriate choice. While the performance is poorer than I would like, the harsh truth is that often it doesn’t matter - if your site isn’t serving a huge amount of page requests, a few extra queries don’t actually make all that much difference (within reason, of course). My concern is that use of WordPress when it’s entirely inappropriate is widespread.</p>
<h2 id="is-wordpress-being-overused-">Is WordPress being overused?</h2>
<p><img src="/static/images/wordpress-dane-cook.jpg" alt="Archer - WordPress? The Dane Cook of content management systems?"></p>
<p>I suspect I’m running the risk of being branded a hipster for saying this (“Now it’s popular, you hate WordPress…”), but the fact that WordPress is widespread and popular does not mean that it’s the best solution for your project. Nor does the fact that it’s technically possible to use it for your project.</p>
<p>A few years ago, I built a now-defunct site and mobile app for a client that monitored web pages, or product prices on web pages, for changes, and notified the user when a change occurred. It was built using CodeIgniter 2, and had an integrated blog. At one point, the client was unhappy because it wasn’t built with WordPress, believing that this was the reason why few people were signing up. To use WordPress for this project would have involved building the additional functionality, including the API for the mobile app, as a plugin, which would have slowed down development considerably - in my experience it’s generally much harder to build something as a WordPress plugin than using an MVC framework due to the lack of separation of concerns, which makes the code base more confusing.</p>
<p>This is a good example of the alarming trend I’ve noticed in the last few years whereby a large number of people seem to be under the mistaken impression that WordPress is some kind of all-singing, all-dancing general purpose solution for building websites. I suspect that the reason for this may be that WordPress is commonplace enough that people outside of the web industry have often heard of it, and therefore they often ask for it since it’s what they’ve heard of, not knowing whether or not it’s actually appropriate for their needs. What isn’t always apparent to non-developers is that it’s often considerably easier for a developer to implement the core functionality of WordPress using a modern MVC framework than it is for them to implement the other functionality using WordPress, and as the functionality is being built with your exact use case in mind, the user interface is often more straightforward than the WordPress admin. Also, the WordPress privilege system can make it difficult for you to limit the user to just the functionality you want them to have, resulting in a situation where either you give the users a potentially dangerous level of access, or force them to contact you to make certain changes, making more work for you.</p>
<p>I’ve heard plenty of people say things like “WordPress is a framework” and “A competent developer can build anything with WordPress”. These claims are utter hogwash. A competent developer is smart enough to recognise that WordPress is not a one-size fits all solution and it’s not always appropriate to use it - you can easily spend more time trying to get it to do something off the beaten track than it would take to build that functionality from scratch. I think the way that Automattic are trying to promote WordPress as an application framework is a really bad idea - trying to use it for this is much more cumbersome than using a modern PHP framework like Laravel.</p>
<p>Even if you ignore the technical deficiencies of WordPress, it is too opinionated to be a good solution for use as a framework, and as such you’ll spend a lot of time trying to work around the existing implementations of existing functionality when they don’t quite meet your requirements.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For all its flaws, WordPress is very useful. It’s generally a good choice for blogs, brochure-style sites, and small e-commerce solutions where the client is not too fussy about the details of how it works. For virtually every other situation, I plan on looking elsewhere in future.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Django views in isolation]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/">
        </link>
        <updated>2015-08-02T16:58:45Z</updated>
        <summary type="html"><![CDATA[<p>One thing you may hear said often about test-driven development is that as far as possible, you should test everything in isolation. However, it’s not always immediately clear how you actually go about doing this. In Django, it’s fairly easy to get your head around testing models in isolation because they’re single objects that you can just create, save, and then check their attributes. Forms are also quite easy to test, because you can just set the parameters with the appropriate values and check that the validation works as expected. With views, it’s much harder to imagine how you’d go about testing them in isolation, and often people just settle for writing higher-level functional tests instead. While functional tests are important, they’re also slower than unit tests, which makes it less likely they’ll be run often. So I thought I’d show you a quick and simple example of testing a Django view in isolation.</p>
<p>One of the little projects I’ve written in the past to help get my head around certain aspects of Django is a code-snippet sharing Django application which I named <a href="https://github.com/matthewbdaly/snippetr">Snippetr</a>. The index route of this application is a form for submitting a brand-new code snippet and I’ll show you how we would write a test for that.</p>
<h2 id="testing-a-get-request">Testing a GET request</h2>
<p>Before now, you may well have used the Django test client to test views. That is fine for higher-level tests, but if you want to test a view in isolation, it’s no use because it emulates a real web server and all of the middleware and authentication, which we want to keep out of the way. Instead, we need to use <code>RequestFactory</code>:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</table></code></pre>
<p><code>RequestFactory</code> actually implements a subset of the functionality of the Django test client, so while it will feel somewhat familiar, it won’t have all the same functionality. For instance, it doesn’t support middleware, so rather than logging in using the test client’s <code>login()</code> method, you instead attach a user directly to the request, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>request = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>request.user = user</td></table></code></pre>
<p>You have to specify the URL in the request, but you also have to explicitly pass the request through to the view you want to test, which can be a bit confusing. Let’s see it in context. First of all, we want to write a test for making a GET request:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnippetCreateViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Test the snippet create view</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        self.user = UserFactory()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        Test GET requests</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'snippet_create'</span>))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'user'</span>], self.user)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'request'</span>], request)</td></table></code></pre>
<p>First of all, we define a <code>setUp()</code> method that creates a user and an instance of <code>RequestFactory()</code> for use in the test. Note that I’m using Factory Boy to define <code>UserFactory</code> in order to make it easier to work with. Also, if you have more than one view to test, you should create a base class containing the <code>setUp()</code> method that your view tests inherit from.</p>
<p>Next, we have our test for making a GET request. Note that we’re using the <code>reverse()</code> method to get the route for the view named <code>snippet_create</code>. You’ll need to import this as follows if you’re not yet using it:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</table></code></pre>
<p>We then attach our user object to the request manually, and fetch the response by passing the request to the view as follows:</p>
<pre><code class="hljs lang-python singleline"><table>    response = SnippetCreateView.as_view()(request)</table></code></pre>
<p>Note that this is the syntax used for class-based views - we call the view’s <code>as_view()</code> method. For a function-based view, the syntax is a bit simpler:</p>
<pre><code class="hljs lang-python singleline"><table>    response = my_view(request)</table></code></pre>
<p>We then test our response as usual. In this case, the view adds some additional context data, and we check that we can access that, as well as checking the status code.</p>
<h2 id="testing-a-post-request">Testing a POST request</h2>
<p>Testing a POST request is a little more challenging in this case because submitting the form will create a new <code>Snippet</code> object and we don’t want to interact with the model layer at all if we can help it. We want to test the view in isolation, partly because it will be faster, and partly because it’s a good idea. We can do this by mocking the <code>Snippet</code> model’s <code>save()</code> method.</p>
<p>To do so, we need to import two things from the <code>mock</code> library. If you’re using Python 3.4 or later, then <code>mock</code> is part of <code>unittest</code> as <code>unittest.mock</code>. Otherwise, it’s a separate library you need to install with <code>pip</code>. Here’s the import statement for those on Python 3.4 or later:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> unittest.mock <span class="hljs-keyword">import</span> patch, MagicMock</table></code></pre>
<p>And for those on earlier versions:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> mock <span class="hljs-keyword">import</span> patch, MagicMock</table></code></pre>
<p>Now, our test for the POST requests should look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-decorator">@patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        Test post requests</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the request</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My snippet'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'content'</span>: <span class="hljs-string">'This is my snippet'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'snippet_create'</span>), data)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Get the response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">302</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check save was called</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertTrue(Snippet.save.called)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEqual(Snippet.save.call_count, <span class="hljs-number">1</span>)</td></table></code></pre>
<p>Note first of all the following line:</p>
<pre><code class="hljs lang-python singleline"><table>    <span class="hljs-decorator">@patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></table></code></pre>
<p>Here we’re saying that in this test, when the <code>save()</code> method of the <code>Snippet</code> model is called, it should instead call a mocked version, which lacks the functionality and only registers that it has been called and a few details about it.</p>
<p>Next, we put together the data to be passed through and create a POST request for it. As before, we attach the user to the request. We then pass the request through in the same way as for the GET request. We also check that the response code was 302, meaning that the user would be redirected elsewhere after the form was submitted correctly.</p>
<p>Finally, we assert that <code>Snippet.save.called</code> is true. <code>called</code> is a Boolean value, representing whether the method was called or not. We also check the value of <code>Snippet.save.call_count</code>, which is a count of the number of times the method was called - here we check that it’s set to 1.</p>
<p>As you can see, while the request factory is a little harder than the Django test client to figure out, it’s not too difficult once you get the hang of it. By combining it with judicious use of <code>mock</code>, you can easily test your views in isolation, and without having to interact with the database or set up any middleware, these tests will be much faster than those using the Django test client.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploring the HStoreField in Django 1.8]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/">
        </link>
        <updated>2015-08-01T17:26:54Z</updated>
        <summary type="html"><![CDATA[<p>One of the most interesting additions in Django 1.8 is the new Postgres-specific fields. I started using PostgreSQL in preference to MySQL for Django apps last year, and so I was interested in the additional functionality they offer.</p>
<p>By far the biggest deal out of all of these was the new <code>HStoreField</code> type. PostgreSQL added a JSON data type a little while back, and <code>HStoreField</code> allows you to use that field type. This is a really big deal because it allows you to store arbitrary data as JSON and query it. Previously, you could of course just store data as JSON in a text field, but that lacked the same ability to query it. This gives you many of the advantages of a NoSQL document database such as MongoDB in a relational database. For instance, you can store different products with different data about them, and crucially, query them by that data. Previously, the only way to add arbitrary product data and be able to query it was to have it in a separate table, and it was often cumbersome to join them when fetching multiple products.</p>
<p>Let’s see a working example. We might be building an online store where products can have all kinds of arbitrary data stored about them. One product might be a plastic box, and you’d need to list the capacity as an additional attribute. Another product might be a pair of shoes, which have no capacity, but do have a size. It might be difficult to model this otherwise, but <code>HStoreField</code> is perfect for this kind of data.</p>
<p>First, let’s set up our database. I’ll assume you already have PostgreSQL up and running via your package manager. First, we need to create our database:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createdb djangostore</table></code></pre>
<p>Next, we need to create a new user for this database with superuser access:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createuser store <span class="hljs-operator">-s</span> -P</table></code></pre>
<p>You’ll be prompted for a password - I’m assuming this will just be <code>password</code> here. Next, we need to connect to PostgreSQL using the <code>psql</code> utility:</p>
<pre><code class="hljs lang-bash singleline"><table>$ psql djangostore -U store -W</table></code></pre>
<p>You’ll be prompted for your new password. Next, run the following command:</p>
<pre><code class="hljs lang-psql singleline"><table># <span class="hljs-operator"><span class="hljs-keyword">CREATE</span> EXTENSION <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> hstore;</span></table></code></pre>
<p>This installs the HStore extension. Next let’s make sure our new user has the privileges required on the new database:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td># <span class="hljs-operator"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DATABASE</span> djangostore <span class="hljs-keyword">TO</span> store;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td># \q</td></table></code></pre>
<p>We’ve now created our database and a user to interact with it. Next, we’ll set up our Django install:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ <span class="hljs-built_in">cd</span> Projects</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir djangostore</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ <span class="hljs-built_in">cd</span> djangostore</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ pyvenv venv</td><tr><td class="linenos" data-pseudo-content="5"></td><td>$ <span class="hljs-built_in">source</span> venv/bin/activate</td><tr><td class="linenos" data-pseudo-content="6"></td><td>$ pip install Django psycopg2 ipdb</td><tr><td class="linenos" data-pseudo-content="7"></td><td>$ django-admin.py startproject djangostore</td><tr><td class="linenos" data-pseudo-content="8"></td><td>$ python manage.py startapp store</td></table></code></pre>
<p>I’m assuming here that you’re using Python 3.4. On Ubuntu, getting it working is <a href="https://gist.github.com/denilsonsa/21e50a357f2d4920091e">a bit more involved</a>.</p>
<p>Next, open up <code>djangostore/settings.py</code> and amend <code>INSTALLED_APPS</code> to include the new app and the PostgreSQL-specific functionality:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'django.contrib.postgres'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>)</td></table></code></pre>
<p>You’ll also need to configure the database settings:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.postgresql_psycopg2'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'djangostore'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-string">'HOST'</span>: <span class="hljs-string">'localhost'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-string">'PORT'</span>: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>We need to create an empty migration to use <code>HStoreField</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py makemigrations --empty store</table></code></pre>
<p>This command should create the file <code>store/migrations/0001_initial.py</code>. Open this up and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># -*- coding: utf-8 -*-</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models, migrations</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.operations <span class="hljs-keyword">import</span> HStoreExtension</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Migration</span><span class="hljs-params">(migrations.Migration)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    dependencies = [</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    operations = [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        HStoreExtension(),</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    ]</td></table></code></pre>
<p>This will make sure the HStore extension is installed. Next, let’s run these migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Synchronize unmigrated apps: messages, staticfiles, postgres</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Apply all migrations: sessions, store, admin, auth, contenttypes</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Synchronizing apps without migrations:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Creating tables...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    Running deferred SQL...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Installing custom SQL...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying contenttypes.<span class="hljs-number">0001</span>_initial... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.<span class="hljs-number">0001</span>_initial... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying admin.<span class="hljs-number">0001</span>_initial... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying contenttypes.<span class="hljs-number">0002</span>_remove_content_<span class="hljs-built_in">type</span>_name... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.<span class="hljs-number">0002</span>_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.<span class="hljs-number">0003</span>_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying auth.<span class="hljs-number">0004</span>_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  Applying auth.<span class="hljs-number">0005</span>_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  Applying auth.<span class="hljs-number">0006</span>_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  Applying sessions.<span class="hljs-number">0001</span>_initial... OK</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  Applying store.<span class="hljs-number">0001</span>_initial... OK</td></table></code></pre>
<p>Now, we’re ready to start creating our <code>Product</code> model. Open up <code>store/models.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.fields <span class="hljs-keyword">import</span> HStoreField</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    updated_at = models.DateTimeField(auto_now=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    price = models.FloatField()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    attributes = HStoreField()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> self.name</td></table></code></pre>
<p>Note that <code>HStoreField</code> is not part of the standard group of model fields, and needs to be imported from the Postgres-specific fields module. Next, let’s create and run our migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>We should now have a <code>Product</code> model where the <code>attributes</code> field can be any arbitrary data we want. Note that we installed <code>ipdb</code> earlier - if you’re not familiar with it, this is an improved Python debugger, and also pulls in <code>ipython</code>, an improved Python shell, which Django will use if available.</p>
<p>Open up the Django shell:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py shell</table></code></pre>
<p>Then, import the <code>Product</code> model:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> store.models <span class="hljs-keyword">import</span> Product</table></code></pre>
<p>Let’s create our first product - a plastic storage box:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>box = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>box.name = <span class="hljs-string">'Box'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>box.description = <span class="hljs-string">'A big box'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>box.price = <span class="hljs-number">5.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>box.attributes = { <span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">"colour"</span>: <span class="hljs-string">"blue"</span>}</td><tr><td class="linenos" data-pseudo-content="6"></td><td>box.save()</td></table></code></pre>
<p>If we take a look, we can see that the attributes can be returned as a Python dictionary:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">12</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">12</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>We can easily retrieve single values:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">15</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes[<span class="hljs-string">'capacity'</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">15</span>]: <span class="hljs-string">'1L'</span></td></table></code></pre>
<p>Let’s add a second product - a mop:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>mop = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>mop.name = <span class="hljs-string">'Mop'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>mop.description = <span class="hljs-string">'A mop'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>mop.price = <span class="hljs-number">12.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>mop.attributes = { <span class="hljs-string">'colour'</span>: <span class="hljs-string">"red"</span> }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>mop.save()</td></table></code></pre>
<p>Now, we can filter out only the red items easily:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">2</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'red'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">2</span>]: [&lt;Product: Mop&gt;]</td></table></code></pre>
<p>Here we search for items where the <code>colour</code> attribute is set to <code>red</code>, and we only get back the mop. Let’s do the same for blue items:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">3</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Here it returns the box. Let’s now search for an item with a capacity of 1L:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">4</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">4</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Only the box has the capacity attribute at all, and it’s the only one returned. Let’s see what happens when we search for an item with a capacity of 2L, which we know is not present:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">5</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'2L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">5</span>]: []</td></table></code></pre>
<p>No items returned, as expected. Let’s look for any item with the <code>capacity</code> attribute:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">6</span>]: Product.objects.filter(attributes__has_key=<span class="hljs-string">'capacity'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">6</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Again, it only returns the box, as that’s the only one where that key exists. Note that all of this is tightly integrated with the existing API for the Django ORM. Let’s add a third product, a food hamper:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: hamper = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">4</span>]: hamper.name = <span class="hljs-string">'Hamper'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>In [<span class="hljs-number">5</span>]: hamper.description = <span class="hljs-string">'A food hamper'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>In [<span class="hljs-number">6</span>]: hamper.price = <span class="hljs-number">19.99</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>In [<span class="hljs-number">7</span>]: hamper.attributes = {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>   ...: <span class="hljs-string">'contents'</span>: <span class="hljs-string">'ham, cheese, coffee'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>   ...: <span class="hljs-string">'size'</span>: <span class="hljs-string">'90cmx60cm'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   ...: }</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>In [<span class="hljs-number">8</span>]: hamper.save()</td></table></code></pre>
<p>Next, let’s return only those items that have a <code>contents</code> attribute that contains <code>cheese</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">9</span>]: Product.objects.filter(attributes__contents__contains=<span class="hljs-string">'cheese'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">9</span>]: [&lt;Product: Hamper&gt;]</td></table></code></pre>
<p>As you can see, the <code>HStoreField</code> type allows for quite complex queries, while allowing you to set arbitrary values for an individual item. This overcomes one of the biggest issues with relational databases - the inability to set arbitrary data. Previously, you might have to work around it in some fashion, such as creating a table containing attributes for individual items which had to be joined on the product table. This is very cumbersome and difficult to use, especially when you wanted to work with more than one product. With this approach, it’s easy to filter products by multiple values in the HStore field, and you get back all of the attributes at once, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">13</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">13</span>]: [&lt;Product: Box&gt;]</td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">14</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Out[<span class="hljs-number">14</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>Similar functionality is coming in a future version of MySQL, so it wouldn’t be entirely surprising to see <code>HStoreField</code> become more generally available in Django in the near future. For now, this functionality is extremely useful and makes for a good reason to ditch MySQL in favour of PostgreSQL for your future Django apps.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[New laptop]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/07/21/new-laptop/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/07/21/new-laptop/">
        </link>
        <updated>2015-07-21T20:15:52Z</updated>
        <summary type="html"><![CDATA[<p>For a while now it’s been obvious that I needed a new laptop. My main workhorse for a while has been a 2008 MacBook, but I’m not really a fan of Mac OS X and it was stuck on Snow Leopard, so it was somewhat behind the times. It was also painfully slow by modern standards - regenerating this site took a couple of minutes. I had two other reasonably modern laptops, but one was too big and cumbersome, while the other was a Dell Mini, which isn’t really fast enough for a developer. When I last bought a laptop, I wasn’t even a developer, so it was long past time I got a more suitable machine.</p>
<p>I therefore took the plunge and ordered a new Dell XPS 13 Developer Edition, which arrived today. It’s an absolutely beautiful machine, and it’s extremely light. It’s also a <em>lot</em> faster than any other machine I own. The screen is exceptionally sharp, and setting it up was nice and easy.</p>
<p>After an hour or so with this machine, I’m already really happy with it. We’ll have to see whether I still think so after a few months using it.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Handling images as base64 strings with Django REST Framework]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/">
        </link>
        <updated>2015-07-04T12:01:40Z</updated>
        <summary type="html"><![CDATA[<p>I’m currently working on a Phonegap app that involves taking pictures and uploading them via a REST API. I’ve done this before, and I found at that time that the best way to do so was to fetch the image as a base-64 encoded string and push that up, rather than the image file itself. However, the last time I did so, I was using Tastypie to build the API, and I’ve since switched over to Django REST Framework as my API toolkit of choice.</p>
<p>It didn’t take long to find <a href="https://gist.github.com/yprez/7704036">this gist</a> giving details of how to do so, but it didn’t work as is, partly because I was using Python 3, and partly because the <code>from_native</code> method has gone as at Django REST Framework 3.0. It was, however, straightforward to adapt it to work. Here’s my solution:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> base64, uuid</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.core.files.base <span class="hljs-keyword">import</span> ContentFile</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># Custom image field - handles base 64 encoded images</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base64ImageField</span><span class="hljs-params">(serializers.ImageField)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_internal_value</span><span class="hljs-params">(self, data)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">if</span> isinstance(data, str) <span class="hljs-keyword">and</span> data.startswith(<span class="hljs-string">'data:image'</span>):</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-comment"># base64 encoded image - decode</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            format, imgstr = data.split(<span class="hljs-string">';base64,'</span>) <span class="hljs-comment"># format ~= data:image/X,</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            ext = format.split(<span class="hljs-string">'/'</span>)[-<span class="hljs-number">1</span>] <span class="hljs-comment"># guess file extension</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            id = uuid.uuid4()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            data = ContentFile(base64.b64decode(imgstr), name = id.urn[<span class="hljs-number">9</span>:] + <span class="hljs-string">'.'</span> + ext)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> super(Base64ImageField, self).to_internal_value(data)</td></table></code></pre>
<p>This solution will handle both base 64 encoded strings and image files. Then, just use this field as normal.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting django-behave and Celery to work together]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/">
        </link>
        <updated>2015-06-17T19:34:08Z</updated>
        <summary type="html"><![CDATA[<p>I ran into a small issue today. I’m working on a Django app which uses Celery to handle certain tasks that don’t need to return a response within the context of the HTTP request. I also wanted to use <code>django_behave</code> for running BDD tests. The trouble is that both <code>django_behave</code> and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.</p>
<p>However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default test runner to make it work with Celery. I was therefore able to create my own custom test runner that inherited from <code>DjangoBehaveTestSuiteRunner</code> and applied the changes necessary to get Celery working with it. Here is the test runner I wrote, which was saved as <code>myproject/runner.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> djcelery.contrib.test_runner <span class="hljs-keyword">import</span> _set_eager</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django_behave.runner <span class="hljs-keyword">import</span> DjangoBehaveTestSuiteRunner</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CeleryAndBehaveRunner</span><span class="hljs-params">(DjangoBehaveTestSuiteRunner)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup_test_environment</span><span class="hljs-params">(self, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        _set_eager()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        settings.BROKER_BACKEND = <span class="hljs-string">'memory'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        super(CeleryAndBehaveRunner, self).setup_test_environment(**kwargs)</td></table></code></pre>
<p>To use it, you need to set the test runner in <code>settings.py</code></p>
<pre><code class="hljs lang-python singleline"><table>TEST_RUNNER = <span class="hljs-string">'myproject.runner.CeleryAndBehaveRunner'</span></table></code></pre>
<p>Once that was done, my tests worked flawlessly with Celery, and the Behave tests ran as expected.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting ETags in Laravel 5]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/">
        </link>
        <updated>2015-06-14T20:29:52Z</updated>
        <summary type="html"><![CDATA[<p>Although I’d prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, but that was through nothing more than inertia. For some time I’d been planning to switch to Laravel, largely because of the baked-in PHPUnit support, but events conspired against me - one big project that came along had a lot in common with an earlier one, so I forked it rather than starting over.</p>
<p>Recently I built a REST API for a mobile app, and I decided to use that to try out Laravel (if it had been available at the time, I’d have gone for Lumen instead). I was very pleased with the results - I was able to quickly put together the back end I wanted, with good test coverage, and the <code>tinker</code> command in particular was useful in debugging. The end result is fast and efficient, with query caching in place using Memcached to improve response times.</p>
<p>I also implemented a simple middleware to add ETags to HTTP responses and compare them on incoming requests, returning a <code>304 Not Modified</code> status code if they are the same, which is given below:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-preprocessor">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ETagMiddleware</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Implement Etag support</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-variable">$request</span>, Closure <span class="hljs-variable">$next</span>)</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Get response</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-variable">$response</span> = <span class="hljs-variable">$next</span>(<span class="hljs-variable">$request</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// If this was a GET request...</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;isMethod(<span class="hljs-string">'get'</span>)) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-comment">// Generate Etag</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-variable">$etag</span> = md5(<span class="hljs-variable">$response</span>-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-variable">$requestEtag</span> = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">''</span>, <span class="hljs-variable">$request</span>-&gt;getETags());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-comment">// Check to see if Etag has changed</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$requestEtag</span> &amp;&amp; <span class="hljs-variable">$requestEtag</span>[<span class="hljs-number">0</span>] == <span class="hljs-variable">$etag</span>) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                <span class="hljs-variable">$response</span>-&gt;setNotModified();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-comment">// Set Etag</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-variable">$response</span>-&gt;setEtag(<span class="hljs-variable">$etag</span>);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td></table></code></pre>
<p>This is based on <a href="https://www.nickv.codes/blog/etags-in-laravel-4/">a solution for Laravel 4 by Nick Verwymeren</a>, but implemented as Laravel 5 middleware, not a Laravel 4 filter. To use this with Laravel 5, save this as <code>app/Http/Middleware/ETagMiddleware.php</code>. Then add this to the <code>$middleware</code> array in <code>app/Http/Kernel.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>        <span class="hljs-string">'App\Http\Middleware\ETagMiddleware'</span>,</table></code></pre>
<p>It’s quite simple to write this kind of middleware with Laravel, and using something like this is a no-brainer for most web apps considering the bandwidth it will likely save your users.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My static site generator post on Sitepoint]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/">
        </link>
        <updated>2015-05-03T18:55:30Z</updated>
        <summary type="html"><![CDATA[<p>I wrote an article for Sitepoint recently about creating a static site generator as a Grunt plugin, similar to the one for this site. You can find it <a href="http://www.sitepoint.com/building-static-site-generator-grunt-plugin/">here</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I added search to my site with Lunr.js]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/">
        </link>
        <updated>2015-04-18T14:05:41Z</updated>
        <summary type="html"><![CDATA[<p>As I mentioned a while back, I recently switched the search on my site from Google’s site-specific search to <a href="http://lunrjs.com/">Lunr.js</a>. Since my site is built with a static site generator, I can’t implement search using database queries, and I was keen to have an integrated search method that would be fast and not require server-side scripting, and Lunr.js seemed to fit the bill.</p>
<p>The first task in implementing it was to generate the index. As I wrote the Grunt task that generates the blog, I amended that task to generate an index at the same time as I generated the posts. I installed Lunr.js with the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>npm install lunr --save</table></code></pre>
<p>I then imported it in the task, and set up the field names:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">var</span> lunr = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lunr'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    searchIndex = lunr(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">this</span>.field(<span class="hljs-string">'title'</span>, { boost: <span class="hljs-number">10</span> });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">this</span>.field(<span class="hljs-string">'body'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">this</span>.ref(<span class="hljs-string">'href'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    });</td></table></code></pre>
<p>This defined fields for the title, body, and hyperlink, and set the hyperlink as the reference. The variable <code>searchIndex</code> represents the Lunr index.</p>
<p>Next, I looped through the posts, and passed the appropriate details to be added to the index:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">for</span> (post <span class="hljs-keyword">in</span> post_items) {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">var</span> doc = {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-string">'title'</span>: post_items[post].meta.title,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'body'</span>: post_items[post].post.rawcontent,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'href'</span>: post_items[post].path</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        store[doc.href] = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>: doc.title</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        searchIndex.add(doc);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td></table></code></pre>
<p>At this point, <code>post_items</code> represents an array of objects, with each object representing a blog post. Note that the <code>body</code> field is set to the value of the item’s attribute <code>post.rawcontent</code>, which represents the raw Markdown rather than the compiled HTML.</p>
<p>I then store the title in the <code>store</code> object, so that it can be accessed using the <code>href</code> field as a key.</p>
<p>I then do the same thing when generating the pages:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Add them to the index</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> doc = {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'title'</span>: data.meta.title,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'body'</span>: data.post.rawcontent,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'href'</span>: permalink + <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    store[doc.href] = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-string">'title'</span>: data.meta.title</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    searchIndex.add(doc);</td></table></code></pre>
<p>Note that this is already inside the loop that generates the pages, so I don’t include that.</p>
<p>We then write the index to a file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Write index</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    grunt.file.write(options.www.dest + <span class="hljs-string">'/lunr.json'</span>, <span class="hljs-built_in">JSON</span>.stringify({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        index: searchIndex.toJSON(),</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        store: store</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }));</td></table></code></pre>
<p>That takes care of generating our index, but we need to implement some client-side code to handle the search. We need to include Lunr.js on the client side as well, (I recommend using Bower to do so), alongside jQuery. If you include both, the following code should do the trick:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment">// Set up search</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">var</span> index, store;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    $.getJSON(<span class="hljs-string">'/lunr.json'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Create index</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        index = lunr.Index.load(response.index);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Create store</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        store = response.store;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Handle search</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $(<span class="hljs-string">'input#search'</span>).on(<span class="hljs-string">'keyup'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-comment">// Get query</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">var</span> query = $(<span class="hljs-keyword">this</span>).val();</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-comment">// Search for it</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-keyword">var</span> result = index.search(query);</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-comment">// Output it</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-keyword">var</span> resultdiv = $(<span class="hljs-string">'ul.searchresults'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-keyword">if</span> (result.length === <span class="hljs-number">0</span>) {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                <span class="hljs-comment">// Hide results</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                resultdiv.hide();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                <span class="hljs-comment">// Show results</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>                resultdiv.empty();</td><tr><td class="linenos" data-pseudo-content="30"></td><td>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> result) {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-keyword">var</span> ref = result[item].ref;</td><tr><td class="linenos" data-pseudo-content="32"></td><td>                    <span class="hljs-keyword">var</span> searchitem = <span class="hljs-string">'&lt;li&gt;&lt;a href="'</span> + ref + <span class="hljs-string">'"&gt;'</span> + store[ref].title + <span class="hljs-string">'&lt;/a&gt;&lt;/li&gt;'</span>;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                    resultdiv.append(searchitem);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                resultdiv.show();</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>});</td></table></code></pre>
<p>This should be easy to understand. On load, we fetch and parse the <code>lunr.json</code> file from the server, and load the index. We then set up an event handler for the <code>keyup</code> event on an input with the ID of <code>search</code>. We get the value of the input, and query our index, and we loop through our results and display them.</p>
<p>I was pleased with how straightforward it was to implement search with Lunr.js, and it works well. It’s also a lot faster than any server-side solution since the index is generated during the build process, and is loaded with the test of the site, so the only factor in the speed of the response is how quick your browser executes JavaScript. You could probably also use it with a Node.js application by generating the index dynamically, although you’d probably want to cache it to some extent.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding a new search engine to my site]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/">
        </link>
        <updated>2015-04-04T00:47:43Z</updated>
        <summary type="html"><![CDATA[<p>I’ve just finished implementing a new search engine for this site. Obviously, with it using a static site generator, searching a relational database isn’t an option. For a long while I’d just been getting by with Google’s site-specific search, which worked, but meant leaving the site to view the search results.</p>
<p>Now, I’ve implemented a client-side search system using <a href="http://lunrjs.com/">Lunr.js</a>. It wasn’t too time consuming, and as the index is generated with the rest of the site and loaded with the page, the response is almost instantaneous. I may write a future blog post on how to integrate Lunr.js with your site, as it’s very handy and is an ideal solution for implementing search on a static site.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Syntax highlighting in fenced code blocks in Vim]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/">
        </link>
        <updated>2015-03-02T23:25:43Z</updated>
        <summary type="html"><![CDATA[<p>Just thought I’d share a little trick I picked up recently. As you may know, GitHub flavoured Markdown (which I use for this blog) supports fenced code blocks, allowing you to specify a language for a block of code in a Markdown file.</p>
<p>If you put the following code in your <code>.vimrc</code>, you can get syntax highlighting in those code blocks when you open up a Markdown file in Vim:</p>
<pre><code class="hljs lang-viml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-string">"Syntax highlighting in Markdown</td><tr><td class="linenos" data-pseudo-content="2"></td><td></span><span class="hljs-keyword">au</span> BufNewFile,BufReadPost *.md <span class="hljs-keyword">set</span> <span class="hljs-keyword">filetype</span>=markdown</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">let</span> <span class="hljs-variable">g:markdown_fenced_languages</span> = [<span class="hljs-string">'bash=sh'</span>, <span class="hljs-string">'css'</span>, <span class="hljs-string">'django'</span>, <span class="hljs-string">'handlebars'</span>, <span class="hljs-string">'javascript'</span>, <span class="hljs-string">'js=javascript'</span>, <span class="hljs-string">'json=javascript'</span>, <span class="hljs-string">'perl'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'ruby'</span>, <span class="hljs-string">'sass'</span>, <span class="hljs-string">'xml'</span>, <span class="hljs-string">'html'</span>]</td></table></code></pre>
<p>This does depend on having the appropriate syntax files installed. However, you can easily add in syntax files for many other languages that Vim supports, and there are third-party ones available to install - in my case, I’ve got the <code>handlebars</code> one installed, which doesn’t come with Vim.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Extending our Node.js and Redis chat server]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/">
        </link>
        <updated>2015-03-02T23:03:48Z</updated>
        <summary type="html"><![CDATA[<p>In this tutorial, we’re going to extend the chat system we built in <a href="/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/">the first tutorial</a> to include the following functionality:</p>
<ul>
<li>Persisting the data</li>
<li>Prompting users to sign in and storing their details in a Redis-backed session</li>
</ul>
<p>In the process, we’ll pick up a bit more about using Redis.</p>
<h2 id="persistence">Persistence</h2>
<p>Our first task is to make our messages persist when the session ends. Now, in order to do this, we’re going to use a list. A list in Redis can be thought of as equivalent to an array or list in most programming languages, and can be retrieved by passing the key in a similar fashion to how you would retrieve a string.</p>
<p>As usual, we will write our test first. Open up <code>test/test.js</code> and replace the test for sending a message with this:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test sending a message</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test sending a message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">"should return 'Message received'"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-comment">// Connect to server</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-string">'http://localhost:5000'</span>, {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                <span class="hljs-string">'reconnection delay'</span> : <span class="hljs-number">0</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-string">'reopen delay'</span> : <span class="hljs-number">0</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-string">'force new connection'</span> : <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-comment">// Handle the message being received</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                expect(data).to.include(<span class="hljs-string">'Message received'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>                client.lrange(<span class="hljs-string">'chat:messages'</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, messages</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                    <span class="hljs-comment">// Check message has been persisted</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                    <span class="hljs-keyword">var</span> message_list = [];</td><tr><td class="linenos" data-pseudo-content="18"></td><td>                    messages.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>                        message_list.push(message);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>                    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>                    expect(message_list[<span class="hljs-number">0</span>]).to.include(<span class="hljs-string">'Message received'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>                    <span class="hljs-comment">// Finish up</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>                    socket.disconnect();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                    done();</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                });</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-comment">// Send the message</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>            socket.emit(<span class="hljs-string">'send'</span>, { message: <span class="hljs-string">'Message received'</span> });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    });</td></table></code></pre>
<p>The main difference here is that we use our Redis client to get the list <code>chat:messages</code>, and check to see if our message appears in it. Now, let’s run our test to ensure it fails:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; babblr@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-built_in">test</span> /Users/matthewdaly/Projects/babblr</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; grunt <span class="hljs-built_in">test</span> --verbose</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Initializing</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Command-line options: --verbose</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Reading <span class="hljs-string">"Gruntfile.js"</span> Gruntfile...OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Registering Gruntfile tasks.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Initializing config...OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Registering <span class="hljs-string">"grunt-contrib-jshint"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Loading <span class="hljs-string">"jshint.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>+ jshint</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>Registering <span class="hljs-string">"grunt-coveralls"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Loading <span class="hljs-string">"coverallsTask.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="24"></td><td>+ coveralls</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>Registering <span class="hljs-string">"grunt-mocha-istanbul"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Loading <span class="hljs-string">"index.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="30"></td><td>+ istanbul_check_coverage, mocha_istanbul</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Loading <span class="hljs-string">"Gruntfile.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="32"></td><td>+ <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>Running tasks: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Running <span class="hljs-string">"test"</span> task</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Running <span class="hljs-string">"jshint"</span> task</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Verifying property jshint.all exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Files: <span class="hljs-built_in">test</span>/test.js, index.js -&gt; all</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Options: force=<span class="hljs-literal">false</span>, reporterOutput=null</td><tr><td class="linenos" data-pseudo-content="44"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="45"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Verifying property mocha_istanbul.coverage exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Files: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>Options: require=[], ui=<span class="hljs-literal">false</span>, globals=[], reporter=<span class="hljs-literal">false</span>, timeout=<span class="hljs-literal">false</span>, coverage=<span class="hljs-literal">false</span>, slow=<span class="hljs-literal">false</span>, grep=<span class="hljs-literal">false</span>, dryRun=<span class="hljs-literal">false</span>, quiet=<span class="hljs-literal">false</span>, recursive=<span class="hljs-literal">false</span>, mask=<span class="hljs-string">"*.js"</span>, root=<span class="hljs-literal">false</span>, <span class="hljs-built_in">print</span>=<span class="hljs-literal">false</span>, noColors=<span class="hljs-literal">false</span>, harmony=<span class="hljs-literal">false</span>, coverageFolder=<span class="hljs-string">"coverage"</span>, reportFormats=[<span class="hljs-string">"cobertura"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"lcovonly"</span>], check={<span class="hljs-string">"statements"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"lines"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"functions"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"branches"</span>:<span class="hljs-literal">false</span>}, excludes=<span class="hljs-literal">false</span>, mochaOptions=<span class="hljs-literal">false</span>, istanbulOptions=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- <span class="hljs-built_in">test</span>/*.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="56"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">484</span>ms)</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="60"></td><td>      <span class="hljs-number">1</span>) should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>  <span class="hljs-number">1</span> passing (<span class="hljs-number">552</span>ms)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td>  <span class="hljs-number">1</span>) server Test sending a message should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span>:</td><tr><td class="linenos" data-pseudo-content="68"></td><td>     Uncaught AssertionError: expected undefined to include <span class="hljs-string">'Message received'</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>      at /Users/matthewdaly/Projects/babblr/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">62</span>:<span class="hljs-number">48</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>      at try_callback (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:<span class="hljs-number">592</span>:<span class="hljs-number">9</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>      at RedisClient.return_reply (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:<span class="hljs-number">685</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>      at HiredisReplyParser.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:<span class="hljs-number">321</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="73"></td><td>      at HiredisReplyParser.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>      at HiredisReplyParser.execute (/Users/matthewdaly/Projects/babblr/node_modules/redis/lib/parser/hiredis.js:<span class="hljs-number">43</span>:<span class="hljs-number">18</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td>      at RedisClient.on_data (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:<span class="hljs-number">547</span>:<span class="hljs-number">27</span>)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>      at Socket.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:<span class="hljs-number">102</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="77"></td><td>      at Socket.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>      at Socket.&lt;anonymous&gt; (_stream_readable.js:<span class="hljs-number">765</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="79"></td><td>      at Socket.emit (events.js:<span class="hljs-number">92</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>      at emitReadable_ (_stream_readable.js:<span class="hljs-number">427</span>:<span class="hljs-number">10</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td>      at emitReadable (_stream_readable.js:<span class="hljs-number">423</span>:<span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="82"></td><td>      at readableAddChunk (_stream_readable.js:<span class="hljs-number">166</span>:<span class="hljs-number">9</span>)</td><tr><td class="linenos" data-pseudo-content="83"></td><td>      at Socket.Readable.push (_stream_readable.js:<span class="hljs-number">128</span>:<span class="hljs-number">10</span>)</td><tr><td class="linenos" data-pseudo-content="84"></td><td>      at TCP.onread (net.js:<span class="hljs-number">529</span>:<span class="hljs-number">21</span>)</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td></td><tr><td class="linenos" data-pseudo-content="88"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="89"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="90"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="91"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="92"></td><td></td><tr><td class="linenos" data-pseudo-content="93"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="94"></td><td>Statements   : <span class="hljs-number">96.97</span>% ( <span class="hljs-number">32</span>/<span class="hljs-number">33</span> ), <span class="hljs-number">5</span> ignored</td><tr><td class="linenos" data-pseudo-content="95"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="96"></td><td>Functions    : <span class="hljs-number">80</span>% ( <span class="hljs-number">4</span>/<span class="hljs-number">5</span> )</td><tr><td class="linenos" data-pseudo-content="97"></td><td>Lines        : <span class="hljs-number">96.97</span>% ( <span class="hljs-number">32</span>/<span class="hljs-number">33</span> )</td><tr><td class="linenos" data-pseudo-content="98"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="99"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="100"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="101"></td><td></td><tr><td class="linenos" data-pseudo-content="102"></td><td>Aborted due to warnings.</td><tr><td class="linenos" data-pseudo-content="103"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td><tr><td class="linenos" data-pseudo-content="104"></td><td>npm ERR! not ok code <span class="hljs-number">0</span></td></table></code></pre>
<p>Our test fails, so now we can start work on implementing the functionality we need. First of all, when a new message is sent, we need to push it to the list. Amend the new message handler in <code>index.js</code> to look like this:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Handle new messages</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    subscribe.subscribe(<span class="hljs-string">'ChatChannel'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    socket.on(<span class="hljs-string">'send'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        client.publish(<span class="hljs-string">'ChatChannel'</span>, data.message);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Persist it to a Redis list</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        client.rpush(<span class="hljs-string">'chat:messages'</span>, <span class="hljs-string">'Anonymous Coward : '</span> + data.message);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>});</td></table></code></pre>
<p>The only significant change is the <code>Persist it to a Redis list</code> section. Here we call the <code>RPUSH</code> command to push the current message to <code>chat:messages</code>. <code>RPUSH</code> pushes a message to the end of the list. There’s a similar command, <code>LPUSH</code>, which pushes an item to the beginning of the list, as well as <code>LPOP</code> and <code>RPOP</code>, which remove and return an item from the beginning and end of the list respectively.</p>
<p>Next we need to handle displaying the list when the main route loads. Replace the index route in <code>index.js</code> with this:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Define index route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get messages</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    client.lrange(<span class="hljs-string">'chat:messages'</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, messages</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment">/* istanbul ignore if */</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-comment">// Get messages</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">var</span> message_list = [];</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            messages.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                <span class="hljs-comment">/* istanbul ignore next */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                message_list.push(message);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            res.render(<span class="hljs-string">'index'</span>, { messages: message_list});</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>});</td></table></code></pre>
<p>Here we use the client to return all messages in the list by using the <code>LRANGE</code> command and defining the slice as being from the start to the end of the list. We then loop through the mesages and push each to a list, before passing that list to the view.</p>
<p>Speaking of which, we also need to update <code>views/index.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-expression">{{&gt; <span class="hljs-variable">header</span> }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"conversation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                        </span><span class="hljs-expression">{{<span class="hljs-begin-block">#<span class="hljs-keyword">each</span> messages</span>}}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">this</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>                        </span><span class="hljs-expression">{{<span class="hljs-end-block">/<span class="hljs-keyword">each</span></span>}}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-4"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"message"</span>&gt;</span>Message<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">textarea</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-control"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"message"</span> <span class="hljs-attribute">rows</span>=<span class="hljs-value">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">textarea</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"submitbutton"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-primary form-control"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td></span><span class="hljs-expression">{{&gt; <span class="hljs-variable">footer</span> }}</span><span class="xml"></span></td></table></code></pre>
<p>This just loops through the messages and prints each one in turn. Now let’s run our tests and make sure they pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; babblr@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-built_in">test</span> /Users/matthewdaly/Projects/babblr</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; grunt <span class="hljs-built_in">test</span> --verbose</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Initializing</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Command-line options: --verbose</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Reading <span class="hljs-string">"Gruntfile.js"</span> Gruntfile...OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Registering Gruntfile tasks.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Initializing config...OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Registering <span class="hljs-string">"grunt-contrib-jshint"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Loading <span class="hljs-string">"jshint.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>+ jshint</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>Registering <span class="hljs-string">"grunt-coveralls"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Loading <span class="hljs-string">"coverallsTask.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="24"></td><td>+ coveralls</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>Registering <span class="hljs-string">"grunt-mocha-istanbul"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Loading <span class="hljs-string">"index.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="30"></td><td>+ istanbul_check_coverage, mocha_istanbul</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Loading <span class="hljs-string">"Gruntfile.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="32"></td><td>+ <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>Running tasks: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Running <span class="hljs-string">"test"</span> task</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Running <span class="hljs-string">"jshint"</span> task</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Verifying property jshint.all exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Files: <span class="hljs-built_in">test</span>/test.js, index.js -&gt; all</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Options: force=<span class="hljs-literal">false</span>, reporterOutput=null</td><tr><td class="linenos" data-pseudo-content="44"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="45"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Verifying property mocha_istanbul.coverage exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Files: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>Options: require=[], ui=<span class="hljs-literal">false</span>, globals=[], reporter=<span class="hljs-literal">false</span>, timeout=<span class="hljs-literal">false</span>, coverage=<span class="hljs-literal">false</span>, slow=<span class="hljs-literal">false</span>, grep=<span class="hljs-literal">false</span>, dryRun=<span class="hljs-literal">false</span>, quiet=<span class="hljs-literal">false</span>, recursive=<span class="hljs-literal">false</span>, mask=<span class="hljs-string">"*.js"</span>, root=<span class="hljs-literal">false</span>, <span class="hljs-built_in">print</span>=<span class="hljs-literal">false</span>, noColors=<span class="hljs-literal">false</span>, harmony=<span class="hljs-literal">false</span>, coverageFolder=<span class="hljs-string">"coverage"</span>, reportFormats=[<span class="hljs-string">"cobertura"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"lcovonly"</span>], check={<span class="hljs-string">"statements"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"lines"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"functions"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"branches"</span>:<span class="hljs-literal">false</span>}, excludes=<span class="hljs-literal">false</span>, mochaOptions=<span class="hljs-literal">false</span>, istanbulOptions=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- <span class="hljs-built_in">test</span>/*.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="56"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">1262</span>ms)</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="60"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">48</span>ms)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>  <span class="hljs-number">2</span> passing (<span class="hljs-number">2</span>s)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="67"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="68"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="69"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="72"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">40</span>/<span class="hljs-number">40</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="73"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">8</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="74"></td><td>Functions    : <span class="hljs-number">85.71</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">7</span> )</td><tr><td class="linenos" data-pseudo-content="75"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">40</span>/<span class="hljs-number">40</span> )</td><tr><td class="linenos" data-pseudo-content="76"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="77"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>Running <span class="hljs-string">"coveralls"</span> task</td><tr><td class="linenos" data-pseudo-content="80"></td><td></td><tr><td class="linenos" data-pseudo-content="81"></td><td>Running <span class="hljs-string">"coveralls:app"</span> (coveralls) task</td><tr><td class="linenos" data-pseudo-content="82"></td><td>Verifying property coveralls.app exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="83"></td><td>Files: coverage/lcov.info</td><tr><td class="linenos" data-pseudo-content="84"></td><td>Options: src=<span class="hljs-string">"coverage/lcov.info"</span>, force=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>Submitting file to coveralls.io: coverage/lcov.info</td><tr><td class="linenos" data-pseudo-content="86"></td><td>&gt;&gt; Failed to submit <span class="hljs-string">'coverage/lcov.info'</span> to coveralls: Bad response: <span class="hljs-number">422</span> {<span class="hljs-string">"message"</span>:<span class="hljs-string">"Couldn't find a repository matching this job."</span>,<span class="hljs-string">"error"</span>:<span class="hljs-literal">true</span>}</td><tr><td class="linenos" data-pseudo-content="87"></td><td>&gt;&gt; Failed to submit coverage results to coveralls</td><tr><td class="linenos" data-pseudo-content="88"></td><td>Warning: Task <span class="hljs-string">"coveralls:app"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="89"></td><td></td><tr><td class="linenos" data-pseudo-content="90"></td><td>Aborted due to warnings.</td><tr><td class="linenos" data-pseudo-content="91"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td><tr><td class="linenos" data-pseudo-content="92"></td><td>npm ERR! not ok code <span class="hljs-number">0</span></td></table></code></pre>
<p>As before, don’t worry about Coveralls not working - it’s only an issue when it runs on Travis CI. If everything else is fine, our chat server should now persist our changes.</p>
<h2 id="sessions-and-user-login">Sessions and user login</h2>
<p>At present, it’s hard to carry on a conversation with someone using this site because you can’t see who is responding to you. We need to implement a mechanism to obtain a username for each user, store it in a session, and then use it to identify all of a user’s messages. In this case, we’re going to just prompt the user to enter a username of their choice, but if you wish, you can use something like <a href="http://passportjs.org/">Passport.js</a> to allow authentication using third-party services - I’ll leave that as an exercise for the reader.</p>
<p>Now, Express doesn’t include any support for sessions out of the box, so we have to install some additional libraries:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install connect-redis express-session body-parser --save</table></code></pre>
<p>The <code>express-session</code> library is middleware for Express that allows for storing and retrieving session variables, while <code>connect-redis</code> allows it to use Redis to store this data. We used <code>body-parser</code> for the URL shortener to process <code>POST</code> data, so we will use it again here. Now, we need to set it up. Replace the part of <code>index.js</code> before we set up the templating with this:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Declare variables used</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> app, base_url, client, express, hbs, io, port, RedisStore, rtg, session, subscribe;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Define values</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>app = express();</td><tr><td class="linenos" data-pseudo-content="10"></td><td>port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>session = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express-session'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>RedisStore = <span class="hljs-built_in">require</span>(<span class="hljs-string">'connect-redis'</span>)(session);</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-comment">/* istanbul ignore if */</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-keyword">if</span> (process.env.REDISTOGO_URL) {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    rtg  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>).parse(process.env.REDISTOGO_URL);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    client.auth(rtg.auth.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    subscribe.auth(rtg.auth.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>}</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-comment">// Set up session</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>app.use(session({</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    store: <span class="hljs-keyword">new</span> RedisStore({</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        client: client</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }),</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    secret: <span class="hljs-string">'blibble'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>}));</td></table></code></pre>
<p>This just sets up the session and configures it to use Redis as the back end. Don’t forget to change the value of <code>secret</code>.</p>
<p>Now, let’s plan out how our username system is going to work. If a user visits the site and there is no session set, then they should be redirected to a new route, <code>/login</code>. Here they will be prompted to enter a username. Once a satisfactory username (eg one or more characters) has been submitted via the form, it should be stored in the session and the user redirected to the index. There should also be a <code>/logout</code> route to destroy the session and redirect the user back to the login form.</p>
<p>First, let’s implement a test for fetching the login form in <code>test/test.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test submitting to the login route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test submitting to the login route'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">'should store the username in the session and redirect the user to the index'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            request.post({ url: <span class="hljs-string">'http://localhost:5000/login'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                form:{username: <span class="hljs-string">'bobsmith'</span>},</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                followRedirect: <span class="hljs-literal">false</span>},</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                    expect(response.headers.location).to.equal(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    expect(response.statusCode).to.equal(<span class="hljs-number">302</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    done();</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    });</td></table></code></pre>
<p>This test sends a <code>POST</code> request containing the field <code>username</code> with the value <code>bobsmith</code>. We expect to be redirected to the index route.</p>
<p>Let’s run the test to make sure it fails:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; babblr@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-built_in">test</span> /Users/matthewdaly/Projects/babblr</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; grunt <span class="hljs-built_in">test</span> --verbose</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Initializing</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Command-line options: --verbose</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Reading <span class="hljs-string">"Gruntfile.js"</span> Gruntfile...OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Registering Gruntfile tasks.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Initializing config...OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Registering <span class="hljs-string">"grunt-contrib-jshint"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Loading <span class="hljs-string">"jshint.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>+ jshint</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>Registering <span class="hljs-string">"grunt-coveralls"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Loading <span class="hljs-string">"coverallsTask.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="24"></td><td>+ coveralls</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>Registering <span class="hljs-string">"grunt-mocha-istanbul"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Loading <span class="hljs-string">"index.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="30"></td><td>+ istanbul_check_coverage, mocha_istanbul</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Loading <span class="hljs-string">"Gruntfile.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="32"></td><td>+ <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>Running tasks: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Running <span class="hljs-string">"test"</span> task</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Running <span class="hljs-string">"jshint"</span> task</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Verifying property jshint.all exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Files: <span class="hljs-built_in">test</span>/test.js, index.js -&gt; all</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Options: force=<span class="hljs-literal">false</span>, reporterOutput=null</td><tr><td class="linenos" data-pseudo-content="44"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="45"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Verifying property mocha_istanbul.coverage exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Files: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>Options: require=[], ui=<span class="hljs-literal">false</span>, globals=[], reporter=<span class="hljs-literal">false</span>, timeout=<span class="hljs-literal">false</span>, coverage=<span class="hljs-literal">false</span>, slow=<span class="hljs-literal">false</span>, grep=<span class="hljs-literal">false</span>, dryRun=<span class="hljs-literal">false</span>, quiet=<span class="hljs-literal">false</span>, recursive=<span class="hljs-literal">false</span>, mask=<span class="hljs-string">"*.js"</span>, root=<span class="hljs-literal">false</span>, <span class="hljs-built_in">print</span>=<span class="hljs-literal">false</span>, noColors=<span class="hljs-literal">false</span>, harmony=<span class="hljs-literal">false</span>, coverageFolder=<span class="hljs-string">"coverage"</span>, reportFormats=[<span class="hljs-string">"cobertura"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"lcovonly"</span>], check={<span class="hljs-string">"statements"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"lines"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"functions"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"branches"</span>:<span class="hljs-literal">false</span>}, excludes=<span class="hljs-literal">false</span>, mochaOptions=<span class="hljs-literal">false</span>, istanbulOptions=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- <span class="hljs-built_in">test</span>/*.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>express-session deprecated undefined resave option; provide resave option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1585</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1585</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="58"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="60"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">45</span>ms)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    Test the login route</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the text Please enter a handle</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    Test submitting to the login route</td><tr><td class="linenos" data-pseudo-content="64"></td><td>      <span class="hljs-number">1</span>) should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="66"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">42</span>ms)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td>  <span class="hljs-number">3</span> passing (<span class="hljs-number">122</span>ms)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>  <span class="hljs-number">1</span>) server Test submitting to the login route should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index:</td><tr><td class="linenos" data-pseudo-content="74"></td><td>     Uncaught AssertionError: expected undefined to equal <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>      at Request._callback (/Users/matthewdaly/Projects/babblr/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">61</span>:<span class="hljs-number">58</span>)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>      at Request.self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">373</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="77"></td><td>      at Request.emit (events.js:<span class="hljs-number">98</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">1318</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="79"></td><td>      at Request.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">1266</span>:<span class="hljs-number">12</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td>      at IncomingMessage.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="82"></td><td>      at _stream_readable.js:<span class="hljs-number">944</span>:<span class="hljs-number">16</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">442</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="84"></td><td></td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="88"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="89"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="90"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="91"></td><td></td><tr><td class="linenos" data-pseudo-content="92"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="93"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">45</span>/<span class="hljs-number">45</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="94"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">8</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="95"></td><td>Functions    : <span class="hljs-number">87.5</span>% ( <span class="hljs-number">7</span>/<span class="hljs-number">8</span> )</td><tr><td class="linenos" data-pseudo-content="96"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">45</span>/<span class="hljs-number">45</span> )</td><tr><td class="linenos" data-pseudo-content="97"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="98"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="99"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="100"></td><td></td><tr><td class="linenos" data-pseudo-content="101"></td><td>Aborted due to warnings.</td><tr><td class="linenos" data-pseudo-content="102"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td><tr><td class="linenos" data-pseudo-content="103"></td><td>npm ERR! not ok code <span class="hljs-number">0</span></td></table></code></pre>
<p>Now, all we need to do to make this test pass is create a view containing the form and define a route to display it. First, we’ll define our new route in <code>index.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Define login route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/login'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Render view</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    res.render(<span class="hljs-string">'login'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>});</td></table></code></pre>
<p>Next, we’ll create our new template at <code>views/login.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-expression">{{&gt; <span class="hljs-variable">header</span> }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"/login"</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">"POST"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"Username"</span>&gt;</span>Please enter a handle<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-control"</span> <span class="hljs-attribute">size</span>=<span class="hljs-value">"20"</span> <span class="hljs-attribute">required</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"username"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"username"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-primary form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span><span class="hljs-expression">{{&gt; <span class="hljs-variable">footer</span> }}</span><span class="xml"></span></td></table></code></pre>
<p>Let’s run our tests and make sure they pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; babblr@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-built_in">test</span> /Users/matthewdaly/Projects/babblr</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; grunt <span class="hljs-built_in">test</span> --verbose</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Initializing</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Command-line options: --verbose</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Reading <span class="hljs-string">"Gruntfile.js"</span> Gruntfile...OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Registering Gruntfile tasks.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Initializing config...OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Registering <span class="hljs-string">"grunt-contrib-jshint"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Loading <span class="hljs-string">"jshint.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>+ jshint</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>Registering <span class="hljs-string">"grunt-coveralls"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Loading <span class="hljs-string">"coverallsTask.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="24"></td><td>+ coveralls</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>Registering <span class="hljs-string">"grunt-mocha-istanbul"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Loading <span class="hljs-string">"index.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="30"></td><td>+ istanbul_check_coverage, mocha_istanbul</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Loading <span class="hljs-string">"Gruntfile.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="32"></td><td>+ <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>Running tasks: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Running <span class="hljs-string">"test"</span> task</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Running <span class="hljs-string">"jshint"</span> task</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Verifying property jshint.all exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Files: <span class="hljs-built_in">test</span>/test.js, index.js -&gt; all</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Options: force=<span class="hljs-literal">false</span>, reporterOutput=null</td><tr><td class="linenos" data-pseudo-content="44"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="45"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Verifying property mocha_istanbul.coverage exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Files: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>Options: require=[], ui=<span class="hljs-literal">false</span>, globals=[], reporter=<span class="hljs-literal">false</span>, timeout=<span class="hljs-literal">false</span>, coverage=<span class="hljs-literal">false</span>, slow=<span class="hljs-literal">false</span>, grep=<span class="hljs-literal">false</span>, dryRun=<span class="hljs-literal">false</span>, quiet=<span class="hljs-literal">false</span>, recursive=<span class="hljs-literal">false</span>, mask=<span class="hljs-string">"*.js"</span>, root=<span class="hljs-literal">false</span>, <span class="hljs-built_in">print</span>=<span class="hljs-literal">false</span>, noColors=<span class="hljs-literal">false</span>, harmony=<span class="hljs-literal">false</span>, coverageFolder=<span class="hljs-string">"coverage"</span>, reportFormats=[<span class="hljs-string">"cobertura"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"lcovonly"</span>], check={<span class="hljs-string">"statements"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"lines"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"functions"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"branches"</span>:<span class="hljs-literal">false</span>}, excludes=<span class="hljs-literal">false</span>, mochaOptions=<span class="hljs-literal">false</span>, istanbulOptions=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- <span class="hljs-built_in">test</span>/*.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>express-session deprecated undefined resave option; provide resave option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1585</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1585</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="58"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="60"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">64</span>ms)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    Test the login route</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the text Please enter a handle</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="64"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">78</span>ms)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>  <span class="hljs-number">3</span> passing (<span class="hljs-number">179</span>ms)</td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="71"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="72"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="73"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="76"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">45</span>/<span class="hljs-number">45</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="77"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">8</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="78"></td><td>Functions    : <span class="hljs-number">87.5</span>% ( <span class="hljs-number">7</span>/<span class="hljs-number">8</span> )</td><tr><td class="linenos" data-pseudo-content="79"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">45</span>/<span class="hljs-number">45</span> )</td><tr><td class="linenos" data-pseudo-content="80"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="81"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>Running <span class="hljs-string">"coveralls"</span> task</td><tr><td class="linenos" data-pseudo-content="84"></td><td></td><tr><td class="linenos" data-pseudo-content="85"></td><td>Running <span class="hljs-string">"coveralls:app"</span> (coveralls) task</td><tr><td class="linenos" data-pseudo-content="86"></td><td>Verifying property coveralls.app exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="87"></td><td>Files: coverage/lcov.info</td><tr><td class="linenos" data-pseudo-content="88"></td><td>Options: src=<span class="hljs-string">"coverage/lcov.info"</span>, force=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>Submitting file to coveralls.io: coverage/lcov.info</td><tr><td class="linenos" data-pseudo-content="90"></td><td>&gt;&gt; Failed to submit <span class="hljs-string">'coverage/lcov.info'</span> to coveralls: Bad response: <span class="hljs-number">422</span> {<span class="hljs-string">"message"</span>:<span class="hljs-string">"Couldn't find a repository matching this job."</span>,<span class="hljs-string">"error"</span>:<span class="hljs-literal">true</span>}</td><tr><td class="linenos" data-pseudo-content="91"></td><td>&gt;&gt; Failed to submit coverage results to coveralls</td><tr><td class="linenos" data-pseudo-content="92"></td><td>Warning: Task <span class="hljs-string">"coveralls:app"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="93"></td><td></td><tr><td class="linenos" data-pseudo-content="94"></td><td>Aborted due to warnings.</td><tr><td class="linenos" data-pseudo-content="95"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td><tr><td class="linenos" data-pseudo-content="96"></td><td>npm ERR! not ok code <span class="hljs-number">0</span></td></table></code></pre>
<p>Next, we need to process the submitted form, set the session, and redirect the user back to the index. First, let’s add another test:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test submitting to the login route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test submitting to the login route'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">'should store the username in the session and redirect the user to the index'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            request.post({ url: <span class="hljs-string">'http://localhost:5000/login'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                form:{username: <span class="hljs-string">'bobsmith'</span>},</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                followRedirect: <span class="hljs-literal">false</span>},</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                    expect(response.headers.location).to.equal(<span class="hljs-string">'http://localhost:5000'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    expect(response.statusCode).to.equal(<span class="hljs-number">301</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    done();</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    });</td></table></code></pre>
<p>This test submits the username, and makes sure that the response received is a 301 redirect to the index route. Let’s check to make sure it fails:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; babblr@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-built_in">test</span> /Users/matthewdaly/Projects/babblr</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; grunt <span class="hljs-built_in">test</span> --verbose</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Initializing</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Command-line options: --verbose</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Reading <span class="hljs-string">"Gruntfile.js"</span> Gruntfile...OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Registering Gruntfile tasks.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Initializing config...OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Registering <span class="hljs-string">"grunt-contrib-jshint"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Loading <span class="hljs-string">"jshint.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>+ jshint</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>Registering <span class="hljs-string">"grunt-coveralls"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Loading <span class="hljs-string">"coverallsTask.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="24"></td><td>+ coveralls</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>Registering <span class="hljs-string">"grunt-mocha-istanbul"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Loading <span class="hljs-string">"index.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="30"></td><td>+ istanbul_check_coverage, mocha_istanbul</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Loading <span class="hljs-string">"Gruntfile.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="32"></td><td>+ <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>Running tasks: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Running <span class="hljs-string">"test"</span> task</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Running <span class="hljs-string">"jshint"</span> task</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Verifying property jshint.all exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Files: <span class="hljs-built_in">test</span>/test.js, index.js -&gt; all</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Options: force=<span class="hljs-literal">false</span>, reporterOutput=null</td><tr><td class="linenos" data-pseudo-content="44"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="45"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Verifying property mocha_istanbul.coverage exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Files: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>Options: require=[], ui=<span class="hljs-literal">false</span>, globals=[], reporter=<span class="hljs-literal">false</span>, timeout=<span class="hljs-literal">false</span>, coverage=<span class="hljs-literal">false</span>, slow=<span class="hljs-literal">false</span>, grep=<span class="hljs-literal">false</span>, dryRun=<span class="hljs-literal">false</span>, quiet=<span class="hljs-literal">false</span>, recursive=<span class="hljs-literal">false</span>, mask=<span class="hljs-string">"*.js"</span>, root=<span class="hljs-literal">false</span>, <span class="hljs-built_in">print</span>=<span class="hljs-literal">false</span>, noColors=<span class="hljs-literal">false</span>, harmony=<span class="hljs-literal">false</span>, coverageFolder=<span class="hljs-string">"coverage"</span>, reportFormats=[<span class="hljs-string">"cobertura"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"lcovonly"</span>], check={<span class="hljs-string">"statements"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"lines"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"functions"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"branches"</span>:<span class="hljs-literal">false</span>}, excludes=<span class="hljs-literal">false</span>, mochaOptions=<span class="hljs-literal">false</span>, istanbulOptions=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- <span class="hljs-built_in">test</span>/*.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>express-session deprecated undefined resave option; provide resave option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1585</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1585</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="58"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="60"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">476</span>ms)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    Test the login route</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the text Please enter a handle</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    Test submitting to the login route</td><tr><td class="linenos" data-pseudo-content="64"></td><td>      <span class="hljs-number">1</span>) should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="66"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">42</span>ms)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td>  <span class="hljs-number">3</span> passing (<span class="hljs-number">557</span>ms)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>  <span class="hljs-number">1</span>) server Test submitting to the login route should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index:</td><tr><td class="linenos" data-pseudo-content="74"></td><td>     Uncaught AssertionError: expected undefined to equal <span class="hljs-string">'http://localhost:5000'</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>      at Request._callback (/Users/matthewdaly/Projects/babblr/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">61</span>:<span class="hljs-number">58</span>)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>      at Request.self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">373</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="77"></td><td>      at Request.emit (events.js:<span class="hljs-number">98</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">1318</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="79"></td><td>      at Request.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">1266</span>:<span class="hljs-number">12</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td>      at IncomingMessage.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="82"></td><td>      at _stream_readable.js:<span class="hljs-number">944</span>:<span class="hljs-number">16</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">442</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="84"></td><td></td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="88"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="89"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="90"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="91"></td><td></td><tr><td class="linenos" data-pseudo-content="92"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="93"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">45</span>/<span class="hljs-number">45</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="94"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">8</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="95"></td><td>Functions    : <span class="hljs-number">87.5</span>% ( <span class="hljs-number">7</span>/<span class="hljs-number">8</span> )</td><tr><td class="linenos" data-pseudo-content="96"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">45</span>/<span class="hljs-number">45</span> )</td><tr><td class="linenos" data-pseudo-content="97"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="98"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="99"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="100"></td><td></td><tr><td class="linenos" data-pseudo-content="101"></td><td>Aborted due to warnings.</td><tr><td class="linenos" data-pseudo-content="102"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td><tr><td class="linenos" data-pseudo-content="103"></td><td>npm ERR! not ok code <span class="hljs-number">0</span></td></table></code></pre>
<p>Now, in order to process <code>POST</code> data we’ll need to use <code>body-parser</code>. Amend the top of <code>index.js</code> to look like this::</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Declare variables used</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> app, base_url, bodyParser, client, express, hbs, io, port, RedisStore, rtg, session, subscribe;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Define values</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>app = express();</td><tr><td class="linenos" data-pseudo-content="10"></td><td>bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>session = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express-session'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>RedisStore = <span class="hljs-built_in">require</span>(<span class="hljs-string">'connect-redis'</span>)(session);</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-comment">/* istanbul ignore if */</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">if</span> (process.env.REDISTOGO_URL) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    rtg  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>).parse(process.env.REDISTOGO_URL);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    client.auth(rtg.auth.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    subscribe.auth(rtg.auth.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-comment">// Set up session</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>app.use(session({</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    store: <span class="hljs-keyword">new</span> RedisStore({</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        client: client</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }),</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    secret: <span class="hljs-string">'blibble'</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>}));</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td><span class="hljs-comment">// Handle POST data</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>app.use(bodyParser.json());</td><tr><td class="linenos" data-pseudo-content="51"></td><td>app.use(bodyParser.urlencoded({</td><tr><td class="linenos" data-pseudo-content="52"></td><td>      extended: <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>}));</td></table></code></pre>
<p>Next, we define a <code>POST</code> route to handle the username input:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Process login</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.post(<span class="hljs-string">'/login'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get username</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">var</span> username = req.body.username;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// If username length is zero, reload the page</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">if</span> (username.length === <span class="hljs-number">0</span>) {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        res.render(<span class="hljs-string">'login'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-comment">// Store username in session and redirect to index</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        req.session.username = username;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        res.redirect(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>});</td></table></code></pre>
<p>This should be fairly straightforward. This route accepts a username parameter. If this parameter is not present, the user will see the login form again. Otherwise, they are redirected back to the index.</p>
<p>Now, if you check <code>coverage/index.html</code> after running the tests again, you’ll notice that there’s a gap in our coverage for the scenario when a user submits an empty username. Let’s fix that - add the following test to <code>test/test.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test empty login</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test empty login'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">'should show the login form'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            request.post({ url: <span class="hljs-string">'http://localhost:5000/login'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                form:{username: <span class="hljs-string">''</span>},</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                followRedirect: <span class="hljs-literal">false</span>},</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                    expect(response.statusCode).to.equal(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    expect(body).to.include(<span class="hljs-string">'Please enter a handle'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    done();</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    });</td></table></code></pre>
<p>Let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; babblr@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> <span class="hljs-built_in">test</span> /Users/matthewdaly/Projects/babblr</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; grunt <span class="hljs-built_in">test</span> --verbose</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Initializing</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Command-line options: --verbose</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Reading <span class="hljs-string">"Gruntfile.js"</span> Gruntfile...OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Registering Gruntfile tasks.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Initializing config...OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Registering <span class="hljs-string">"grunt-contrib-jshint"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Loading <span class="hljs-string">"jshint.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>+ jshint</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>Registering <span class="hljs-string">"grunt-coveralls"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Loading <span class="hljs-string">"coverallsTask.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="24"></td><td>+ coveralls</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>Registering <span class="hljs-string">"grunt-mocha-istanbul"</span> <span class="hljs-built_in">local</span> Npm module tasks.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Loading <span class="hljs-string">"index.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="30"></td><td>+ istanbul_check_coverage, mocha_istanbul</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Loading <span class="hljs-string">"Gruntfile.js"</span> tasks...OK</td><tr><td class="linenos" data-pseudo-content="32"></td><td>+ <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>Running tasks: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Running <span class="hljs-string">"test"</span> task</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Running <span class="hljs-string">"jshint"</span> task</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Verifying property jshint.all exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Files: <span class="hljs-built_in">test</span>/test.js, index.js -&gt; all</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Options: force=<span class="hljs-literal">false</span>, reporterOutput=null</td><tr><td class="linenos" data-pseudo-content="44"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="45"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Verifying property mocha_istanbul.coverage exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Files: <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>Options: require=[], ui=<span class="hljs-literal">false</span>, globals=[], reporter=<span class="hljs-literal">false</span>, timeout=<span class="hljs-literal">false</span>, coverage=<span class="hljs-literal">false</span>, slow=<span class="hljs-literal">false</span>, grep=<span class="hljs-literal">false</span>, dryRun=<span class="hljs-literal">false</span>, quiet=<span class="hljs-literal">false</span>, recursive=<span class="hljs-literal">false</span>, mask=<span class="hljs-string">"*.js"</span>, root=<span class="hljs-literal">false</span>, <span class="hljs-built_in">print</span>=<span class="hljs-literal">false</span>, noColors=<span class="hljs-literal">false</span>, harmony=<span class="hljs-literal">false</span>, coverageFolder=<span class="hljs-string">"coverage"</span>, reportFormats=[<span class="hljs-string">"cobertura"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"lcovonly"</span>], check={<span class="hljs-string">"statements"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"lines"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"functions"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"branches"</span>:<span class="hljs-literal">false</span>}, excludes=<span class="hljs-literal">false</span>, mochaOptions=<span class="hljs-literal">false</span>, istanbulOptions=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- <span class="hljs-built_in">test</span>/*.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>express-session deprecated undefined resave option; provide resave option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1669</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1669</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="58"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="60"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">44</span>ms)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    Test the login route</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the text Please enter a handle</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    Test submitting to the login route</td><tr><td class="linenos" data-pseudo-content="64"></td><td>      ✓ should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    Test empty login</td><tr><td class="linenos" data-pseudo-content="66"></td><td>      ✓ should show the login form</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="68"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">41</span>ms)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>  <span class="hljs-number">5</span> passing (<span class="hljs-number">145</span>ms)</td><tr><td class="linenos" data-pseudo-content="73"></td><td></td><tr><td class="linenos" data-pseudo-content="74"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="75"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="76"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="77"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="80"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">54</span>/<span class="hljs-number">54</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="81"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">10</span>/<span class="hljs-number">10</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="82"></td><td>Functions    : <span class="hljs-number">88.89</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">9</span> )</td><tr><td class="linenos" data-pseudo-content="83"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">54</span>/<span class="hljs-number">54</span> )</td><tr><td class="linenos" data-pseudo-content="84"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="85"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>Running <span class="hljs-string">"coveralls"</span> task</td><tr><td class="linenos" data-pseudo-content="88"></td><td></td><tr><td class="linenos" data-pseudo-content="89"></td><td>Running <span class="hljs-string">"coveralls:app"</span> (coveralls) task</td><tr><td class="linenos" data-pseudo-content="90"></td><td>Verifying property coveralls.app exists <span class="hljs-keyword">in</span> config...OK</td><tr><td class="linenos" data-pseudo-content="91"></td><td>Files: coverage/lcov.info</td><tr><td class="linenos" data-pseudo-content="92"></td><td>Options: src=<span class="hljs-string">"coverage/lcov.info"</span>, force=<span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>Submitting file to coveralls.io: coverage/lcov.info</td><tr><td class="linenos" data-pseudo-content="94"></td><td>&gt;&gt; Failed to submit <span class="hljs-string">'coverage/lcov.info'</span> to coveralls: Bad response: <span class="hljs-number">422</span> {<span class="hljs-string">"message"</span>:<span class="hljs-string">"Couldn't find a repository matching this job."</span>,<span class="hljs-string">"error"</span>:<span class="hljs-literal">true</span>}</td><tr><td class="linenos" data-pseudo-content="95"></td><td>&gt;&gt; Failed to submit coverage results to coveralls</td><tr><td class="linenos" data-pseudo-content="96"></td><td>Warning: Task <span class="hljs-string">"coveralls:app"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="97"></td><td></td><tr><td class="linenos" data-pseudo-content="98"></td><td>Aborted due to warnings.</td><tr><td class="linenos" data-pseudo-content="99"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td><tr><td class="linenos" data-pseudo-content="100"></td><td>npm ERR! not ok code <span class="hljs-number">0</span></td></table></code></pre>
<p>Our test now passes (bar, of course, Coveralls failing). Our next step is to actually do something with the session. Now, the <code>request</code> module we use in our test requires a third-party module called <code>tough-cookie</code> to work with cookies, so we need to install that:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install tough-cookie --save-dev</table></code></pre>
<p>Next, amend the login test as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test submitting to the login route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test submitting to the login route'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">'should store the username in the session and redirect the user to the index'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            request.post({ url: <span class="hljs-string">'http://localhost:5000/login'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                form:{username: <span class="hljs-string">'bobsmith'</span>},</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                jar: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                followRedirect: <span class="hljs-literal">false</span>},</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    expect(response.headers.location).to.equal(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    expect(response.statusCode).to.equal(<span class="hljs-number">302</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                    <span class="hljs-comment">// Check the username</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                    request.get({ url: <span class="hljs-string">'http://localhost:5000/'</span>, jar: <span class="hljs-literal">true</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                        expect(body).to.include(<span class="hljs-string">'bobsmith'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                        done();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    });</td></table></code></pre>
<p>Here we’re using a new parameter, namely <code>jar</code> - this tells <code>request</code> to store the cookies. We POST the username to the login form, and then we get the index route and verify that the username is shown in the request. Check the test fails, then amend the index route in <code>index.js</code> as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Define index route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get messages</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    client.lrange(<span class="hljs-string">'chat:messages'</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, messages</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment">/* istanbul ignore if */</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-comment">// Get username</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">var</span> username = req.session.username;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-comment">// Get messages</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-keyword">var</span> message_list = [];</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            messages.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                <span class="hljs-comment">/* istanbul ignore next */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>                message_list.push(message);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            res.render(<span class="hljs-string">'index'</span>, { messages: message_list, username: username });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="23"></td><td>});</td></table></code></pre>
<p>Note we get the username and pass it through to the view. We need to adapt the header view to display the username. Amend <code>views/partials/header.hbs</code> to look like this:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Babblr<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/bower_components/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/bower_components/bootstrap/dist/css/bootstrap-theme.min.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/css/style.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">nav</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-inverse navbar-static-top"</span> <span class="hljs-attribute">role</span>=<span class="hljs-value">"navigation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-toggle"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/"</span>&gt;</span>Babblr<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"collapse navbar-collapse navbar-right"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav navbar-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>                            </span><span class="hljs-expression">{{<span class="hljs-begin-block">#<span class="hljs-keyword">if</span> username</span>}}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="35"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/logout"</span>&gt;</span>Logged in as </span><span class="hljs-expression">{{ <span class="hljs-variable">username</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>                            </span><span class="hljs-expression">{{<span class="hljs-variable"><span class="hljs-keyword">else</span></span>}}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/login"</span>&gt;</span>Log in<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>                            </span><span class="hljs-expression">{{<span class="hljs-end-block">/<span class="hljs-keyword">if</span></span>}}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="39"></td><td>                        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-title">nav</span>&gt;</span></span></td></table></code></pre>
<p>Note the addition of a logout link, which we will implement later. Let’s check our tests pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>express-session deprecated undefined resave option; provide resave option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1669</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1669</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">44</span>ms)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    Test the login route</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the text Please enter a handle</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Test submitting to the login route</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      ✓ should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    Test empty login</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      ✓ should show the login form</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">45</span>ms)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>  <span class="hljs-number">5</span> passing (<span class="hljs-number">156</span>ms)</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="31"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">55</span>/<span class="hljs-number">55</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="35"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">10</span>/<span class="hljs-number">10</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="36"></td><td>Functions    : <span class="hljs-number">88.89</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">9</span> )</td><tr><td class="linenos" data-pseudo-content="37"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">55</span>/<span class="hljs-number">55</span> )</td><tr><td class="linenos" data-pseudo-content="38"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="39"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>Running <span class="hljs-string">"coveralls:app"</span> (coveralls) task</td><tr><td class="linenos" data-pseudo-content="42"></td><td>&gt;&gt; Failed to submit <span class="hljs-string">'coverage/lcov.info'</span> to coveralls: Bad response: <span class="hljs-number">422</span> {<span class="hljs-string">"message"</span>:<span class="hljs-string">"Couldn't find a repository matching this job."</span>,<span class="hljs-string">"error"</span>:<span class="hljs-literal">true</span>}</td><tr><td class="linenos" data-pseudo-content="43"></td><td>&gt;&gt; Failed to submit coverage results to coveralls</td><tr><td class="linenos" data-pseudo-content="44"></td><td>Warning: Task <span class="hljs-string">"coveralls:app"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>Excellent! Next, let’s implement the test for our logout route:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test logout</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test logout'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">'should log the user out'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            request.post({ url: <span class="hljs-string">'http://localhost:5000/login'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                form:{username: <span class="hljs-string">'bobsmith'</span>},</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                jar: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                followRedirect: <span class="hljs-literal">false</span>},</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    expect(response.headers.location).to.equal(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    expect(response.statusCode).to.equal(<span class="hljs-number">302</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                    <span class="hljs-comment">// Check the username</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                    request.get({ url: <span class="hljs-string">'http://localhost:5000/'</span>, jar: <span class="hljs-literal">true</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                        expect(body).to.include(<span class="hljs-string">'bobsmith'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>                        <span class="hljs-comment">// Log the user out</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                        request.get({ url: <span class="hljs-string">'http://localhost:5000/logout'</span>, jar: <span class="hljs-literal">true</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>                            expect(body).to.include(<span class="hljs-string">'Log in'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>                            done();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>                            });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>                    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    });</td></table></code></pre>
<p>This is largely the same as the previous test, but adds some additional content at the end to test logging out afterwards. Let’s run the test:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>express-session deprecated undefined resave option; provide resave option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1669</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:<span class="hljs-number">9</span>:<span class="hljs-number">1669</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">536</span>ms)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    Test the login route</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the text Please enter a handle</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Test submitting to the login route</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      ✓ should store the username <span class="hljs-keyword">in</span> the session and redirect the user to the index</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    Test empty login</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      ✓ should show the login form</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    Test <span class="hljs-built_in">logout</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>      <span class="hljs-number">1</span>) should <span class="hljs-built_in">log</span> the user out</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">49</span>ms)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>  <span class="hljs-number">5</span> passing (<span class="hljs-number">682</span>ms)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>  <span class="hljs-number">1</span>) server Test <span class="hljs-built_in">logout</span> should <span class="hljs-built_in">log</span> the user out:</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     Uncaught AssertionError: expected <span class="hljs-string">'Cannot GET /logout\n'</span> to include <span class="hljs-string">'Log in'</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at Request._callback (/Users/matthewdaly/Projects/babblr/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">105</span>:<span class="hljs-number">45</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      at Request.self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">373</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at Request.emit (events.js:<span class="hljs-number">98</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">1318</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>      at Request.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">1266</span>:<span class="hljs-number">12</span>)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>      at IncomingMessage.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      at _stream_readable.js:<span class="hljs-number">944</span>:<span class="hljs-number">16</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">442</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="46"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="48"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="49"></td><td></td><tr><td class="linenos" data-pseudo-content="50"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="51"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">55</span>/<span class="hljs-number">55</span> ), <span class="hljs-number">7</span> ignored</td><tr><td class="linenos" data-pseudo-content="52"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">10</span>/<span class="hljs-number">10</span> ), <span class="hljs-number">2</span> ignored</td><tr><td class="linenos" data-pseudo-content="53"></td><td>Functions    : <span class="hljs-number">88.89</span>% ( <span class="hljs-number">8</span>/<span class="hljs-number">9</span> )</td><tr><td class="linenos" data-pseudo-content="54"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">55</span>/<span class="hljs-number">55</span> )</td><tr><td class="linenos" data-pseudo-content="55"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="56"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>Now we have a failing test, let’s implement our logout route. Add the following route to <code>index.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Process logout</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/logout'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Delete username from session</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    req.session.username = <span class="hljs-literal">null</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Redirect user</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    res.redirect(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>});</td></table></code></pre>
<p>If you run your tests again, they should now pass.</p>
<p>Now that we have the user’s name stored in the session, we can make use of it. First, let’s amend <code>static/js/main.js</code> so that it no longer adds a default username:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">var</span> field, socket, output;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">// Get a reference to the input</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    field = $(<span class="hljs-string">'textarea#message'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Get a reference to the output</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    output = $(<span class="hljs-string">'div.conversation'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment">// Handle message submit</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    $(<span class="hljs-string">'a#submitbutton'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create the message</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">var</span> msg;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        msg = field.val();</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        socket.emit(<span class="hljs-string">'send'</span>, { message: msg });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        field.val(<span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        output.append(<span class="hljs-string">'&lt;p&gt;'</span> + data + <span class="hljs-string">'&lt;/p&gt;'</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td></table></code></pre>
<p>Then, in <code>index.js</code>, we need to declare a variable for our session middleware, which will be shared between Socket.IO and Express:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Declare variables used</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> app, base_url, bodyParser, client, express, hbs, io, port, RedisStore, rtg, session, sessionMiddleware, subscribe;</td></table></code></pre>
<p>Then we amend the session setup to make it easier to reuse for Socket.IO:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Set up session</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>sessionMiddleware = session({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    store: <span class="hljs-keyword">new</span> RedisStore({</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        client: client</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }),</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    secret: <span class="hljs-string">'blibble'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>});</td><tr><td class="linenos" data-pseudo-content="8"></td><td>app.use(sessionMiddleware);</td></table></code></pre>
<p>Towards the end of the file, before we set up our handlers for Socket.IO, we integrate our sessions:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Integrate sessions</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>io.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket, next</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    sessionMiddleware(socket.request, socket.request.res, next);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>});</td></table></code></pre>
<p>Finally, we rewrite our session handlers to use the username from the session:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Handle new messages</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    subscribe.subscribe(<span class="hljs-string">'ChatChannel'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    socket.on(<span class="hljs-string">'send'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Define variables</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">var</span> username, message;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Get username</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        username = socket.request.session.username;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">if</span> (!username) {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            username = <span class="hljs-string">'Anonymous Coward'</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        message = username + <span class="hljs-string">': '</span> + data.message;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        client.publish(<span class="hljs-string">'ChatChannel'</span>, message);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Persist it to a Redis list</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        client.rpush(<span class="hljs-string">'chat:messages'</span>, message);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="35"></td><td>});</td></table></code></pre>
<p>Note here that when a message is sent, we get the username from the session, and if it’s empty, set it to Anonymous Coward. We then prepend it to the message, publish it, and persist it.</p>
<h2 id="one-final-thing-">One final thing…</h2>
<p>One last job remains. At present, users can pass JavaScript through in messages, which is not terribly secure! We need to fix it. Amend the <code>send</code> handler as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    socket.on(<span class="hljs-string">'send'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Define variables</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">var</span> username, message;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Strip tags from message</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        message = data.message.replace(<span class="hljs-regexp">/&lt;[^&gt;]*&gt;/g</span>, <span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Get username</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        username = socket.request.session.username;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">if</span> (!username) {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            username = <span class="hljs-string">'Anonymous Coward'</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        message = username + <span class="hljs-string">': '</span> + message;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        client.publish(<span class="hljs-string">'ChatChannel'</span>, message);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// Persist it to a Redis list</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        client.rpush(<span class="hljs-string">'chat:messages'</span>, message);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td></table></code></pre>
<p>Here we use a regex to strip out any HTML tags from the message - this will prevent anyone injecting JavaScript into our chat client.</p>
<p>And that’s all, folks! If you want to check out the source for this lesson it’s in the repository on GitHub, tagged <code>lesson-2</code>. If you want to carry on working on this on your own, there’s still plenty you can do, such as:</p>
<ul>
<li>Adding support for multiple rooms</li>
<li>Using Passport.js to allow logging in using third-party services such as Twitter or Facebook</li>
<li>Adding formatting for messages, either by using something like Markdown, or a client-side rich text editor</li>
</ul>
<p>As you can see, it’s surprising how much you can accomplish using only Redis, and under certain circumstances it offers a lot of advantages over a relational database. It’s always worth thinking about whether Redis can be used for your project.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switching to my own static site generator]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/">
        </link>
        <updated>2015-02-15T18:11:22Z</updated>
        <summary type="html"><![CDATA[<p>As you may have seen if you’re visiting the site, I’ve finally switched over from Octopress to the static site generator I’ve been working on for the last few months. Apologies if you’re seeing lots of old posts in your RSS reader - there must have been an inconsistency between the RSS feed for this and that for Octopress.</p>
<p>I actually still really like Octopress, however I’m not and have never been a big fan of Ruby. Python and JavaScript are my two main go-to languages (although I do a lot of work professionally with PHP as well), so I wanted a solution in one of those languages, but I wanted something that was very similar to Octopress in every other way. I also wanted the facility to easily concatenate and minify static files as part of my deployment process to make the whole thing as lean as possible, so it made sense to build it as a Grunt plugin and create a Yeoman generator for building the boilerplate for the blog. Also, it’s always easier to work with your own code, and so using templates I wrote myself should make it quicker and easier for me to customise the blog how I want.</p>
<p>While deploying it did throw up a few errors that I’ve had to fix, it’s gone fairly smoothly and I’m pretty happy with it, although I will no doubt spend some time tweaking it over the next few weeks. It’s built with GitHub Pages in mind, but the fact that it’s built using Grunt should make it straightforward to switch to a different deployment method - during development I’ve actually used <code>grunt-rsync</code> to deploy to my Raspberry Pi and <code>grunt-bitbucket-pages</code> to deploy to Bitbucket in order to test it and both work absolutely fine. There are also Grunt plugins for deploying via FTP around, so if you want to check it out, then as long as you have at least some familiarity with Grunt you should be able to deploy it however you wish. The generator is meant to be only a starting point for your own site, so by all means check it out, tinker with the styling and templates, and make it your own. I will be very happy indeed if I see someone else using it in the wild.</p>
<p>Static site generators are generally somewhat harder to use than a CMS like WordPress, but they have many advantages:</p>
<ul>
<li>Lighter - you can quite easily host a static site with just Nginx on a Raspberry Pi</li>
<li>Faster - with no database or actual dynamic content on the server, just flat HTML, your site will be far quicker to load than a WordPress blog</li>
<li>Cheaper to host</li>
<li>Easy to deploy - if your workflow is very command-line based like mine is, it’s very quick and easy to get blogging</li>
</ul>
<p>If you can get away with using a static site generator rather than a database-driven blogging system, then it’s well worth doing so.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a chat server with Node.js and Redis]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/">
        </link>
        <updated>2014-12-31T14:10:57Z</updated>
        <summary type="html"><![CDATA[<p>One of the more interesting capabilities Redis offers is its support for Pub/Sub. This allows you to subscribe to a specific channel, and then react when some content is published to that channel. In this tutorial, we’ll build a very simple web-based chat system that demonstrates Redis’s Pub/Sub support in action. Chat systems are pretty much synonymous with Node.js - it’s widely considered the “Hello, World!” of Node.js. Since we already used Node with the prior Redis tutorial, then it also makes sense to stick with it for this project too.</p>
<h2 id="installing-node-js">Installing Node.js</h2>
<p>Since the last tutorial, I’ve discovered <a href="https://github.com/creationix/nvm">NVM</a>, and if you’re using any flavour of Unix, I highly recommend using it. It’s not an option if you’re using Windows, however Redis doesn’t officially support Windows anyway, so if you want to follow along on a Windows machine I’d recommend using a VM.</p>
<p>If you followed the URL shortener tutorial, you should already have everything you need, though I’d still recommend switching to NVM as it’s very convenient. We’ll be using Grunt again, so you’ll need to make sure you have <code>grunt-cli</code> installed with the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install -g grunt-cli</table></code></pre>
<p>This assumes you used NVM to install Node - if it’s installed globally, you may need to use <code>sudo</code>.</p>
<h2 id="installing-dependencies">Installing dependencies</h2>
<p>As usual with a Node.js project, our first step is to create our <code>package.json</code> file:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm init</table></code></pre>
<p>Answer the questions so you end up with something like this (or just paste this into <code>package.json</code> and amend it as you see fit):</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"babblr"</span></span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0.0"</span></span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Chat client"</span></span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  "<span class="hljs-attribute">main</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span></span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    "<span class="hljs-attribute">test</span>": <span class="hljs-value"><span class="hljs-string">"grunt test --verbose"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  </span>}</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  "<span class="hljs-attribute">keywords</span>": <span class="hljs-value">[</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"chat"</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  ]</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)"</span></span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"GPLv2"</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></span>}</td></table></code></pre>
<p>Now let’s install our dependencies:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm install express hbs redis hiredis socket.io socket.io-client --save</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ npm install chai grunt grunt-contrib-jshint grunt-coveralls grunt-mocha-istanbul istanbul mocha request --save-dev</td></table></code></pre>
<p>These two commands will install our dependencies.</p>
<p>Now, if you followed on with the URL shortener tutorial, you’ll notice that we aren’t using Jade - instead we’re going to use Handlebars. Jade is quite a nice templating system, but I find it gets in the way for larger projects - you spend too much time looking up the syntax for things you already know in HTML. Handlebars is closer to HTML so we will use that. We’ll also use Socket.IO extensively on this project.</p>
<h2 id="support-files">Support files</h2>
<p>As before, we’ll also use Mocha for our unit tests and Istanbul to generate coverage stats. We’ll need a Grunt configuration for that, so here it is:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">grunt</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    grunt.initConfig({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        jshint: {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            all: [</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-string">'test/*.js'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-string">'index.js'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            ]</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        mocha_istanbul: {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            coverage: {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                src: <span class="hljs-string">'test'</span>, <span class="hljs-comment">// the folder, not the files,</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                options: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                    mask: <span class="hljs-string">'*.js'</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                    reportFormats: [<span class="hljs-string">'cobertura'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'lcovonly'</span>]</td><tr><td class="linenos" data-pseudo-content="17"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        coveralls: {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            options: {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>                src: <span class="hljs-string">'coverage/lcov.info'</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>                force: <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            app: {</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                src: <span class="hljs-string">'coverage/lcov.info'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// Load tasks</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-jshint'</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-coveralls'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-mocha-istanbul'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-comment">// Register tasks</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    grunt.registerTask(<span class="hljs-string">'test'</span>, [<span class="hljs-string">'jshint'</span>, <span class="hljs-string">'mocha_istanbul:coverage'</span>, <span class="hljs-string">'coveralls'</span>]);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>};</td></table></code></pre>
<p>We also need a <code>.bowerrc</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    "<span class="hljs-attribute">directory</span>": <span class="hljs-value"><span class="hljs-string">"static/bower_components"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span>}</td></table></code></pre>
<p>And a <code>bower.json</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"babblr"</span></span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  "<span class="hljs-attribute">main</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span></span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0.0"</span></span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  "<span class="hljs-attribute">authors</span>": <span class="hljs-value">[</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">"Matthew Daly &lt;matthewbdaly@gmail.com&gt;"</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>  ]</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"A simple chat server"</span></span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  "<span class="hljs-attribute">moduleType</span>": <span class="hljs-value">[</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"node"</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  ]</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  "<span class="hljs-attribute">keywords</span>": <span class="hljs-value">[</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-string">"chat"</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>  ]</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"GPLv2"</span></span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  "<span class="hljs-attribute">homepage</span>": <span class="hljs-value"><span class="hljs-string">"http://matthewdaly.co.uk"</span></span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  "<span class="hljs-attribute">private</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  "<span class="hljs-attribute">ignore</span>": <span class="hljs-value">[</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-string">"**/.*"</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-string">"node_modules"</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-string">"bower_components"</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-string">"test"</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-string">"tests"</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>  ]</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    "<span class="hljs-attribute">html5-boilerplate</span>": <span class="hljs-value"><span class="hljs-string">"~4.3.0"</span></span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    "<span class="hljs-attribute">jquery</span>": <span class="hljs-value"><span class="hljs-string">"~2.1.1"</span></span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    "<span class="hljs-attribute">bootstrap</span>": <span class="hljs-value"><span class="hljs-string">"~3.3.1"</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>  </span>}</td><tr><td class="linenos" data-pseudo-content="30"></td><td></span>}</td></table></code></pre>
<p>Then install the Bower dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ bower install</table></code></pre>
<p>We also need a <code>Procfile</code> so we can run it on Heroku:</p>
<pre><code class="hljs lang-bash singleline"><table>web: node index.js</table></code></pre>
<p>Now, let’s create the main file:</p>
<pre><code class="hljs lang-bash singleline"><table>$ touch index.js</table></code></pre>
<p>And our test file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ touch <span class="hljs-built_in">test</span>/test.js</td></table></code></pre>
<h2 id="implementing-the-chat-server">Implementing the chat server</h2>
<p>Next, let’s implement our first test. First of all, we’ll verify that the index route works:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">/*global describe: false, before: false, after: false, it: false */</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-pi">"use strict"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">// Declare the variables used</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> expect = <span class="hljs-built_in">require</span>(<span class="hljs-string">'chai'</span>).expect,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    request = <span class="hljs-built_in">require</span>(<span class="hljs-string">'request'</span>),</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../index'</span>),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    client;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>client = redis.createClient();</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-comment">// Server tasks</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>describe(<span class="hljs-string">'server'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">// Beforehand, start the server</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    before(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Starting the server'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        done();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">// Afterwards, stop the server and empty the database</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    after(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Stopping the server'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        client.flushdb();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        done();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment">// Test the index route</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    describe(<span class="hljs-string">'Test the index route'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        it(<span class="hljs-string">'should return a page with the title Babblr'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            request.get({ url: <span class="hljs-string">'http://localhost:5000/'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                expect(body).to.include(<span class="hljs-string">'Babblr'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                expect(response.statusCode).to.equal(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                expect(response.headers[<span class="hljs-string">'content-type'</span>]).to.equal(<span class="hljs-string">'text/html; charset=utf-8'</span>);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>                done();</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="41"></td><td>});</td></table></code></pre>
<p>Note that this is very similar to the first test for the URL shortener, because it’s doing basically the same thing.</p>
<p>Now, run the test and make sure it fails:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-number">1</span>) should <span class="hljs-built_in">return</span> a page with the title Babblr</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>  <span class="hljs-number">0</span> passing (<span class="hljs-number">873</span>ms)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">1</span>) server Test the index route should <span class="hljs-built_in">return</span> a page with the title Babblr:</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     Uncaught AssertionError: expected undefined to include <span class="hljs-string">'Babblr'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>      at Request._callback (/Users/matthewdaly/Projects/babblr/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">34</span>:<span class="hljs-number">33</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      at self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">373</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      at Request.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at Request.onRequestError (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:<span class="hljs-number">971</span>:<span class="hljs-number">8</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at ClientRequest.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at Socket.socketErrorListener (http.js:<span class="hljs-number">1552</span>:<span class="hljs-number">9</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at Socket.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at net.js:<span class="hljs-number">441</span>:<span class="hljs-number">14</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">442</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="33"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="35"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="38"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="40"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="42"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="43"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="44"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>With that confirmed, we can start writing code to make the test pass:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Declare variables used</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> app, base_url, client, express, hbs, io, port, rtg, subscribe;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Define values</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>app = express();</td><tr><td class="linenos" data-pseudo-content="10"></td><td>port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">/* istanbul ignore if */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-keyword">if</span> (process.env.REDISTOGO_URL) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    rtg  = <span class="hljs-built_in">require</span>(<span class="hljs-string">"url"</span>).parse(process.env.REDISTOGO_URL);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">"redis"</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">"redis"</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    client.auth(rtg.auth.split(<span class="hljs-string">":"</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    subscribe.auth(rtg.auth.split(<span class="hljs-string">":"</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td><span class="hljs-comment">// Define index route</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    res.render(<span class="hljs-string">'index'</span>);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>});</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="48"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="49"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td></table></code></pre>
<p>If you compare this to the code for the URL shortener, you’ll notice a few fairly substantial differences. For one thing, we set up two Redis connections, not one - that’s because we need to do so when using Pub/Sub with Redis. You’ll also notice that we register Handlebars (<code>hbs</code>) rather than Jade, and define not just a directory for views, but another directory inside it for partials. Finally, setting it up to listen at the end is a bit more involved because we’ll be using Socket.IO.</p>
<p>Now, you can run your tests again at this point, but they won’t pass because we haven’t created our views. So let’s do that. Create the directory <code>views</code> and the subdirectory <code>partials</code> inside it. Then add the following content to <code>views/index.hbs</code>:</p>
<pre><code class="hljs lang-hbs"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-expression">{{&gt; <span class="hljs-variable">header</span> }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"conversation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-4"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"message"</span>&gt;</span>Message<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">textarea</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-control"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"message"</span> <span class="hljs-attribute">rows</span>=<span class="hljs-value">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">textarea</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"submitbutton"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-primary form-control"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></span><span class="hljs-expression">{{&gt; <span class="hljs-variable">footer</span> }}</span><span class="xml"></span></td></table></code></pre>
<p>Add this to <code>views/partials/header.hbs</code>:</p>
<pre><code class="hljs lang-hbs"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Babblr<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/bower_components/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/bower_components/bootstrap/dist/css/bootstrap-theme.min.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/css/style.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">nav</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-inverse navbar-static-top"</span> <span class="hljs-attribute">role</span>=<span class="hljs-value">"navigation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"#"</span>&gt;</span>Babblr<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-title">nav</span>&gt;</span></td></table></code></pre>
<p>And add this to <code>views/partials/footer.hbs</code>:</p>
<pre><code class="hljs lang-hbs"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/bower_components/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/bower_components/bootstrap/dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/main.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></td></table></code></pre>
<p>You’ll also want to create placeholder CSS and JavaScript files:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir static/js</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir static/css</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ touch static/js/main.js</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ touch static/css/style.css</td></table></code></pre>
<p>The test should now pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">41</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  <span class="hljs-number">1</span> passing (<span class="hljs-number">54</span>ms)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="21"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="24"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">24</span>/<span class="hljs-number">24</span> ), <span class="hljs-number">5</span> ignored</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">1</span>/<span class="hljs-number">1</span> )</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">24</span>/<span class="hljs-number">24</span> )</td><tr><td class="linenos" data-pseudo-content="28"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>Running <span class="hljs-string">"coveralls:app"</span> (coveralls) task</td><tr><td class="linenos" data-pseudo-content="32"></td><td>&gt;&gt; Failed to submit <span class="hljs-string">'coverage/lcov.info'</span> to coveralls: Bad response: <span class="hljs-number">422</span> {<span class="hljs-string">"message"</span>:<span class="hljs-string">"Couldn't find a repository matching this job."</span>,<span class="hljs-string">"error"</span>:<span class="hljs-literal">true</span>}</td><tr><td class="linenos" data-pseudo-content="33"></td><td>&gt;&gt; Failed to submit coverage results to coveralls</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Warning: Task <span class="hljs-string">"coveralls:app"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>Don’t worry about the coveralls task failing, as that only needs to pass when it runs on Travis CI.</p>
<p>So we now have our main route in place. The next step is to actually implement the chat functionality. Add this code to the test file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-comment">// Test sending a message</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    describe(<span class="hljs-string">'Test sending a message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        it(<span class="hljs-string">"should return 'Message received'"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-comment">// Connect to server</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-string">'http://localhost:5000'</span>, {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-string">'reconnection delay'</span> : <span class="hljs-number">0</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-string">'reopen delay'</span> : <span class="hljs-number">0</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                <span class="hljs-string">'force new connection'</span> : <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-comment">// Handle the message being received</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                expect(data).to.include(<span class="hljs-string">'Message received'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                socket.disconnect();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                done();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-comment">// Send the message</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            socket.emit(<span class="hljs-string">'send'</span>, { message: <span class="hljs-string">'Message received'</span> });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    });</td></table></code></pre>
<p>This code should be fairly straightforward to understand. First, we connect to the server. Then, we set up a handler to verify the content of the message when it gets sent. Finally, we send the message. Let’s run the tests to make sure we get the expected result:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">337</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-number">1</span>) should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">1</span> passing (<span class="hljs-number">2</span>s)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  <span class="hljs-number">1</span>) server Test sending a message should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span>:</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     Error: timeout of <span class="hljs-number">2000</span>ms exceeded</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at null.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/mocha/lib/runnable.js:<span class="hljs-number">159</span>:<span class="hljs-number">19</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at Timer.listOnTimeout [as ontimeout] (timers.js:<span class="hljs-number">112</span>:<span class="hljs-number">15</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="31"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">24</span>/<span class="hljs-number">24</span> ), <span class="hljs-number">5</span> ignored</td><tr><td class="linenos" data-pseudo-content="35"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="36"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">1</span>/<span class="hljs-number">1</span> )</td><tr><td class="linenos" data-pseudo-content="37"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">24</span>/<span class="hljs-number">24</span> )</td><tr><td class="linenos" data-pseudo-content="38"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="39"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>Now, let’s implement this functionality. Add this at the end of <code>index.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Handle new messages</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    subscribe.subscribe(<span class="hljs-string">'ChatChannel'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    socket.on(<span class="hljs-string">'send'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        client.publish(<span class="hljs-string">'ChatChannel'</span>, data.message);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>});</td></table></code></pre>
<p>We’ll go through this. First, we create a callback for when a new connection is received. Inside the callback, we then subscribe to a Pub/Sub channel in Redis called <code>ChatChannel</code>.</p>
<p>Then, we define another callback so that on a <code>send</code> event from Socket.IO, we get the message and publish it to <code>ChatChannel</code>. After that, we define another callback to handle receiving messages, and set it to run when a new message is published to <code>ChatChannel</code>. Finally, we set up a callback to handle removing the listener when a user disconnects.</p>
<p>Note the two different connections to Redis - <code>client</code> and <code>subscribe</code>. As mentioned earlier, you need to use two connections to Redis when using Pub/Sub. This is because a client subscribed to one or more channels should not issue commands, so we use <code>subscribe</code> as a dedicated connection to handle subscriptions, and use <code>client</code> to publish new messages.</p>
<p>We’ll also need a bit of client-side JavaScript to handle sending and receiving messages. Amend <code>main.js</code> as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">var</span> field, socket, output;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">// Get a reference to the input</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    field = $(<span class="hljs-string">'textarea#message'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Get a reference to the output</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    output = $(<span class="hljs-string">'div.conversation'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment">// Handle message submit</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    $(<span class="hljs-string">'a#submitbutton'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create the message</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">var</span> msg;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        msg = field.val();</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        socket.emit(<span class="hljs-string">'send'</span>, { message: msg });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        field.val(<span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        output.append(<span class="hljs-string">'&lt;p&gt;Anonymous Coward : '</span> + data + <span class="hljs-string">'&lt;/p&gt;'</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td></table></code></pre>
<p>Here we have one callback that handles sending messages, and another that handles receiving messages. Note that every message will be preceded with Anonymous Coward - we won’t implement user names at this point (though I plan it for a future instalment).</p>
<p>We’ll also add a little bit of additional styling:</p>
<pre><code class="hljs lang-css"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">div</span><span class="hljs-class">.conversation</span> <span class="hljs-rules">{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">500px</span></span></span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-rule"><span class="hljs-attribute">overflow-y</span>:<span class="hljs-value"> scroll</span></span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"> <span class="hljs-number">1px</span> solid <span class="hljs-hexcolor">#000</span></span></span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"> <span class="hljs-number">10px</span></span></span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>}</span></td></table></code></pre>
<p>Now, if you run your tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Babblr (<span class="hljs-number">40</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test sending a message</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      ✓ should <span class="hljs-built_in">return</span> <span class="hljs-string">'Message received'</span> (<span class="hljs-number">45</span>ms)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">2</span> passing (<span class="hljs-number">101</span>ms)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]</td><tr><td class="linenos" data-pseudo-content="23"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">33</span>/<span class="hljs-number">33</span> ), <span class="hljs-number">5</span> ignored</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">5</span>/<span class="hljs-number">5</span> )</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">33</span>/<span class="hljs-number">33</span> )</td><tr><td class="linenos" data-pseudo-content="30"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="31"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>Running <span class="hljs-string">"coveralls:app"</span> (coveralls) task</td><tr><td class="linenos" data-pseudo-content="34"></td><td>&gt;&gt; Failed to submit <span class="hljs-string">'coverage/lcov.info'</span> to coveralls: Bad response: <span class="hljs-number">422</span> {<span class="hljs-string">"message"</span>:<span class="hljs-string">"Couldn't find a repository matching this job."</span>,<span class="hljs-string">"error"</span>:<span class="hljs-literal">true</span>}</td><tr><td class="linenos" data-pseudo-content="35"></td><td>&gt;&gt; Failed to submit coverage results to coveralls</td><tr><td class="linenos" data-pseudo-content="36"></td><td>Warning: Task <span class="hljs-string">"coveralls:app"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>If you now run the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ node index.js</table></code></pre>
<p>Then visit <code>http://localhost:5000</code>, you should be able to create new messages. If you then open it up in a second tab, you can see messages added in one tab appear in another. Deploying to Heroku using Redis To Go will be straightforward, and you can then access it from multiple devices and see new chat messages appear in real time.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>This illustrates just how straightforward it is to use Redis’s Pub/Sub capability. The chat system is still quite limited, so in a future instalment we’ll develop it further. You can get the source code from the <a href="https://github.com/matthewbdaly/babblr">Github repository</a> - just switch to the <code>lesson-1</code> tag.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My first Grunt plugin]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/">
        </link>
        <updated>2014-12-28T17:04:41Z</updated>
        <summary type="html"><![CDATA[<p>A while back, I mentioned that I’d written a Yeoman generator for creating a flat HTML blog, called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>. For this, I’d used the first Grunt plugin I could find for the purpose, which was <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a>. This worked, but I wasn’t really very happy with it.</p>
<p>The ideal Grunt plugin I had in mind was as follows:</p>
<ul>
<li>Used Handlebars for templating</li>
<li>Generated posts from Markdown files</li>
<li>Saved files in named folders with a single <code>index.html</code> file in each one (like Octopress does) so that no file extension is visible on a page</li>
<li>Generated index pages, rather than just showing the latest post as the first page</li>
</ul>
<p>Unfortunately, <code>grunt-markdown-blog</code> only fulfilled the second criteria, so it was never going to be something I stuck with long-term. However, I couldn’t find anything else that would do the trick, so it looked like my only option was to write a suitable plugin myself.</p>
<p>I started a new Git repository a while back, but didn’t make much progress. Then, on Christmas Eve, I suddenly got the urge to start working on this again, and in a matter of a few hours I’d gotten a working Grunt plugin that ticked all of these boxes. I had to delay getting it integrated into the generator due to Christmas day, and then an unfortunate bout of flu, but I’ve now published it as <a href="https://github.com/matthewbdaly/grunt-blogbuilder">grunt-blogbuilder</a> and amended the Yeoman generator to use it instead.</p>
<p>I’m really pleased with the outcome, and while I’m still not yet ready to migrate over to it from Octopress, it’s a massive step forward, and building a Grunt plugin has been an interesting experience.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a URL shortener with Node.js and Redis]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/11/09/building-a-url-shortener-with-node-dot-js-and-redis/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/11/09/building-a-url-shortener-with-node-dot-js-and-redis/">
        </link>
        <updated>2014-11-09T17:13:16Z</updated>
        <summary type="html"><![CDATA[<p>The NoSQL movement is an exciting one for web developers. While relational databases such as MySQL are applicable to solving a wide range of problems, they aren’t the best solution for every problem. Sometimes you may find yourself dealing with a problem where an alternative data store may make more sense.</p>
<p>Redis is one of the data stores that have appeared as part of this movement, and is arguably one of the more generally useful ones. Since it solves different problems to a relational database, it’s not generally useful as an alternative to them - instead it is often used alongside them.</p>
<h2 id="what-is-redis-">What is Redis?</h2>
<p>Redis is described as follows on the website:</p>
<blockquote>
<p>“Redis is an open source, BSD licensed, advanced key-value cache and store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets, sorted sets, bitmaps and hyperloglogs”.</p>
</blockquote>
<p>In other words, its core functionality is that it allows you to store a value by a key, and later retrieve that data using the key. It also allows you to set an optional expiry time for that key-value pair. It’s quite similar to Memcached in that respect, and indeed one obvious use case for Redis is as an alternative to Memcached. However, it offers a number of additional benefits - for one thing, it supports more data types, and for another, it allows you to persist your data to disk (unlike Memcached, which only retains the data in memory, meaning it’s lost on restart or if Memcached crashes). The latter means that for some very simple web applications, Redis can be used as your sole data store.</p>
<p>In this tutorial, we’ll build a simple URL shortener, using Redis as the sole data store. A URL shortener only really requires two fields:</p>
<ul>
<li>A string to identify the correct URL</li>
<li>The URL</li>
</ul>
<p>That makes Redis a good fit for this use case since all we need to do is generate an ID for each URL, then when a link is followed, look up the URL for that key, and redirect the user to it. As long as this is all our application needs to do, we can quite happily use Redis for this rather than a relational database, and it will be significantly faster than a relational database would be for this use case.</p>
<h2 id="getting-started">Getting started</h2>
<p>We’re more interested in the fundamentals of using Redis in our application than a specific language here. As JavaScript is pretty much required to be a web developer, I think it’s a fairly safe bet to use Node.js rather than PHP or Python, since that way, even if your only experience of JavaScript is client-side, you shouldn’t have too much trouble following along.</p>
<p>You’ll need to have Node.js installed, and I’ll leave the details of installing this to you. You’ll also need the Grunt CLI - install this globally as follows:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo npm install -g grunt-cli</table></code></pre>
<p>Finally, you’ll want to have Redis itself installed. You might also want to install hiredis, which is a faster Redis client that gets used automatically where available.</p>
<p>Now, let’s create our <code>package.json</code> file:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm init</table></code></pre>
<p>You’ll see a number of questions. Your generated <code>package.json</code> file should look something like this:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"url-shortener"</span></span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0.0"</span></span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"A URL shortener"</span></span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  "<span class="hljs-attribute">main</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span></span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    "<span class="hljs-attribute">test</span>": <span class="hljs-value"><span class="hljs-string">"grunt test"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  </span>}</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  "<span class="hljs-attribute">keywords</span>": <span class="hljs-value">[</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"URL"</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-string">"shortener"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  ]</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)"</span></span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"GPLv2"</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span>}</td></table></code></pre>
<p>Note in particular that we set our test command to <code>grunt test</code>.</p>
<p>Next, we install our required Node.js modules. First, install, the normal dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install --save body-parser express redis hiredis jade shortid</table></code></pre>
<p>Next, install the development dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install --save-dev grunt grunt-contrib-jshint grunt-mocha-istanbul istanbul mocha chai request</table></code></pre>
<p>Now, we’re going to use Grunt to run our tests, so that we can easily lint the JavaScript and generate code coverage details. Here’s the Gruntfile:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">grunt</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    grunt.initConfig({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        jshint: {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            all: [</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-string">'test/*.js'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-string">'index.js'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            ]</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        mocha_istanbul: {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            coverage: {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                src: <span class="hljs-string">'test'</span>, <span class="hljs-comment">// the folder, not the files,</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                options: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                    mask: <span class="hljs-string">'*.js'</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                    reportFormats: [<span class="hljs-string">'cobertura'</span>, <span class="hljs-string">'html'</span>]</td><tr><td class="linenos" data-pseudo-content="17"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">// Load tasks</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-jshint'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-mocha-istanbul'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment">// Register tasks</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    grunt.registerTask(<span class="hljs-string">'test'</span>, [<span class="hljs-string">'jshint'</span>, <span class="hljs-string">'mocha_istanbul:coverage'</span>]);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>};</td></table></code></pre>
<p>We’ll also create a <code>Procfile</code> in anticipation of deploying the app to Heroku:</p>
<pre><code class="hljs lang-bash singleline"><table>web: node index.js</table></code></pre>
<h2 id="creating-the-views">Creating the views</h2>
<p>For this application we’ll be using the Express framework and the Jade templating system. We need three templates:</p>
<ul>
<li>Submission form</li>
<li>Output form</li>
<li>404 page</li>
</ul>
<p>Create the folder <code>views</code> under the application directory and add the files <code>views/index.jade</code>:</p>
<pre><code class="hljs lang-jade"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>doctype <span class="hljs-tag">html</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-function"><span class="hljs-title">html</span><span class="hljs-params">(lang=<span class="hljs-string">"en"</span>)</span></span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    head</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        title=<span class="hljs-string">"Shortbread"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">body</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">div</span><span class="hljs-class">.container</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">div</span><span class="hljs-class">.row</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>                <span class="hljs-tag">h1</span> Shortbread</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-tag">div</span><span class="hljs-class">.row</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                <span class="hljs-function"><span class="hljs-title">form</span><span class="hljs-params">(action=<span class="hljs-string">"/"</span>, method=<span class="hljs-string">"POST"</span>)</span></span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                    <span class="hljs-function"><span class="hljs-title">input</span><span class="hljs-params">(type=<span class="hljs-string">"url"</span>, name=<span class="hljs-string">"url"</span>)</span></span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                    <span class="hljs-function"><span class="hljs-title">input</span><span class="hljs-params">(type=<span class="hljs-string">"submit"</span>, value=<span class="hljs-string">"Submit"</span>)</span></span></td></table></code></pre>
<p>Also <code>views/output.jade</code>:</p>
<pre><code class="hljs lang-jade"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>doctype html</td><tr><td class="linenos" data-pseudo-content="2"></td><td>html(lang=<span class="hljs-string">"en"</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    head</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        title=Shortbread</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    body</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-operator">div</span>.container</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-operator">div</span>.row</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                h1 Shortbread</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                p</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                    | Your shortened <span class="hljs-built_in">URL</span> is</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                    <span class="hljs-operator">a</span>(href=base_url+<span class="hljs-string">'/'</span>+id) <span class="hljs-comment">#{base_url}/#{id}</span></td></table></code></pre>
<p>and <code>views/error.jade</code>:</p>
<pre><code class="hljs lang-jade"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>doctype <span class="hljs-tag">html</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-function"><span class="hljs-title">html</span><span class="hljs-params">(lang=<span class="hljs-string">"en"</span>)</span></span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    head</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        title=<span class="hljs-string">"Shortbread"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">body</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">div</span><span class="hljs-class">.container</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">div</span><span class="hljs-class">.row</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>                <span class="hljs-tag">h1</span> Shortbread</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                <span class="hljs-tag">p</span> Link not found</td></table></code></pre>
<h2 id="writing-our-first-test">Writing our first test</h2>
<p>We’re going to use Mocha for our tests, together with the Chai assertion library. Create a folder called <code>test</code>, and put the following in <code>test/test.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">/*global describe: false, before: false, after: false, it: false */</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-pi">"use strict"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">// Declare the variables used</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> expect = <span class="hljs-built_in">require</span>(<span class="hljs-string">'chai'</span>).expect,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    request = <span class="hljs-built_in">require</span>(<span class="hljs-string">'request'</span>),</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../index'</span>),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    client;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>client = redis.createClient();</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment">// Server tasks</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>describe(<span class="hljs-string">'server'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">// Beforehand, start the server</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    before(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Starting the server'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        done();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">// Afterwards, stop the server and empty the database</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    after(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Stopping the server'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        client.flushdb();</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        done();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-comment">// Test the index route</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    describe(<span class="hljs-string">'Test the index route'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        it(<span class="hljs-string">'should return a page with the title Shortbread'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            request.get({ url: <span class="hljs-string">'http://localhost:5000'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                expect(body).to.include(<span class="hljs-string">'Shortbread'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                expect(response.statusCode).to.equal(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                expect(response.headers[<span class="hljs-string">'content-type'</span>]).to.equal(<span class="hljs-string">'text/html; charset=utf-8'</span>);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                done();</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="40"></td><td>});</td></table></code></pre>
<p>This code bears a little explanation. First, we import the required modules, as well as our <code>index.js</code> file (which we have yet to add). Then we create a callback to contain our tests.</p>
<p>Inside the callback, we call the <code>before()</code> and <code>after()</code> functions, which let us set up and tear down our tests. As part of the teardown process, we flush the Redis database.</p>
<p>Finally, we fetch our home page and verify that it returns a 200 status code and a content type of text/html, as well as including the name or our application.</p>
<p>We’ll need to create our <code>index.js</code> file to avoid a nasty error, but we won’t populate it just yet:</p>
<pre><code class="hljs lang-bash singleline"><table>$ touch index.js</table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-number">1</span>) should <span class="hljs-built_in">return</span> a page with the title Shortbread</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>  <span class="hljs-number">0</span> passing (<span class="hljs-number">152</span>ms)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">1</span>) server Test the index route should <span class="hljs-built_in">return</span> a page with the title Shortbread:</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     Uncaught AssertionError: expected undefined to include <span class="hljs-string">'Shortbread'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>      at Request._callback (/Users/matthewdaly/Projects/url-shortener/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">33</span>:<span class="hljs-number">33</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      at self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">372</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      at Request.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at Request.onRequestError (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">963</span>:<span class="hljs-number">8</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at ClientRequest.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at Socket.socketErrorListener (http.js:<span class="hljs-number">1551</span>:<span class="hljs-number">9</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at Socket.emit (events.js:<span class="hljs-number">95</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at net.js:<span class="hljs-number">440</span>:<span class="hljs-number">14</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">419</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="33"></td><td>Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]</td><tr><td class="linenos" data-pseudo-content="35"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="38"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="40"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">0</span>/<span class="hljs-number">0</span> )</td><tr><td class="linenos" data-pseudo-content="42"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="43"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="44"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>Now that we have a failing test, we can start work on our app proper. Open up <code>index.js</code> and add the following code:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-pi">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Declare variables used</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> app, base_url, bodyParser, client, express, port, rtg, shortid;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Define values</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>app = express();</td><tr><td class="linenos" data-pseudo-content="10"></td><td>port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>shortid = <span class="hljs-built_in">require</span>(<span class="hljs-string">'shortid'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-keyword">if</span> (process.env.REDISTOGO_URL) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  rtg  = <span class="hljs-built_in">require</span>(<span class="hljs-string">"url"</span>).parse(process.env.REDISTOGO_URL);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  client = <span class="hljs-built_in">require</span>(<span class="hljs-string">"redis"</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  client.auth(rtg.auth.split(<span class="hljs-string">":"</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>}</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"jade"</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>app.engine(<span class="hljs-string">'jade'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'jade'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-comment">// Handle POST data</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>app.use(bodyParser.json());</td><tr><td class="linenos" data-pseudo-content="34"></td><td>app.use(bodyParser.urlencoded({</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  extended: <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>}));</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td><span class="hljs-comment">// Define index route</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  res.render(<span class="hljs-string">'index'</span>);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>});</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>app.listen(port);</td><tr><td class="linenos" data-pseudo-content="48"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Listening on port '</span> + port);</td></table></code></pre>
<p>Let’s go through this code. First we confirm that linting tools should treat this as a Node app, and use strict mode (I recommend always using strict mode in JavaScript).</p>
<p>Then we declare our variables and import the required modules. Note here that we set the port to 5000, but can also set it based on the <code>PORT</code> environment variable, which is used by Heroku. We also define a base URL, which again can be overriden from an environment variable when hosted on Heroku.</p>
<p>We then set up our connection to our Redis instance. When we push the code up to Heroku, we’ll use the Redis To Go addon, so we check for an environment variable containing the Redis URL. If it’s set, we use that to connect. Otherwise, we just connect as normal.</p>
<p>We then set up templating using Jade, and define the folder containing our views, and store the base URL within the app. Then we set up <code>bodyParser</code> so that Express can handle POST data.</p>
<p>Next, we define our index route to just render the <code>index.jade</code> file. Finally, we set up our static folder and set the app to listen on the correct port.</p>
<p>Let’s run our test:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Shortbread (<span class="hljs-number">116</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  <span class="hljs-number">1</span> passing (<span class="hljs-number">128</span>ms)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]</td><tr><td class="linenos" data-pseudo-content="21"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="24"></td><td>Statements   : <span class="hljs-number">86.96</span>% ( <span class="hljs-number">20</span>/<span class="hljs-number">23</span> )</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Branches     : <span class="hljs-number">83.33</span>% ( <span class="hljs-number">5</span>/<span class="hljs-number">6</span> )</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">1</span>/<span class="hljs-number">1</span> )</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Lines        : <span class="hljs-number">86.96</span>% ( <span class="hljs-number">20</span>/<span class="hljs-number">23</span> )</td><tr><td class="linenos" data-pseudo-content="28"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>Done, without errors.</td></table></code></pre>
<p>Note that Istanbul will have generated a nice HTML coverage report, which will be at <code>coverage/index.html</code>, but this won’t show 100% test coverage due to the Heroku-specific Redis section. To fix this, amend that section as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/* istanbul ignore if */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">if</span> (process.env.REDISTOGO_URL) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    rtg  = <span class="hljs-built_in">require</span>(<span class="hljs-string">"url"</span>).parse(process.env.REDISTOGO_URL);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">"redis"</span>).createClient(rtg.port, rtg.hostname);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    client.auth(rtg.auth.split(<span class="hljs-string">":"</span>)[<span class="hljs-number">1</span>]);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    client = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Telling Istanbul to ignore the if clause resolves that problem nicely.</p>
<h2 id="submitting-a-url">Submitting a URL</h2>
<p>Next, let’s add the ability to add a URL. First, add the following test, after the one for the index:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">// Test submitting a URL</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    describe(<span class="hljs-string">'Test submitting a URL'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        it(<span class="hljs-string">'should return the shortened URL'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            request.post(<span class="hljs-string">'http://localhost:5000'</span>, {form: {url: <span class="hljs-string">'http://www.google.co.uk'</span>}}, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                expect(body).to.include(<span class="hljs-string">'Your shortened URL is'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                expect(response.statusCode).to.equal(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                expect(response.headers[<span class="hljs-string">'content-type'</span>]).to.equal(<span class="hljs-string">'text/html; charset=utf-8'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                done();</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    });</td></table></code></pre>
<p>This test submits a URL via POST, and checks to see that the response view gets returned. Now, let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Shortbread (<span class="hljs-number">223</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test submitting a URL</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-number">1</span>) should <span class="hljs-built_in">return</span> the shortened URL</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">1</span> passing (<span class="hljs-number">318</span>ms)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  <span class="hljs-number">1</span> failing</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  <span class="hljs-number">1</span>) server Test submitting a URL should <span class="hljs-built_in">return</span> the shortened URL:</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     Uncaught AssertionError: expected <span class="hljs-string">'Cannot POST /\n'</span> to include <span class="hljs-string">'Your shortened URL is'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at Request._callback (/Users/matthewdaly/Projects/url-shortener/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">45</span>:<span class="hljs-number">33</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at Request.self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">372</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at Request.emit (events.js:<span class="hljs-number">98</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">1310</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at Request.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">1258</span>:<span class="hljs-number">12</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at IncomingMessage.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at _stream_readable.js:<span class="hljs-number">943</span>:<span class="hljs-number">16</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">419</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="36"></td><td>Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="37"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]</td><tr><td class="linenos" data-pseudo-content="38"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="41"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">23</span>/<span class="hljs-number">23</span> ), <span class="hljs-number">3</span> ignored</td><tr><td class="linenos" data-pseudo-content="42"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="43"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">1</span>/<span class="hljs-number">1</span> )</td><tr><td class="linenos" data-pseudo-content="44"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">23</span>/<span class="hljs-number">23</span> )</td><tr><td class="linenos" data-pseudo-content="45"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="46"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>We have a failing test, so let’s make it pass. Add the following route after the index one:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Define submit route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.post(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Declare variables</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">var</span> url, id;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Get URL</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    url = req.body.url;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">// Create a hashed short version</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    id = shortid.generate();</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">// Store them in Redis</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    client.set(id, url, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Display the response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        res.render(<span class="hljs-string">'output'</span>, { id: id, base_url: base_url });</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});</td></table></code></pre>
<p>This route is fairly simple. It handles POST requests to the index route, and first of all it gets the URL from the POST request. Then it randomly generates a hash to use as the key.</p>
<p>The next part is where we see Redis in action. We create a new key-value pair, with the key set to the newly generated ID, and the value set to the URL. Once Redis confirms that has been done, the callback is fired, which renders the <code>output.jade</code> view with the ID and base URL passed through, so that we can see our shortened URL.</p>
<p>With that done, our test should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Shortbread (<span class="hljs-number">89</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test submitting a URL</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      ✓ should <span class="hljs-built_in">return</span> the shortened URL (<span class="hljs-number">65</span>ms)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">2</span> passing (<span class="hljs-number">167</span>ms)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]</td><tr><td class="linenos" data-pseudo-content="23"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">29</span>/<span class="hljs-number">29</span> ), <span class="hljs-number">3</span> ignored</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">3</span>/<span class="hljs-number">3</span> )</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">29</span>/<span class="hljs-number">29</span> )</td><tr><td class="linenos" data-pseudo-content="30"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="31"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>Done, without errors.</td></table></code></pre>
<p>Our final task is to implement the short URL handling. We want to check to see if a short URL exists. If it does, we redirect the user to the destination. If it doesn’t, we raise a 404 error. For that we need two more tests. Here they are:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-comment">// Test following a URL</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    describe(<span class="hljs-string">'Test following a URL'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        it(<span class="hljs-string">'should redirect the user to the shortened URL'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-comment">// Create the URL</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>            client.set(<span class="hljs-string">'testurl'</span>, <span class="hljs-string">'http://www.google.com'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-comment">// Follow the link</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>                request.get({</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    url: <span class="hljs-string">'http://localhost:5000/testurl'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    followRedirect: <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>                }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                    expect(response.headers.location).to.equal(<span class="hljs-string">'http://www.google.com'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                    expect(response.statusCode).to.equal(<span class="hljs-number">301</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                    done();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                });</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">// Test non-existent link</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    describe(<span class="hljs-string">'Test following a non-existent-link'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        it(<span class="hljs-string">'should return a 404 error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-comment">// Follow the link</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            request.get({</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                url: <span class="hljs-string">'http://localhost:5000/nonexistenturl'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                followRedirect: <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, response, body</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                expect(response.statusCode).to.equal(<span class="hljs-number">404</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>                expect(body).to.include(<span class="hljs-string">'Link not found'</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>                done();</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            });</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    });</td></table></code></pre>
<p>The first test creates a URL for testing purposes. It then navigates to that URL. Note that we set <code>followRedirect</code> to <code>true</code> - this is because, by default, <code>request</code> will follow any redirect, so we need to prevent it from doing so to ensure that the headers to redirect the user are set correctly.</p>
<p>Once the response has been received, we then check that the status code is 301 (Moved Permanently), and that the <code>Location</code> header is set to the correct destination. When a real browser visits this page, it will be redirected accordingly.</p>
<p>The second test tries to fetch a non-existent URL, and checks that the status code is 404, and the response contains the words <code>Link not found</code>.</p>
<p>If we run our tests, they should now fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Shortbread (<span class="hljs-number">252</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test submitting a URL</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      ✓ should <span class="hljs-built_in">return</span> the shortened URL (<span class="hljs-number">47</span>ms)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    Test following a URL</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-number">1</span>) should redirect the user to the shortened URL</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Test following a non-existent-link</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      <span class="hljs-number">2</span>) should <span class="hljs-built_in">return</span> a <span class="hljs-number">404</span> error</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>  <span class="hljs-number">2</span> passing (<span class="hljs-number">322</span>ms)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  <span class="hljs-number">2</span> failing</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>  <span class="hljs-number">1</span>) server Test following a URL should redirect the user to the shortened URL:</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     Uncaught AssertionError: expected undefined to equal <span class="hljs-string">'http://www.google.com'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at Request._callback (/Users/matthewdaly/Projects/url-shortener/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">63</span>:<span class="hljs-number">58</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at Request.self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">372</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at Request.emit (events.js:<span class="hljs-number">98</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">1310</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at Request.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">1258</span>:<span class="hljs-number">12</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at IncomingMessage.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      at _stream_readable.js:<span class="hljs-number">943</span>:<span class="hljs-number">16</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">419</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>  <span class="hljs-number">2</span>) server Test following a non-existent-link should <span class="hljs-built_in">return</span> a <span class="hljs-number">404</span> error:</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     Uncaught AssertionError: expected <span class="hljs-string">'Cannot GET /nonexistenturl\n'</span> to include <span class="hljs-string">'Link not found'</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>      at Request._callback (/Users/matthewdaly/Projects/url-shortener/<span class="hljs-built_in">test</span>/test.js:<span class="hljs-number">80</span>:<span class="hljs-number">33</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      at Request.self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">372</span>:<span class="hljs-number">22</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td>      at Request.emit (events.js:<span class="hljs-number">98</span>:<span class="hljs-number">17</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">1310</span>:<span class="hljs-number">14</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>      at Request.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:<span class="hljs-number">1258</span>:<span class="hljs-number">12</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      at IncomingMessage.emit (events.js:<span class="hljs-number">117</span>:<span class="hljs-number">20</span>)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>      at _stream_readable.js:<span class="hljs-number">943</span>:<span class="hljs-number">16</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>      at process._tickCallback (node.js:<span class="hljs-number">419</span>:<span class="hljs-number">13</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td></td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="52"></td><td>Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="53"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]</td><tr><td class="linenos" data-pseudo-content="54"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="57"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">29</span>/<span class="hljs-number">29</span> ), <span class="hljs-number">3</span> ignored</td><tr><td class="linenos" data-pseudo-content="58"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">6</span>/<span class="hljs-number">6</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="59"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">3</span>/<span class="hljs-number">3</span> )</td><tr><td class="linenos" data-pseudo-content="60"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">29</span>/<span class="hljs-number">29</span> )</td><tr><td class="linenos" data-pseudo-content="61"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="62"></td><td>&gt;&gt;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>Warning: Task <span class="hljs-string">"mocha_istanbul:coverage"</span> failed. Use --force to continue.</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>Aborted due to warnings.</td></table></code></pre>
<p>Now, let’s add our final route:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Define link route</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.route(<span class="hljs-string">'/:id'</span>).all(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get ID</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">var</span> id = req.params.id.trim();</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Look up the URL</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    client.get(id, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, reply</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">if</span> (!err &amp;&amp; reply) {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-comment">// Redirect user to it</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            res.status(<span class="hljs-number">301</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            res.set(<span class="hljs-string">'Location'</span>, reply);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            res.send();</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-comment">// Confirm no such link in database</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            res.status(<span class="hljs-number">404</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            res.render(<span class="hljs-string">'error'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>});</td></table></code></pre>
<p>We accept the ID as a parameter in the URL. We trim off any whitespace around it, and then we query Redis for a URL with that ID. If we find one, we set the status code to 301, and the location to the URL, and send the response. Otherwise, we set the status to 404 and render the error view.</p>
<p>Now, let’s check it passes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ grunt <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Running <span class="hljs-string">"jshint:all"</span> (jshint) task</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt;&gt; <span class="hljs-number">2</span> files lint free.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Running <span class="hljs-string">"mocha_istanbul:coverage"</span> (mocha_istanbul) task</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Listening on port <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  server</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Starting the server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Test the index route</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      ✓ should <span class="hljs-built_in">return</span> a page with the title Shortbread (<span class="hljs-number">90</span>ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Test submitting a URL</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      ✓ should <span class="hljs-built_in">return</span> the shortened URL (<span class="hljs-number">47</span>ms)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    Test following a URL</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      ✓ should redirect the user to the shortened URL</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Test following a non-existent-link</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      ✓ should <span class="hljs-built_in">return</span> a <span class="hljs-number">404</span> error</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Stopping the server</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>  <span class="hljs-number">4</span> passing (<span class="hljs-number">191</span>ms)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]</td><tr><td class="linenos" data-pseudo-content="27"></td><td>=============================================================================</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Statements   : <span class="hljs-number">100</span>% ( <span class="hljs-number">38</span>/<span class="hljs-number">38</span> ), <span class="hljs-number">3</span> ignored</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Branches     : <span class="hljs-number">100</span>% ( <span class="hljs-number">10</span>/<span class="hljs-number">10</span> ), <span class="hljs-number">1</span> ignored</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Functions    : <span class="hljs-number">100</span>% ( <span class="hljs-number">5</span>/<span class="hljs-number">5</span> )</td><tr><td class="linenos" data-pseudo-content="33"></td><td>Lines        : <span class="hljs-number">100</span>% ( <span class="hljs-number">38</span>/<span class="hljs-number">38</span> )</td><tr><td class="linenos" data-pseudo-content="34"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="35"></td><td>&gt;&gt; Done. Check coverage folder.</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>Done, without errors.</td></table></code></pre>
<p>Excellent! Our URL shortener is now complete. From here, deploying it to Heroku is straightforward - you’ll need to install the Redis to Go addon, and refer to Heroku’s documentation on deploying Node.js applications for more details.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>You’ll find the source for this application <a href="https://github.com/matthewbdaly/Shortbread">here</a> and a demo <a href="http://shortbread-example.herokuapp.com/">here</a>.</p>
<p>I hope you’ve enjoyed this brief introduction to Redis, and that it’s opened your eyes to at least one of the alternatives out there to a relational database. I’ll hopefully be able to follow this up with examples of some other problems Redis is ideal for solving.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Django web server setup]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/">
        </link>
        <updated>2014-10-19T18:52:28Z</updated>
        <summary type="html"><![CDATA[<p>This isn’t really part of my Django tutorial series (that has now definitely concluded!), but I thought I’d share the setup I generally use for deploying Django applications, partly for my own reference, and partly because it is quite complex, and those readers who don’t wish to deploy to Heroku may want some guidance on how to deploy their new blogs to a VPS.</p>
<h2 id="operating-system">Operating system</h2>
<p>This isn’t actually that much of a big deal, but while I prefer Ubuntu on desktops, I generally use Debian Stable on servers, since it’s fanatically stable.</p>
<h2 id="database-server">Database server</h2>
<p>For my first commercial Django app, I used MySQL. However, South had one or two issues with MySQL, and I figured that since using an ORM and migrations meant that I wouldn’t need to write much SQL anyway, I might as well jump to PostgreSQL for the Django app I’m currently in the process of deploying at work. So far I haven’t had any problems with it.</p>
<h2 id="web-server">Web server</h2>
<p>It’s customary to use two web servers with Django. One handles the static content, and reverse proxies everything else to a different port, where another web server serves the dynamic content.</p>
<p>For serving the static files, I use Nginx - it’s generally considered to be faster than Apache for this use case. Here’s a typical Nginx config file:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-title">server</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-title">listen</span> <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-title">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-title">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-title">access_log</span> /var/log/nginx/access.log;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-title">error_log</span> /var/log/nginx/error.log;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-title">location</span> /static {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-title">root</span> /var/www/mysite;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-title">location</span> /media {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-title">root</span> /var/www/mysite;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-title">location</span> / {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-title">proxy_pass</span> <span class="hljs-url">http://127.0.0.1:8000</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>}</td></table></code></pre>
<p>For the application server, I use Gunicorn. You can install this with <code>pip install gunicorn</code>, then add it to <code>INSTALLED_APPS</code>. Then add the following config file to the root of your project, as <code>gunicorn.conf.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>bind = <span class="hljs-string">"127.0.0.1:8000"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>logfile = <span class="hljs-string">"/var/log/gunicorn.log"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>loglevel = <span class="hljs-string">"debug"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>workers = <span class="hljs-number">3</span></td></table></code></pre>
<p>You should normally set the number of workers to 2 times the number of cores on your machine, plus one.</p>
<p>In order to keep Gunicorn running, I use Supervisor. As the installation commands will depend on your OS, I won’t give details here - your package manager of choice should have a suitable package available. Here’s a typical Supervisor config file I might use for running Gunicorn for a Django app, named <code>mysite-supervisor.conf</code>:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-title">[program:mysite]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-setting">command=<span class="hljs-value">/var/www/mysite/venv/bin/gunicorn myapp.wsgi:application --workers=<span class="hljs-number">3</span></span></span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-setting">directory=<span class="hljs-value">/var/www/mysite/</span></span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-setting">user=<span class="hljs-value">nobody</span></span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-setting">autostart=<span class="hljs-value"><span class="hljs-keyword">true</span></span></span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-setting">autorestart=<span class="hljs-value"><span class="hljs-keyword">true</span></span></span></td></table></code></pre>
<p>Once that’s in place, you can easily add the new app:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo supervisorctl reread</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo supervisorctl update</td></table></code></pre>
<p>Then to start it:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo supervisorctl start mysite</table></code></pre>
<p>Or stop it with:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo supervisorctl stop mysite</table></code></pre>
<p>Or restart it:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo supervisorctl restart mysite</table></code></pre>
<h2 id="celery">Celery</h2>
<p>So far, both of the web apps I’ve built professionally have been ones where it made sense to use <a href="http://www.celeryproject.org/">Celery</a> for some tasks. For the uninitiated, Celery lets you pass a task to a queue to be handled, rather than handling it within the context of the same HTTP request. This offers the following advantages:</p>
<ul>
<li>The user doesn’t need to wait for the task to be completed before getting a response, improving performance</li>
<li>It’s more robust, since if the task fails, it can be automatically retried</li>
<li>The task queue can be moved to another server if desired, making it easier to scale</li>
<li>Scheduling tasks</li>
</ul>
<p>I’ve used it in cases where I needed to send an email or a push notification, since these don’t have to be done within the context of the same HTTP request, but need to be reliable.</p>
<p>I generally use RabbitMQ as my message queue. I’ll leave setting this up as an exercise for the reader since it’s covered pretty well in the Celery documentation, but like with Gunicorn, I use Supervisor to run the Celery worker. Here’s a typical config file, which might be called <code>celery-supervisor.conf</code>:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-title">[program:celeryd]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-setting">command=<span class="hljs-value">/var/www/mysite/venv/bin/python manage.py celery worker</span></span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-setting">directory=<span class="hljs-value">/var/www/mysite/</span></span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-setting">user=<span class="hljs-value">nobody</span></span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-setting">autostart=<span class="hljs-value"><span class="hljs-keyword">true</span></span></span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-setting">autorestart=<span class="hljs-value"><span class="hljs-keyword">true</span></span></span></td></table></code></pre>
<p>Then start it up:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo supervisorctl reread</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo supervisorctl update</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ sudo supervisorctl start celeryd</td></table></code></pre>
<p>I make no claims about how good this setup is, but it works well for me. I haven’t yet had the occasion to deploy a Django app to anywhere other than Heroku that really benefited from caching, so I haven’t got any tips to share about that, but if I were building a content-driven web app, I would use Memcached since it’s well-supported.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing generator-simple-static-blog]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/">
        </link>
        <updated>2014-10-05T18:56:46Z</updated>
        <summary type="html"><![CDATA[<p>I’m a big fan of static site generators. I ditched WordPress for Octopress over two years ago because it was free to host on GitHub Pages and much faster, had much better syntax highlighting, and I liked being able to write posts in Vim, and I’ve never looked back since.</p>
<p>That said, Octopress is written in Ruby, a language I’ve never been that keen on. Ideally I’d prefer to use Python or JavaScript, but none of the solutions I’ve found have been to my liking. Recently I’ve been using Grunt and Yeoman to some extent, and I’ve wondered about the idea of creating a Yeoman generator to build a static blogging engine. After discovering <code>grunt-markdown-blog</code>, I took the plunge and have built a simple blog generator called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>.</p>
<p>I’ve published it to NPM, so feel free to check it out. It includes code highlighting with the Zenburn colour scheme by default (although highlight.js includes many other themes, so just switch to another one if you want), and it should be easy to edit the templates. I’ve also included the ability to deploy automatically to GitHub Pages using Grunt.</p>
<p>I don’t anticipate moving over to this from Octopress for the foreseeable future, but it’s been an interesting project for the weekend.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 9]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/">
        </link>
        <updated>2014-09-28T19:51:02Z</updated>
        <summary type="html"><![CDATA[<p>Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I’d like to show you how to upgrade to it.</p>
<p>The biggest change is that Django 1.7 introduces its own migration system, which means South is now surplus to requirements. We therefore need to switch from South to Django’s native migrations. Fortunately, this is fairly straightforward.</p>
<p>First of all, activate your virtualenv:</p>
<pre><code class="hljs lang-bash singleline"><table>$ virtualenv venv</table></code></pre>
<p>Then make sure your migrations are up to date:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py syncdb</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>Then, upgrade your Django version and uninstall South:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install Django --upgrade</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip uninstall South</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Next, remove South from <code>INSTALLED_APPS</code> in <code>django_tutorial_blog_ng/settings.py</code>.</p>
<p>You now need to delete all of the numbered migration files in <code>blogengine/migrations/</code>, and the relevant <code>.pyc</code> files, but NOT the directory or the <code>__init__.py</code> file. You can do so with this command on Linux or OS X:</p>
<pre><code class="hljs lang-bash singleline"><table>$ rm blogengine/migrations/<span class="hljs-number">00</span>*</table></code></pre>
<p>Next, we recreate our migrations with the following command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'blogengine'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-number">0001</span>_initial.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Category</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    - Create model Post</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    - Create model Tag</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    - Add field tags to post</td></table></code></pre>
<p>Then we run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Synchronize unmigrated apps: sitemaps, django_jenkins, debug_toolbar</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Apply all migrations: sessions, admin, sites, flatpages, contenttypes, auth, blogengine</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Synchronizing apps without migrations:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Creating tables...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Installing custom SQL...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Installing indexes...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Applying contenttypes.<span class="hljs-number">0001</span>_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying auth.<span class="hljs-number">0001</span>_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying admin.<span class="hljs-number">0001</span>_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying sites.<span class="hljs-number">0001</span>_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying blogengine.<span class="hljs-number">0001</span>_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying flatpages.<span class="hljs-number">0001</span>_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying sessions.<span class="hljs-number">0001</span>_initial... FAKED</td></table></code></pre>
<p>Don’t worry too much if the output doesn’t look exactly the same as this - as long as it works, that’s the main thing.</p>
<p>Let’s run our test suite to ensure it works:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....FF.F.FFFFFF..............</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">385</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: <span class="hljs-built_in">test</span>_create_post_without_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">417</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post_without_tag</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">278</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAIL: <span class="hljs-built_in">test</span>_delete_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">346</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_tag</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="37"></td><td>FAIL: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">255</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="45"></td><td>FAIL: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">447</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="53"></td><td>FAIL: <span class="hljs-built_in">test</span>_edit_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="55"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">323</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_tag</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="61"></td><td>FAIL: <span class="hljs-built_in">test</span>_login (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="63"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">183</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_login</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="69"></td><td>FAIL: <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span> (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="71"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">214</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="77"></td><td>Ran <span class="hljs-number">29</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.383</span>s</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>FAILED (failures=<span class="hljs-number">9</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We have an issue here. A load of the tests for the admin interface now fail. If we now try running the dev server, we see this error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py runserver</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Performing system checks...</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>System check identified no issues (<span class="hljs-number">0</span> silenced).</td><tr><td class="linenos" data-pseudo-content="5"></td><td>September <span class="hljs-number">28</span>, <span class="hljs-number">2014</span> - <span class="hljs-number">20</span>:<span class="hljs-number">16</span>:<span class="hljs-number">47</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Django version <span class="hljs-number">1.7</span>, using settings <span class="hljs-string">'django_tutorial_blog_ng.settings'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Starting development server at http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span>/</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Quit the server with CONTROL-C.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Unhandled exception <span class="hljs-keyword">in</span> thread started by &lt;<span class="hljs-keyword">function</span> wrapper at <span class="hljs-number">0</span>x1024a5ed8&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/autoreload.py"</span>, line <span class="hljs-number">222</span>, <span class="hljs-keyword">in</span> wrapper</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    fn(*args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line <span class="hljs-number">132</span>, <span class="hljs-keyword">in</span> inner_run</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    handler = self.get_handler(*args, **options)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/runserver.py"</span>, line <span class="hljs-number">25</span>, <span class="hljs-keyword">in</span> get_handler</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    handler = super(Command, self).get_handler(*args, **options)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line <span class="hljs-number">48</span>, <span class="hljs-keyword">in</span> get_handler</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-built_in">return</span> get_internal_wsgi_application()</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py"</span>, line <span class="hljs-number">66</span>, <span class="hljs-keyword">in</span> get_internal_wsgi_application</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    sys.exc_info()[<span class="hljs-number">2</span>])</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py"</span>, line <span class="hljs-number">56</span>, <span class="hljs-keyword">in</span> get_internal_wsgi_application</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-built_in">return</span> import_string(app_path)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/module_loading.py"</span>, line <span class="hljs-number">26</span>, <span class="hljs-keyword">in</span> import_string</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    module = import_module(module_path)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.8_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py"</span>, line <span class="hljs-number">37</span>, <span class="hljs-keyword">in</span> import_module</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/django_tutorial_blog_ng/wsgi.py"</span>, line <span class="hljs-number">14</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    from dj_static import Cling</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/dj_static.py"</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    from django.core.handlers.base import get_path_info</td><tr><td class="linenos" data-pseudo-content="31"></td><td>django.core.exceptions.ImproperlyConfigured: WSGI application <span class="hljs-string">'django_tutorial_blog_ng.wsgi.application'</span> could not be loaded; Error importing module: <span class="hljs-string">'cannot import name get_path_info'</span></td></table></code></pre>
<p>Fortunately, the error above is easy to fix by upgrading <code>dj_static</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install dj_static --upgrade</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>That resolves the error in serving static files, but not the error with the admin. If you run the dev server, you’ll be able to see that the admin actually works fine. The problem is caused by the test client not following redirects in the admin. We can easily run just the admin tests with the following command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine.tests.AdminTest</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.FF.F.FFFFFF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">385</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: <span class="hljs-built_in">test</span>_create_post_without_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">417</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post_without_tag</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">278</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAIL: <span class="hljs-built_in">test</span>_delete_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">346</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_tag</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="37"></td><td>FAIL: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">255</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="45"></td><td>FAIL: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">447</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="53"></td><td>FAIL: <span class="hljs-built_in">test</span>_edit_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="55"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">323</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_tag</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="61"></td><td>FAIL: <span class="hljs-built_in">test</span>_login (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="63"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">183</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_login</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="69"></td><td>FAIL: <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span> (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="71"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">214</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="77"></td><td>Ran <span class="hljs-number">12</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.283</span>s</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>FAILED (failures=<span class="hljs-number">9</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s commit our changes so far first:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/ requirements.txt blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Upgraded to Django 1.7'</span></td></table></code></pre>
<p>Now let’s fix our tests. Here’s the amended version of the <code>AdminTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.client.logout()</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/category/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Create the new category</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="55"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="58"></td><td>            follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-comment"># Check new category now in database</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Edit the category</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/'</span> + str(category.pk) + <span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="78"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,</td><tr><td class="linenos" data-pseudo-content="79"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>            }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        <span class="hljs-comment"># Check category amended</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        only_category = all_categories[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="90"></td><td>        self.assertEquals(only_category.name, <span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertEquals(only_category.description, <span class="hljs-string">'The Perl programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="92"></td><td></td><tr><td class="linenos" data-pseudo-content="93"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="96"></td><td></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="99"></td><td></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        <span class="hljs-comment"># Delete the category</span></td><tr><td class="linenos" data-pseudo-content="101"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/'</span> + str(category.pk) + <span class="hljs-string">'/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="102"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="103"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="105"></td><td></td><tr><td class="linenos" data-pseudo-content="106"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="107"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="108"></td><td></td><tr><td class="linenos" data-pseudo-content="109"></td><td>        <span class="hljs-comment"># Check category deleted</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="111"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">0</span>)</td><tr><td class="linenos" data-pseudo-content="112"></td><td></td><tr><td class="linenos" data-pseudo-content="113"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="114"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="115"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="116"></td><td></td><tr><td class="linenos" data-pseudo-content="117"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="118"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="119"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="120"></td><td></td><tr><td class="linenos" data-pseudo-content="121"></td><td>        <span class="hljs-comment"># Create the new tag</span></td><tr><td class="linenos" data-pseudo-content="122"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="123"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,</td><tr><td class="linenos" data-pseudo-content="124"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="125"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="126"></td><td>            follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="127"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="128"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="129"></td><td></td><tr><td class="linenos" data-pseudo-content="130"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="131"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="132"></td><td></td><tr><td class="linenos" data-pseudo-content="133"></td><td>        <span class="hljs-comment"># Check new tag now in database</span></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="135"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="136"></td><td></td><tr><td class="linenos" data-pseudo-content="137"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="138"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="139"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="140"></td><td></td><tr><td class="linenos" data-pseudo-content="141"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="142"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="143"></td><td></td><tr><td class="linenos" data-pseudo-content="144"></td><td>        <span class="hljs-comment"># Edit the tag</span></td><tr><td class="linenos" data-pseudo-content="145"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/'</span> + str(tag.pk) + <span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="146"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,</td><tr><td class="linenos" data-pseudo-content="147"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="148"></td><td>            }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="149"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="150"></td><td></td><tr><td class="linenos" data-pseudo-content="151"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="152"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="153"></td><td></td><tr><td class="linenos" data-pseudo-content="154"></td><td>        <span class="hljs-comment"># Check tag amended</span></td><tr><td class="linenos" data-pseudo-content="155"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="156"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="157"></td><td>        only_tag = all_tags[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="158"></td><td>        self.assertEquals(only_tag.name, <span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="159"></td><td>        self.assertEquals(only_tag.description, <span class="hljs-string">'The Perl programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="160"></td><td></td><tr><td class="linenos" data-pseudo-content="161"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="162"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="163"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="164"></td><td></td><tr><td class="linenos" data-pseudo-content="165"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="166"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="167"></td><td></td><tr><td class="linenos" data-pseudo-content="168"></td><td>        <span class="hljs-comment"># Delete the tag</span></td><tr><td class="linenos" data-pseudo-content="169"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/'</span> + str(tag.pk) + <span class="hljs-string">'/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="170"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="171"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="172"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="173"></td><td></td><tr><td class="linenos" data-pseudo-content="174"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="175"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="176"></td><td></td><tr><td class="linenos" data-pseudo-content="177"></td><td>        <span class="hljs-comment"># Check tag deleted</span></td><tr><td class="linenos" data-pseudo-content="178"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="179"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">0</span>)</td><tr><td class="linenos" data-pseudo-content="180"></td><td></td><tr><td class="linenos" data-pseudo-content="181"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="182"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="183"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="184"></td><td></td><tr><td class="linenos" data-pseudo-content="185"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="186"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="187"></td><td></td><tr><td class="linenos" data-pseudo-content="188"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="189"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="190"></td><td></td><tr><td class="linenos" data-pseudo-content="191"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="192"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="193"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="194"></td><td></td><tr><td class="linenos" data-pseudo-content="195"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="196"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="197"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="198"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="199"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="200"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="201"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="202"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="203"></td><td>            <span class="hljs-string">'category'</span>: str(category.pk),</td><tr><td class="linenos" data-pseudo-content="204"></td><td>            <span class="hljs-string">'tags'</span>: str(tag.pk)</td><tr><td class="linenos" data-pseudo-content="205"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="206"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="207"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="208"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="209"></td><td></td><tr><td class="linenos" data-pseudo-content="210"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="211"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="212"></td><td></td><tr><td class="linenos" data-pseudo-content="213"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="214"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="215"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="216"></td><td></td><tr><td class="linenos" data-pseudo-content="217"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post_without_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="218"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="219"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="220"></td><td></td><tr><td class="linenos" data-pseudo-content="221"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="222"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="223"></td><td></td><tr><td class="linenos" data-pseudo-content="224"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="225"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="226"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="227"></td><td></td><tr><td class="linenos" data-pseudo-content="228"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="229"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="230"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="231"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="232"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="233"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="234"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="235"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="236"></td><td>            <span class="hljs-string">'category'</span>: str(category.pk)</td><tr><td class="linenos" data-pseudo-content="237"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="238"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="239"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="240"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="241"></td><td></td><tr><td class="linenos" data-pseudo-content="242"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="243"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="244"></td><td></td><tr><td class="linenos" data-pseudo-content="245"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="246"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="247"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="248"></td><td></td><tr><td class="linenos" data-pseudo-content="249"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="250"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="251"></td><td>        post = PostFactory()</td><tr><td class="linenos" data-pseudo-content="252"></td><td></td><tr><td class="linenos" data-pseudo-content="253"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="254"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="255"></td><td></td><tr><td class="linenos" data-pseudo-content="256"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="257"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="258"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="259"></td><td></td><tr><td class="linenos" data-pseudo-content="260"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="261"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="262"></td><td></td><tr><td class="linenos" data-pseudo-content="263"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="264"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/'</span> + str(post.pk) + <span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="265"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="266"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="267"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="268"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="269"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,</td><tr><td class="linenos" data-pseudo-content="270"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="271"></td><td>            <span class="hljs-string">'category'</span>: str(category.pk),</td><tr><td class="linenos" data-pseudo-content="272"></td><td>            <span class="hljs-string">'tags'</span>: str(tag.pk)</td><tr><td class="linenos" data-pseudo-content="273"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="274"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="275"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="276"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="277"></td><td></td><tr><td class="linenos" data-pseudo-content="278"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="279"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="280"></td><td></td><tr><td class="linenos" data-pseudo-content="281"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="282"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="283"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="284"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="285"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="286"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="287"></td><td></td><tr><td class="linenos" data-pseudo-content="288"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="289"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="290"></td><td>        post = PostFactory()</td><tr><td class="linenos" data-pseudo-content="291"></td><td></td><tr><td class="linenos" data-pseudo-content="292"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="293"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="294"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="295"></td><td></td><tr><td class="linenos" data-pseudo-content="296"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="297"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="298"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="299"></td><td></td><tr><td class="linenos" data-pseudo-content="300"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="301"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="302"></td><td></td><tr><td class="linenos" data-pseudo-content="303"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="304"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/'</span> + str(post.pk) + <span class="hljs-string">'/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="305"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="306"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="307"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="308"></td><td></td><tr><td class="linenos" data-pseudo-content="309"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="310"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="311"></td><td></td><tr><td class="linenos" data-pseudo-content="312"></td><td>        <span class="hljs-comment"># Check post deleted</span></td><tr><td class="linenos" data-pseudo-content="313"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="314"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>There are two main issues here. The first is that when we try to edit or delete an existing item, or refer to it when creating something else, we can no longer rely on the number representing the primary key being set to 1. So we need to specifically obtain this, rather than hard-coding it to 1. Therefore, whenever we pass through a number to represent an item (with the exception of the site, but including tags, categories and posts), we need to instead fetch its primary key and return it. So, above where we try to delete a post, we replace <code>1</code> with <code>str(post.pk)</code>. This will solve a lot of the problems. As there’s a lot of them, I won’t go through each one, but you can see the entire class above for reference, and if you’ve followed along so far, you shouldn’t have any problems.</p>
<p>The other issue we need to fix is the login and logout tests. We simply add <code>follow=True</code> to these to ensure that the test client follows the redirects.</p>
<p>Let’s run our tests to make sure they pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.............................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran <span class="hljs-number">29</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">8.210</span>s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>With that done, you can commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Fixed broken tests'</span></td></table></code></pre>
<p>Don’t forget to deploy your changes:</p>
<pre><code class="hljs lang-bash singleline"><table>$ fab deploy</table></code></pre>
<p>Our blog has now been happily migrated over to Django 1.7!</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Changing date format from DD/MM/YYYY to YYYY-MM-DD in Vim]]></title>
        <id>http://matthewdaly.co.uk/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/</id>
        <link href="http://matthewdaly.co.uk/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/">
        </link>
        <updated>2014-09-28T18:53:34Z</updated>
        <summary type="html"><![CDATA[<p>Recently I had the occasion to reformat a load of dates in Vim from <code>DD/MM/YYYY</code> to <code>YYYY-MM-DD</code>. In Vim, this is quite simple:</p>
<pre><code class="hljs lang-viml singleline"><table>:<span class="hljs-preprocessor">%</span>s/\<span class="hljs-comment">(\d\{2}\)</span>\/\<span class="hljs-comment">(\d\{2}\)</span>\/\<span class="hljs-comment">(\d\{4}\)</span>/\<span class="hljs-number">3</span>-\<span class="hljs-number">2</span>-\<span class="hljs-number">1</span>/g</table></code></pre>
<p>This should be easy to adapt to reformatting other date formats.</p>
]]></summary>
    </entry>
</feed>