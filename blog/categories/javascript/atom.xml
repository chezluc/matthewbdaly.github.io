<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[javascript | Matthew Daly's Blog]]></title>
        <description><![CDATA[javascript | I'm a web developer in Norfolk. This is my blog...]]></description>
        <link>http://github.com/dylang/node-rss</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sun, 15 Feb 2015 19:05:40 GMT</lastBuildDate>
        <item>
            <title><![CDATA[Switching to my own static site generator]]></title>
            <description><![CDATA[<p>As you may have seen if you’re visiting the site, I’ve finally switched over from Octopress to the static site generator I’ve been working on for the last few months. Apologies if you’re seeing lots of old posts in your RSS reader - there must have been an inconsistency between the RSS feed for this and that for Octopress.</p>
<p>I actually still really like Octopress, however I’m not and have never been a big fan of Ruby. Python and JavaScript are my two main go-to languages (although I do a lot of work professionally with PHP as well), so I wanted a solution in one of those languages, but I wanted something that was very similar to Octopress in every other way. I also wanted the facility to easily concatenate and minify static files as part of my deployment process to make the whole thing as lean as possible, so it made sense to build it as a Grunt plugin and create a Yeoman generator for building the boilerplate for the blog. Also, it’s always easier to work with your own code, and so using templates I wrote myself should make it quicker and easier for me to customise the blog how I want.</p>
<p>While deploying it did throw up a few errors that I’ve had to fix, it’s gone fairly smoothly and I’m pretty happy with it, although I will no doubt spend some time tweaking it over the next few weeks. It’s built with GitHub Pages in mind, but the fact that it’s built using Grunt should make it straightforward to switch to a different deployment method - during development I’ve actually used <code>grunt-rsync</code> to deploy to my Raspberry Pi and <code>grunt-bitbucket-pages</code> to deploy to Bitbucket in order to test it and both work absolutely fine. There are also Grunt plugins for deploying via FTP around, so if you want to check it out, then as long as you have at least some familiarity with Grunt you should be able to deploy it however you wish. The generator is meant to be only a starting point for your own site, so by all means check it out, tinker with the styling and templates, and make it your own. I will be very happy indeed if I see someone else using it in the wild.</p>
<p>Static site generators are generally somewhat harder to use than a CMS like WordPress, but they have many advantages:</p>
<ul>
<li>Lighter - you can quite easily host a static site with just Nginx on a Raspberry Pi</li>
<li>Faster - with no database or actual dynamic content on the server, just flat HTML, your site will be far quicker to load than a WordPress blog</li>
<li>Cheaper to host</li>
<li>Easy to deploy - if your workflow is very command-line based like mine is, it’s very quick and easy to get blogging</li>
</ul>
<p>If you can get away with using a static site generator rather than a database-driven blogging system, then it’s well worth doing so.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</guid>
            <pubDate>Sun, 15 Feb 2015 18:11:22 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My first Grunt plugin]]></title>
            <description><![CDATA[<p>A while back, I mentioned that I’d written a Yeoman generator for creating a flat HTML blog, called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>. For this, I’d used the first Grunt plugin I could find for the purpose, which was <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a>. This worked, but I wasn’t really very happy with it.</p>
<p>The ideal Grunt plugin I had in mind was as follows:</p>
<ul>
<li>Used Handlebars for templating</li>
<li>Generated posts from Markdown files</li>
<li>Saved files in named folders with a single <code>index.html</code> file in each one (like Octopress does) so that no file extension is visible on a page</li>
<li>Generated index pages, rather than just showing the latest post as the first page</li>
</ul>
<p>Unfortunately, <code>grunt-markdown-blog</code> only fulfilled the second criteria, so it was never going to be something I stuck with long-term. However, I couldn’t find anything else that would do the trick, so it looked like my only option was to write a suitable plugin myself.</p>
<p>I started a new Git repository a while back, but didn’t make much progress. Then, on Christmas Eve, I suddenly got the urge to start working on this again, and in a matter of a few hours I’d gotten a working Grunt plugin that ticked all of these boxes. I had to delay getting it integrated into the generator due to Christmas day, and then an unfortunate bout of flu, but I’ve now published it as <a href="https://github.com/matthewbdaly/grunt-blogbuilder">grunt-blogbuilder</a> and amended the Yeoman generator to use it instead.</p>
<p>I’m really pleased with the outcome, and while I’m still not yet ready to migrate over to it from Octopress, it’s a massive step forward, and building a Grunt plugin has been an interesting experience.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</guid>
            <pubDate>Sun, 28 Dec 2014 17:04:41 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introducing generator-simple-static-blog]]></title>
            <description><![CDATA[<p>I’m a big fan of static site generators. I ditched WordPress for Octopress over two years ago because it was free to host on GitHub Pages and much faster, had much better syntax highlighting, and I liked being able to write posts in Vim, and I’ve never looked back since.</p>
<p>That said, Octopress is written in Ruby, a language I’ve never been that keen on. Ideally I’d prefer to use Python or JavaScript, but none of the solutions I’ve found have been to my liking. Recently I’ve been using Grunt and Yeoman to some extent, and I’ve wondered about the idea of creating a Yeoman generator to build a static blogging engine. After discovering <code>grunt-markdown-blog</code>, I took the plunge and have built a simple blog generator called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>.</p>
<p>I’ve published it to NPM, so feel free to check it out. It includes code highlighting with the Zenburn colour scheme by default (although highlight.js includes many other themes, so just switch to another one if you want), and it should be easy to edit the templates. I’ve also included the ability to deploy automatically to GitHub Pages using Grunt.</p>
<p>I don’t anticipate moving over to this from Octopress for the foreseeable future, but it’s been an interesting project for the weekend.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</guid>
            <pubDate>Sun, 05 Oct 2014 18:56:46 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My first Yeoman generator]]></title>
            <description><![CDATA[<p>At work I use the <a href="http://www.getskeleton.com/">Skeleton boilerplate</a> a lot - my boss, who handles most of the design work, likes it and generally uses it for his designs. I’ve also been using <a href="http://gruntjs.com/">Grunt</a> a lot lately, so it was inevitable that I’d probably start to look for a <a href="http://yeoman.io/">Yeoman</a> generator for working with it.</p>
<p>There was an existing Yeoman generator for Skeleton, but it didn’t really do what I wanted. I wanted something that:</p>
<ul>
<li>Included jQuery and Modernizr</li>
<li>Automatically concatenates and minifies all the JavaScript and CSS</li>
<li>Will automatically rebuild on changes</li>
<li>Includes LiveReload and a development server</li>
<li>Includes automatic deployment via FTP</li>
</ul>
<p>After looking through the documentation for Yeoman, it was actually quick and easy to throw together my own generator and put it up. It’s available <a href="https://npmjs.org/package/generator-skellington">here</a>, and the GitHub repository is <a href="https://github.com/matthewbdaly/generator-skellington">here</a>.</p>
<p>Future plans for it include:</p>
<ul>
<li>Adding auto-prefixing for CSS</li>
<li>Removing redundant CSS rules automatically</li>
<li>Possibly, alternate deployment methods</li>
</ul>
<p>Frustratingly, NPM seems to be playing up at present - it’s not picking up the README file, and the Yeoman site isn’t pulling it in. Any idea why, anyone?</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/</guid>
            <pubDate>Sat, 25 Jan 2014 11:38:40 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[First steps with Node.js]]></title>
            <description><![CDATA[<p>The idea of building an entire web app using nothing but JavaScript has always appealed to me. Despite its undoubted flaws, JavaScript is a powerful language, and chopping and changing between several different programming languages is never great. So I’ve always wanted to check out Node.js.</p>
<p>Lately I’ve been tinkering with Backbone.js a lot. As a web and mobile app developer, I’ve seen the benefit of server-side MVC frameworks firsthand, and I’ve also seen how bad a PhoneGap app can get without this kind of structure, so I’ve been very eager for a while to get my head around a JavaScript framework. The first one I was able to really grok was Knockout.js, thanks to its wonderful tutorial, but Backbone.js seemed to have better mindshare, and support for routing, so I knuckled down and used it for a large personal project that is still under wraps, but I hope to make available once complete. Using Backbone has made my client-side code far more organised, and I plan to use it a lot in future.</p>
<p>I’ve also wanted to get my head around a couple of the NoSQL databases. While the relational model is very often applicable, there are plenty of use cases where it isn’t the best choice, especially for simple data, and MongoDB seemed to be an interesting alternative. So, I decided to have a tinker around with Node.js and Backbone today, and wound up building <a href="https://github.com/matthewbdaly/rabbitrabbitrabbit">a real-time guestbook application</a>. Let me know what you think, but please be gentle - this is my first ever Node.js or MongoDB application.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/</guid>
            <pubDate>Sun, 28 Jul 2013 18:20:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My first jQuery plugin]]></title>
            <description><![CDATA[<p>In my day job, I recently finished <a href="https://www.pagepooch.com/">PagePooch</a>, a tool for monitoring web pages for changes in content or prices. It’s a project that I’m immensely proud of, because it was my first big and largely solo project as a developer.</p>
<p>During the development of this, I initially created the user interface with jQuery Mobile, but later on added a desktop interface as well. During development of the desktop interface, I needed to recreate the functionality of the filter available for listviews in jQuery Mobile, and wound up creating a plugin for jQuery to do so.</p>
<p>I recently got permission to open-source this, as I figured the functionality was trivial enough that we couldn’t reasonably sell it, but by making it freely available, we’d maybe get some goodwill, and if we were really lucky, a few bugfixes and/or improvements.</p>
<p>It’s <a href="http://plugins.jquery.com/listfilter/">now available</a> via the jQuery plugin registry. Please let me know what you think, and feel free to fork it and hack on it as you see fit.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2013/04/21/my-first-jquery-plugin/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2013/04/21/my-first-jquery-plugin/</guid>
            <pubDate>Sun, 21 Apr 2013 21:06:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Falling back to local copies of jQuery and jQuery Mobile]]></title>
            <description><![CDATA[<p>I use jQuery Mobile a lot at work, and it’s brilliant. For quickly knocking together a high-quality user interface that works well on mobile devices, it’s unbeatable.</p>
<p>Like many web developers, I favour using a CDN-hosted version of both jQuery and jQuery Mobile, because it makes it more likely that the user won’t have to download the appropriate files as their web browser has already cached them. However, by doing this you run the risk of your site being negatively affected if the CDN provider goes down for any length of time. So, I think it’s a good idea to have a fallback for both jQuery and jQuery Mobile.</p>
<p>I spent a while looking and finally managed to come up with a solution that works well, and borrows heavily from <a href="http://timjames.me/jquery-and-jquery-ui-fallbacks">a similar solution for jQuery UI by Tim James</a>. First of all, load the stylesheets and JavaScript files as usual:</p>
<pre><code class="hljs lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"http://code.jquery.com/mobile/1.1.1/jquery.mobile.structure-1.1.1.min.css"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
</code></pre>
<p>Below this, place the following inside another set of script tags:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> jQuery == <span class="hljs-string">'undefined'</span>)
{
    <span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">"%3Cscript src='http://path-to-jquery.min.js' type='text/javascript'%3E%3C/script%3E"</span>));
}
</code></pre>
<p> If jQuery is not defined, this will write another set of script tags that will load the local copy of jQuery. Now, inside a second set of script tags, place the following code:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> $.mobile == <span class="hljs-string">'undefined'</span>)
{
    <span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">"%3Cscript src='http://path-to-jquery-mobile.min.js' type='text/javascript'%3E%3C/script%3E"</span>));
}

$(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">if</span>($(<span class="hljs-string">'.ui-helper-hidden:first'</span>).is(<span class="hljs-string">':visible'</span>) === <span class="hljs-literal">true</span>){
        $(<span class="hljs-string">'&lt;link rel="stylesheet" type="text/css" href="http://path-to-jquery-mobile-structure.min.css" /&gt;'</span>).appendTo(<span class="hljs-string">'head'</span>);
    }
});
</code></pre>
<p>This won’t work if it’s placed in the same set of script tags as the code above, because it requires that jQuery be working already. The first part works similarly to the jQuery fallback - if jQuery Mobile is not defined, it writes a new script tag. The second relies on an element in the DOM with a class of ui-helper-hidden, which jQuery Mobile would hide by default if it were loaded. If it is visible, the jQuery Mobile structure CSS file has not been loaded and so a link to the local copy of the stylesheet is created.  Of course, this means you have to create this element, so add the following code to the very top of the body, directly under the opening body tag:</p>
<pre><code class="hljs lang-html">&lt;<span class="hljs-keyword">div</span> <span class="hljs-type">class</span>=<span class="hljs-string">"ui-helper-hidden"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;
</code></pre>
<p>If you download copies of the appropriate files and set the paths to them correctly, you should now be able to enjoy all the advantages of using a CDN for hosting jQuery and jQuery Mobile while also having the security of knowing that if the CDN goes down, your application will still work fine. Exactly the same approach will work with jQuery UI as well.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2012/08/13/falling-back-to-local-copies-of-jquery-and-jquery-mobile/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2012/08/13/falling-back-to-local-copies-of-jquery-and-jquery-mobile/</guid>
            <pubDate>Mon, 13 Aug 2012 18:54:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Moving on to Perl]]></title>
            <description><![CDATA[<p>I’m glad to report that today I passed my CIW JavaScript Fundamentals exam with 98%! I was a bit concerned about this as some of the questions on the practice exam were downright wrong (as in the supposedly correct answers were in fact wrong), but thankfully this turned out not to be the case for the actual exam.</p>
<p>Next step is learning Perl. I’m particularly interested to learn more about Perl because it’s something you can get a lot of use out of - it can be used for regular expressions, general Unix scripting and web development, and I’m interested to see how it compares to Python.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2010/06/23/moving-on-to-perl/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2010/06/23/moving-on-to-perl/</guid>
            <pubDate>Wed, 23 Jun 2010 12:41:29 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[PassCrunch]]></title>
            <description><![CDATA[<p>As an exercise to teach myself the basics of regular expressions in JavaScript I decided to implement a small function I called passCrunch to check how secure a password is. I implemented it based on the following principles:</p>
<ul>
<li>First of all, check for a list of well-known easy to break passwords to foil a dictionary attack, and reject it if it’s there.</li>
</ul>
<ul>
<li>Then check that it’s at least 8 characters, and reject it if it’s not.</li>
</ul>
<ul>
<li>Then implement a counter to measure how secure it is by various checks.</li>
</ul>
<ul>
<li>Then add to the rating if it’s more than 12 characters.</li>
</ul>
<ul>
<li>Add to the rating if it contains lowercase letters.</li>
</ul>
<ul>
<li>Add to the rating if it contains uppercase letters.</li>
</ul>
<ul>
<li>Add to the rating if it contains numbers.</li>
</ul>
<ul>
<li>Add to the rating if it contains nonalphanumeric characters.</li>
</ul>
<ul>
<li>Finally, convert the result to a percentage score and return it as an integer.</li>
</ul>
<p>The finished article’s available <a href="http://dl.dropbox.com/u/5031/passcrunch.zip">here</a> as a .zip file if you’d like to use it, or just take a look at the code. Be warned, it’s quite long due to the fact that the list of insecure passwords I used had in excess of 3,000 entries in it! It includes a very simple HTML form which will allow you to submit a function and will return a score for it via an alert() dialogue. Feel free to use it if you wish!</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2010/05/03/passcrunch/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2010/05/03/passcrunch/</guid>
            <pubDate>Mon, 03 May 2010 17:23:39 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Learning JavaScript]]></title>
            <description><![CDATA[<p>Having recently completed the Database Design Methodology part of my course, I’ve now moved onto the next part, which is JavaScript Fundamentals. It’s quite an interesting topic since unlike HTML and CSS, JavaScript is a proper programming language (OK, technically it’s a scripting language, but it’s not merely a markup language like HTML), so I’m quite enjoying it.</p>
<p>However, I’m a little disappointed with the quality of the training materials for the course (CIW JavaScript Fundamentals). It was published in 2003, and recommends the use of Windows ME or Windows 2000, and Internet Explorer 5.5 or later, or Netscape Navigator 4.0 or later. Now, IE5.5 was released in July 2000, making it a few months shy of a decade old, a staggering length of time for the web. Netscape Navigator is even older, dating back to June 1997! Of those two browsers, IE5.5 now has a miniscule market share, and Netscape Navigator isn’t actively developed at all anymore (although Mozilla Firefox is built off the same code base).</p>
<p>Given that in the last few years Internet Explorer has been rapidly losing market share, and developers are doing things with JavaScript that we couldn’t dream of five years ago, you’d hope the course would cover the more interesting and powerful things we can do with JavaScript today, such as AJAX, Greasemonkey scripts or third-party libraries such as jQuery. Instead, I’m stuck with form validation (OK, fair enough, need to learn that), manipulating frames (seriously, frames? When was the last time you even saw a framed website? They’re ugly and a pain to use) and pop-up windows.</p>
<p>Personally I’m more than willing to take up the slack myself by studying independently, but I’m sure there are plenty of people who wouldn’t do so until they reach the workplace. Admittedly, the fundamentals of the language haven’t changed, but there’s plenty of stuff that’s of very little use today that I’ve had to learn when I could be learning something more useful.</p>
<p>So surely these texts are long overdue for a refresh? I would hope that a newer release would cover at least some of the following:</p>
<ul>
<li><p>At least one third-party JavaScript library, such as script.aculo.us or jQuery.</p>
</li>
<li><p>Writing Greasemonkey scripts (which is a very good way of learning more about JavaScript).</p>
</li>
<li><p>Creating a simple AJAX application.</p>
</li>
<li><p>Using a JavaScript debugger such as Firebug.</p>
</li>
</ul>
<p>I really don’t think there’s any excuse for the training materials being that outdated when some of their other CIW training materials are much more current.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2010/05/03/learning-javascript/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2010/05/03/learning-javascript/</guid>
            <pubDate>Mon, 03 May 2010 16:29:30 GMT</pubDate>
        </item>
    </channel>
</rss>