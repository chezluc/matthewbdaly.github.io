<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Matthew Daly's Blog]]></title>
  <link href="http://matthewdaly.co.uk/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://matthewdaly.co.uk/"/>
  <updated>2014-11-09T23:12:55+00:00</updated>
  <id>http://matthewdaly.co.uk/</id>
  <author>
    <name><![CDATA[Matthew Daly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing generator-simple-static-blog]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/"/>
    <updated>2014-10-05T19:56:46+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a big fan of static site generators. I ditched WordPress for Octopress over two years ago because it was free to host on GitHub Pages and much faster, had much better syntax highlighting, and I liked being able to write posts in Vim, and I&rsquo;ve never looked back since.</p>

<p>That said, Octopress is written in Ruby, a language I&rsquo;ve never been that keen on. Ideally I&rsquo;d prefer to use Python or JavaScript, but none of the solutions I&rsquo;ve found have been to my liking. Recently I&rsquo;ve been using Grunt and Yeoman to some extent, and I&rsquo;ve wondered about the idea of creating a Yeoman generator to build a static blogging engine. After discovering <code>grunt-markdown-blog</code>, I took the plunge and have built a simple blog generator called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>.</p>

<p>I&rsquo;ve published it to NPM, so feel free to check it out. It includes code highlighting with the Zenburn colour scheme by default (although highlight.js includes many other themes, so just switch to another one if you want), and it should be easy to edit the templates. I&rsquo;ve also included the ability to deploy automatically to GitHub Pages using Grunt.</p>

<p>I don&rsquo;t anticipate moving over to this from Octopress for the foreseeable future, but it&rsquo;s been an interesting project for the weekend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first Yeoman generator]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/"/>
    <updated>2014-01-25T11:38:40+00:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator</id>
    <content type="html"><![CDATA[<p>At work I use the <a href="http://www.getskeleton.com/">Skeleton boilerplate</a> a lot - my boss, who handles most of the design work, likes it and generally uses it for his designs. I&rsquo;ve also been using <a href="http://gruntjs.com/">Grunt</a> a lot lately, so it was inevitable that I&rsquo;d probably start to look for a <a href="http://yeoman.io/">Yeoman</a> generator for working with it.</p>

<p>There was an existing Yeoman generator for Skeleton, but it didn&rsquo;t really do what I wanted. I wanted something that:</p>

<ul>
<li>Included jQuery and Modernizr</li>
<li>Automatically concatenates and minifies all the JavaScript and CSS</li>
<li>Will automatically rebuild on changes</li>
<li>Includes LiveReload and a development server</li>
<li>Includes automatic deployment via FTP</li>
</ul>


<p>After looking through the documentation for Yeoman, it was actually quick and easy to throw together my own generator and put it up. It&rsquo;s available <a href="https://npmjs.org/package/generator-skellington">here</a>, and the GitHub repository is <a href="https://github.com/matthewbdaly/generator-skellington">here</a>.</p>

<p>Future plans for it include:</p>

<ul>
<li>Adding auto-prefixing for CSS</li>
<li>Removing redundant CSS rules automatically</li>
<li>Possibly, alternate deployment methods</li>
</ul>


<p>Frustratingly, NPM seems to be playing up at present - it&rsquo;s not picking up the README file, and the Yeoman site isn&rsquo;t pulling it in. Any idea why, anyone?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps with Node.js]]></title>
    <link href="http://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/"/>
    <updated>2013-07-28T19:20:00+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>The idea of building an entire web app using nothing but JavaScript has always appealed to me. Despite its undoubted flaws, JavaScript is a powerful language, and chopping and changing between several different programming languages is never great. So I&rsquo;ve always wanted to check out Node.js.</p>

<p>Lately I&rsquo;ve been tinkering with Backbone.js a lot. As a web and mobile app developer, I&rsquo;ve seen the benefit of server-side MVC frameworks firsthand, and I&rsquo;ve also seen how bad a PhoneGap app can get without this kind of structure, so I&rsquo;ve been very eager for a while to get my head around a JavaScript framework. The first one I was able to really grok was Knockout.js, thanks to its wonderful tutorial, but Backbone.js seemed to have better mindshare, and support for routing, so I knuckled down and used it for a large personal project that is still under wraps, but I hope to make available once complete. Using Backbone has made my client-side code far more organised, and I plan to use it a lot in future.</p>

<p>I&rsquo;ve also wanted to get my head around a couple of the NoSQL databases. While the relational model is very often applicable, there are plenty of use cases where it isn&rsquo;t the best choice, especially for simple data, and MongoDB seemed to be an interesting alternative. So, I decided to have a tinker around with Node.js and Backbone today, and wound up building <a href="https://github.com/matthewbdaly/rabbitrabbitrabbit">a real-time guestbook application</a>. Let me know what you think, but please be gentle - this is my first ever Node.js or MongoDB application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first jQuery plugin]]></title>
    <link href="http://matthewdaly.co.uk/blog/2013/04/21/my-first-jquery-plugin/"/>
    <updated>2013-04-21T22:06:00+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2013/04/21/my-first-jquery-plugin</id>
    <content type="html"><![CDATA[<p>In my day job, I recently finished <a href="https://www.pagepooch.com/">PagePooch</a>, a tool for monitoring web pages for changes in content or prices. It&rsquo;s a project that I&rsquo;m immensely proud of, because it was my first big and largely solo project as a developer.</p>

<p>During the development of this, I initially created the user interface with jQuery Mobile, but later on added a desktop interface as well. During development of the desktop interface, I needed to recreate the functionality of the filter available for listviews in jQuery Mobile, and wound up creating a plugin for jQuery to do so.</p>

<p>I recently got permission to open-source this, as I figured the functionality was trivial enough that we couldn&rsquo;t reasonably sell it, but by making it freely available, we&rsquo;d maybe get some goodwill, and if we were really lucky, a few bugfixes and/or improvements.</p>

<p>It&rsquo;s <a href="http://plugins.jquery.com/listfilter/">now available</a> via the jQuery plugin registry. Please let me know what you think, and feel free to fork it and hack on it as you see fit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Falling back to local copies of jQuery and jQuery Mobile]]></title>
    <link href="http://matthewdaly.co.uk/blog/2012/08/13/falling-back-to-local-copies-of-jquery-and-jquery-mobile/"/>
    <updated>2012-08-13T19:54:00+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2012/08/13/falling-back-to-local-copies-of-jquery-and-jquery-mobile</id>
    <content type="html"><![CDATA[<p>I use jQuery Mobile a lot at work, and it&rsquo;s brilliant. For quickly knocking together a high-quality user interface that works well on mobile devices, it&rsquo;s unbeatable.</p>

<p>Like many web developers, I favour using a CDN-hosted version of both jQuery and jQuery Mobile, because it makes it more likely that the user won&rsquo;t have to download the appropriate files as their web browser has already cached them. However, by doing this you run the risk of your site being negatively affected if the CDN provider goes down for any length of time. So, I think it&rsquo;s a good idea to have a fallback for both jQuery and jQuery Mobile.</p>

<p>I spent a while looking and finally managed to come up with a solution that works well, and borrows heavily from <a href="http://timjames.me/jquery-and-jquery-ui-fallbacks">a similar solution for jQuery UI by Tim James</a>. First of all, load the stylesheets and JavaScript files as usual:</p>

<p>&#8220;` html
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile.structure-1.1.1.min.css" /></p>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>


<script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>


<pre><code>
Below this, place the following inside another set of script tags:
</code></pre>

<p>if (typeof jQuery == &lsquo;undefined&rsquo;)
{
    document.write(unescape(&ldquo;%3Cscript src=&lsquo;<a href="http://path-to-jquery.min.js">http://path-to-jquery.min.js</a>&rsquo; type=&lsquo;text/javascript&rsquo;%3E%3C/script%3E&rdquo;));
}
&#8220;`</p>

<p> If jQuery is not defined, this will write another set of script tags that will load the local copy of jQuery. Now, inside a second set of script tags, place the following code:
&#8220;` javascript
if(typeof $.mobile == &lsquo;undefined&rsquo;)
{
    document.write(unescape(&ldquo;%3Cscript src=&lsquo;<a href="http://path-to-jquery-mobile.min.js">http://path-to-jquery-mobile.min.js</a>&rsquo; type=&lsquo;text/javascript&rsquo;%3E%3C/script%3E&rdquo;));
}</p>

<p>$(function() {
    if($(&lsquo;.ui-helper-hidden:first&rsquo;).is(&lsquo;:visible&rsquo;) === true){
        $(&lsquo;<link rel="stylesheet" type="text/css" href="http://path-to-jquery-mobile-structure.min.css" />&rsquo;).appendTo(&lsquo;head&rsquo;);
    }
});
&#8220;`</p>

<p>This won&rsquo;t work if it&rsquo;s placed in the same set of script tags as the code above, because it requires that jQuery be working already. The first part works similarly to the jQuery fallback - if jQuery Mobile is not defined, it writes a new script tag. The second relies on an element in the DOM with a class of ui-helper-hidden, which jQuery Mobile would hide by default if it were loaded. If it is visible, the jQuery Mobile structure CSS file has not been loaded and so a link to the local copy of the stylesheet is created.  Of course, this means you have to create this element, so add the following code to the very top of the body, directly under the opening body tag:</p>

<p>&#8220;` html</p>

<div class="ui-helper-hidden"></div>


<p>&#8220;`</p>

<p>If you download copies of the appropriate files and set the paths to them correctly, you should now be able to enjoy all the advantages of using a CDN for hosting jQuery and jQuery Mobile while also having the security of knowing that if the CDN goes down, your application will still work fine. Exactly the same approach will work with jQuery UI as well.</p>
]]></content>
  </entry>
  
</feed>
