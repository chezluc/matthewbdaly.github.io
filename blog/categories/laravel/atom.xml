<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>laravel | Matthew Daly&apos;s Blog</title>
    <link>http://matthewdaly.co.uk/blog/categories/laravel/</link>
    <updated>2015-12-23T00:01:46Z</updated>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>http://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="http://matthewdaly.co.uk/blog/categories/laravel/"/>
    <subtitle>laravel | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2015</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Setting ETags in Laravel 5]]></title>
        <id>http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/</id>
        <link href="http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/">
        </link>
        <updated>2015-06-14T20:29:52Z</updated>
        <summary type="html"><![CDATA[<p>Although I’d prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, but that was through nothing more than inertia. For some time I’d been planning to switch to Laravel, largely because of the baked-in PHPUnit support, but events conspired against me - one big project that came along had a lot in common with an earlier one, so I forked it rather than starting over.</p>
<p>Recently I built a REST API for a mobile app, and I decided to use that to try out Laravel (if it had been available at the time, I’d have gone for Lumen instead). I was very pleased with the results - I was able to quickly put together the back end I wanted, with good test coverage, and the <code>tinker</code> command in particular was useful in debugging. The end result is fast and efficient, with query caching in place using Memcached to improve response times.</p>
<p>I also implemented a simple middleware to add ETags to HTTP responses and compare them on incoming requests, returning a <code>304 Not Modified</code> status code if they are the same, which is given below:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-preprocessor">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ETagMiddleware</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Implement Etag support</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-variable">$request</span>, Closure <span class="hljs-variable">$next</span>)</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Get response</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-variable">$response</span> = <span class="hljs-variable">$next</span>(<span class="hljs-variable">$request</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// If this was a GET request...</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;isMethod(<span class="hljs-string">'get'</span>)) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-comment">// Generate Etag</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-variable">$etag</span> = md5(<span class="hljs-variable">$response</span>-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-variable">$requestEtag</span> = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">''</span>, <span class="hljs-variable">$request</span>-&gt;getETags());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-comment">// Check to see if Etag has changed</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$requestEtag</span> &amp;&amp; <span class="hljs-variable">$requestEtag</span>[<span class="hljs-number">0</span>] == <span class="hljs-variable">$etag</span>) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                <span class="hljs-variable">$response</span>-&gt;setNotModified();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-comment">// Set Etag</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-variable">$response</span>-&gt;setEtag(<span class="hljs-variable">$etag</span>);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td></table></code></pre>
<p>This is based on <a href="https://www.nickv.codes/blog/etags-in-laravel-4/">a solution for Laravel 4 by Nick Verwymeren</a>, but implemented as Laravel 5 middleware, not a Laravel 4 filter. To use this with Laravel 5, save this as <code>app/Http/Middleware/ETagMiddleware.php</code>. Then add this to the <code>$middleware</code> array in <code>app/Http/Kernel.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>        <span class="hljs-string">'App\Http\Middleware\ETagMiddleware'</span>,</table></code></pre>
<p>It’s quite simple to write this kind of middleware with Laravel, and using something like this is a no-brainer for most web apps considering the bandwidth it will likely save your users.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Running the PHP development server with Laravel]]></title>
        <id>http://matthewdaly.co.uk/blog/2012/12/15/running-the-php-development-server-with-laravel/</id>
        <link href="http://matthewdaly.co.uk/blog/2012/12/15/running-the-php-development-server-with-laravel/">
        </link>
        <updated>2012-12-15T00:26:00Z</updated>
        <summary type="html"><![CDATA[<p>One thing that I’ve really never liked about PHP is the requirement to install a full-blown web server, so I was pleased when PHP 5.4 shipped with a built-in development server. However, it seems like no PHP framework has yet embraced this to the extent that their counterparts for languages like Python have.</p>
<p>I’ve recently decided that CodeIgniter is no longer fulfilling what I need from my main go-to PHP framework, and I’ve been looking at Laravel as a likely replacement. It occurred to me that I could create an Artisan task to run the development server quite easily, and after a little tinkering, I put this together, which worked well:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-preprocessor">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Runserver_Task</span> </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-variable">$arguments</span>)</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    </span>{   </td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-variable">$port</span> = !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$arguments</span>[<span class="hljs-number">0</span>]) ? <span class="hljs-number">8000</span>: <span class="hljs-variable">$arguments</span>[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Running PHP development server on port '</span>.<span class="hljs-variable">$port</span>.<span class="hljs-string">'...'</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        passthru(<span class="hljs-string">'php -S localhost:'</span>.<span class="hljs-variable">$port</span>.<span class="hljs-string">' -t '</span>.getcwd().<span class="hljs-string">'/public'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }   </td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-preprocessor">?&gt;</span></td></table></code></pre>
<p>Once this is in place, you can just run <code>php artisan runserver</code> to run the development server, and hit <kbd>Ctrl-C</kbd> to stop it, giving you an experience much like that with Django. Note this requires PHP 5.4 or greater. You also have the option of specifying a different port eg <code>php artisan runserver 7000</code> for port 7000.</p>
]]></summary>
    </entry>
</feed>