<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: laravel | Matthew Daly's Blog]]></title>
  <link href="http://matthewdaly.co.uk/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://matthewdaly.co.uk/"/>
  <updated>2014-11-09T20:33:50+00:00</updated>
  <id>http://matthewdaly.co.uk/</id>
  <author>
    <name><![CDATA[Matthew Daly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running the PHP development server with Laravel]]></title>
    <link href="http://matthewdaly.co.uk/blog/2012/12/15/running-the-php-development-server-with-laravel/"/>
    <updated>2012-12-15T00:26:00+00:00</updated>
    <id>http://matthewdaly.co.uk/blog/2012/12/15/running-the-php-development-server-with-laravel</id>
    <content type="html"><![CDATA[<p>One thing that I&rsquo;ve really never liked about PHP is the requirement to install a full-blown web server, so I was pleased when PHP 5.4 shipped with a built-in development server. However, it seems like no PHP framework has yet embraced this to the extent that their counterparts for languages like Python have.</p>

<p>I&rsquo;ve recently decided that CodeIgniter is no longer fulfilling what I need from my main go-to PHP framework, and I&rsquo;ve been looking at Laravel as a likely replacement. It occurred to me that I could create an Artisan task to run the development server quite easily, and after a little tinkering, I put this together, which worked well:</p>

<pre><code class="php application/tasks/runserver.php">&lt;?php

class Runserver_Task {

    public function run($arguments)
    {   
        $port = !isset($arguments[0]) ? 8000: $arguments[0];
        echo 'Running PHP development server on port '.$port.'...';
        passthru('php -S localhost:'.$port.' -t '.getcwd().'/public');
    }   
}
?&gt;
</code></pre>

<p>Once this is in place, you can just run <code>php artisan runserver</code> to run the development server, and hit Ctrl-C to stop it, giving you an experience much like that with Django. Note this requires PHP 5.4 or greater. You also have the option of specifying a different port eg <code>php artisan runserver 7000</code> for port 7000.</p>
]]></content>
  </entry>
  
</feed>
