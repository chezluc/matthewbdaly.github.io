<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>laravel | Matthew Daly&apos;s Blog</title>
        <description>laravel | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <link>http://matthewdaly.co.uk/blog/categories/laravel/</link>
        <lastBuildDate>Sun, 04 Sep 2016 17:49:21 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <copyright>Matthew Daly 2016</copyright>
        <generator>Feed for Node.js</generator>
        <item>
            <title><![CDATA[Testing your API documentation with Dredd]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/</guid>
            <pubDate>Mon, 08 Aug 2016 16:05:00 GMT</pubDate>
            <description><![CDATA[<p>Documenting your API is something most developers agree is generally a Good Thing, but it’s a pain in the backside, and somewhat boring to do. What you really need is a tool that allows you to specify the details of your API before you start work, generate documentation from that specification, and test your implementation against that specification.</p>
<p>Fortunately, such a tool exists. The <a href="https://apiblueprint.org/">Blueprint</a> specification allows you to document your API using a Markdown-like syntax. You can then create HTML documentation using a tool like <a href="https://github.com/danielgtaylor/aglio">Aglio</a> or <a href="https://apiary.io/">Apiary</a>, and test it against your implementation using <a href="https://github.com/apiaryio/dredd">Dredd</a>.</p>
<p>In this tutorial we’ll implement a very basic REST API using the Lumen framework. We’ll first specify our API, then we’ll implement routes to match the implementation. In the process, we’ll demonstrate the Blueprint specification in action.</p>
<h2 id="getting-started">Getting started</h2>
<p>Assuming you already have PHP 5.6 or better and Composer installed, run the following command to create our Lumen app skeleton:</p>
<pre><code class="hljs lang-bash singleline"><table>$ composer create-project --prefer-dist laravel/lumen demoapi</table></code></pre>
<p>Once it has finished installing, we’ll also need to add the Dredd hooks:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ <span class="hljs-built_in">cd</span> demoapi</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ composer require ddelnano/dredd-hooks-php</td></table></code></pre>
<p>We need to install Dredd. It’s a Node.js tool, so you’ll need to have that installed. We’ll also install Aglio to generate HTML versions of our documentation:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install -g aglio dredd</table></code></pre>
<p>We also need to create a configuration file for Dredd, which you can do by running <code>dredd init</code>. Or you can just copy the one below:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>dry-<span class="hljs-string">run:</span> <span class="hljs-literal">null</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-string">hookfiles:</span> <span class="hljs-literal">null</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-string">language:</span> php</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-string">sandbox:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-string">server:</span> <span class="hljs-string">'php -S localhost:3000 -t public/'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>server-<span class="hljs-string">wait:</span> <span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-string">init:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-string">custom:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-symbol">  apiaryApiKey:</span> <span class="hljs-string">''</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-string">names:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-string">only:</span> []</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-string">reporter:</span> apiary</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-string">output:</span> []</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-string">header:</span> []</td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-string">sorted:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-string">user:</span> <span class="hljs-literal">null</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>inline-<span class="hljs-string">errors:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-string">details:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-string">method:</span> []</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-string">color:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-string">level:</span> info</td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-string">timestamp:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-string">silent:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-string">path:</span> []</td><tr><td class="linenos" data-pseudo-content="25"></td><td>hooks-worker-<span class="hljs-string">timeout:</span> <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>hooks-worker-connect-<span class="hljs-string">timeout:</span> <span class="hljs-number">1500</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>hooks-worker-connect-<span class="hljs-string">retry:</span> <span class="hljs-number">500</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>hooks-worker-after-connect-<span class="hljs-string">wait:</span> <span class="hljs-number">100</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>hooks-worker-term-<span class="hljs-string">timeout:</span> <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>hooks-worker-term-<span class="hljs-string">retry:</span> <span class="hljs-number">500</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>hooks-worker-handler-<span class="hljs-string">host:</span> localhost</td><tr><td class="linenos" data-pseudo-content="32"></td><td>hooks-worker-handler-<span class="hljs-string">port:</span> <span class="hljs-number">61321</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td><span class="hljs-string">config:</span> ./dredd.yml</td><tr><td class="linenos" data-pseudo-content="34"></td><td><span class="hljs-string">blueprint:</span> apiary.apib</td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-string">endpoint:</span> <span class="hljs-string">'http://localhost:3000'</span></td></table></code></pre>
<p>If you choose to run <code>dredd init</code>, you’ll see prompts for a number of things, including:</p>
<ul>
<li>The server command</li>
<li>The blueprint file name</li>
<li>The endpoint</li>
<li>Any Apiary API key</li>
<li>The language you want to use</li>
</ul>
<p>There are Dredd hooks for many languages, so if you’re planning on building a REST API in a language other than PHP, don’t worry - you can still test it with Dredd, you’ll just get prompted to install different hooks.</p>
<p>Note the <code>hookfiles</code> section, which specifies a hookfile to run during the test in order to set up the API. We’ll touch on that in a moment. Also, note the <code>server</code> setting - this specifies the command we should call to run the server. In this case we’re using the PHP development server.</p>
<p>If you’re using Apiary with your API (which I highly recommend), you can also set the following parameter to ensure that every time you run Dredd, it submits the results to Apiary:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-symbol">custom:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-symbol">  apiaryApiKey:</span> <span class="hljs-params">&lt;API KEY HERE&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-symbol">  apiaryApiName:</span> <span class="hljs-params">&lt;API NAME HERE&gt;</span></td></table></code></pre>
<h2 id="hookfiles">Hookfiles</h2>
<p>As mentioned, the hooks allow you to set up your API. In our case, we’ll need to set up some fixtures for our tests.  Save this file at <code>tests/dredd/hooks/hookfile.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Dredd</span>\<span class="hljs-title">Hooks</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Artisan</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/../../../vendor/autoload.php'</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>$app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/../../../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>$app-&gt;make(\Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>Hooks::beforeAll(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(&amp;$transaction)</span> <span class="hljs-title">use</span> <span class="hljs-params">($app)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>   putenv(<span class="hljs-string">'DB_CONNECTION=sqlite'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>   putenv(<span class="hljs-string">'DB_DATABASE=:memory:'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>   Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>   Artisan::call(<span class="hljs-string">'db:seed'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Hooks::beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(&amp;$transaction)</span> <span class="hljs-title">use</span> <span class="hljs-params">($app)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>   Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>   Artisan::call(<span class="hljs-string">'db:seed'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>});</td></table></code></pre>
<p>Before the tests run, we set the environment up to use an in-memory SQLite database. We also migrate and seed the database, so we’re working with a clean database. As part of this tutorial, we’ll create seed files for the fixtures we need in the database.</p>
<p>This hookfile assumes that the user does not need to be authenticated to communicate with the API. If that’s not the case for your API, you may want to include something like this in your hookfile’s <code>beforeEach</code> callback:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>   $user = App\User::first();</td><tr><td class="linenos" data-pseudo-content="2"></td><td>   $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>   $transaction-&gt;request-&gt;headers-&gt;Authorization = <span class="hljs-string">'Bearer '</span> . $token;</td></table></code></pre>
<p>Here we’re using the <a href="https://github.com/tymondesigns/jwt-auth">JWT Auth</a> package for Laravel to authenticate users of our API, and we need to set the <code>Authorization</code> header to contain a valid JSON web token for the given user. If you’re using a different method, such as HTTP Basic authentication, you’ll need to amend this code to reflect that.</p>
<p>With that done, we need to create the Blueprint file for our API. Recall the following line in <code>dredd.yml</code>:</p>
<pre><code class="hljs lang-yml singleline"><table><span class="hljs-keyword">blueprint: </span>apiary.apib</table></code></pre>
<p>This specifies the path to our documentation. Let’s create that file:</p>
<pre><code class="hljs lang-bash singleline"><table>$ touch apiary.apib</table></code></pre>
<p>Once this is done, you should be able to run Dredd:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>warn: Parser warning <span class="hljs-keyword">in</span> file <span class="hljs-string">'apiary.apib'</span>: (warning code undefined) Could not recognize API description format. Falling back to API Blueprint by default.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>complete: Tests took 619ms</td><tr><td class="linenos" data-pseudo-content="9"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/4aab4155-cfc4-4fda-983a-fea280933ad4</td><tr><td class="linenos" data-pseudo-content="10"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>info: Backend server was killed</td></table></code></pre>
<p>With that done, we’re ready to start work on our API.</p>
<h2 id="our-first-route">Our first route</h2>
<p>Dredd is not a testing tool in the usual sense. Under no circumstances should you use it as a substitute for something like PHPUnit - that’s not what it’s for. It’s for ensuring that your documentation and your implementation remain in sync. However, it’s not entirely impractical to use it as a Behaviour-driven development tool in the same vein as Cucumber or Behat - you can use it to plan out the endpoints your API will have, the requests they accept, and the responses they return, and then verify your implementation against the documentation.</p>
<p>We will only have a single endpoint, in order to keep this tutorial as simple and concise as possible. Our endpoint will expose products for a shop, and will allow users to fetch, create, edit and delete products. Note that we won’t be implementing any kind of authentication, which in production is almost certainly not what you want - we’re just going for the simplest possible implementation.</p>
<p>First, we’ll implement getting a list of products:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>FORMAT: 1A</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-section"># Demo API</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section"># Products [/api/products]</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Product object representation</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-section">## Get products [GET /api/products]</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Get a list of products</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">                "id": 1,</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-code">                "name": "Purple widget",</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-code">                "description": "A purple widget",</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">                "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-code">                "attributes": {</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">                    "colour": "Purple",</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">                    "size": "Small"</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">                }</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>A little explanation is called for. First the <code>FORMAT</code> section denotes the version of the API. Then, the <code># Demo API</code> section denotes the name of the API.</p>
<p>Next, we define the <code>Products</code> endpoint, followed by our first method. Then we define what should be contained in the request, and what the response should look like. Blueprint is a little more complex than that, but that’s sufficient to get us started.</p>
<p>Then we run <code>dredd</code> again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd.yml</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>fail: GET /api/products duration: 61ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>info: Displaying failed tests...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>fail: GET /api/products duration: 61ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>fail: headers: Header <span class="hljs-string">'content-type'</span> has value <span class="hljs-string">'text/html; charset=UTF-8'</span> instead of <span class="hljs-string">'application/json'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>body: Can<span class="hljs-string">'t validate real media type '</span>text/plain<span class="hljs-string">' against expected media type '</span>application/json<span class="hljs-string">'.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>statusCode: Status code is not '</span>200<span class="hljs-string">'</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>request: </td><tr><td class="linenos" data-pseudo-content="15"></td><td>method: GET</td><tr><td class="linenos" data-pseudo-content="16"></td><td>uri: /api/products</td><tr><td class="linenos" data-pseudo-content="17"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="18"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    User-Agent: Dredd/1.5.0 (Linux 4.4.0-31-generic; x64)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>expected: </td><tr><td class="linenos" data-pseudo-content="26"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="27"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="30"></td><td>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>  "id": 1,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  "name": "Purple widget",</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  "description": "A purple widget",</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  "price": 5.99,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  "attributes": {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    "colour": "Purple",</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    "size": "Small"</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="39"></td><td>}</td><tr><td class="linenos" data-pseudo-content="40"></td><td>statusCode: 200</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>actual: </td><tr><td class="linenos" data-pseudo-content="44"></td><td>statusCode: 404</td><tr><td class="linenos" data-pseudo-content="45"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="46"></td><td>    host: localhost:3000</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    connection: close</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    x-powered-by: PHP/7.0.8-0ubuntu0.16.04.2</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cache-control: no-cache</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    date: Mon, 08 Aug 2016 10:30:33 GMT</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    content-type: text/html; charset=UTF-8</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="54"></td><td>&lt;!DOCTYPE html&gt;</td><tr><td class="linenos" data-pseudo-content="55"></td><td>&lt;html&gt;</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    &lt;head&gt;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        &lt;meta name="robots" content="noindex,nofollow" /&gt;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        &lt;style&gt;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>            /* Copyright (c) 2010, Yahoo! Inc. All rights reserved. Code licensed under the BSD License: http://developer.yahoo.com/yui/license.html */</td><tr><td class="linenos" data-pseudo-content="60"></td><td>            html{color:#000;background:#FFF;}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0;}table{border-collapse:collapse;border-spacing:0;}fieldset,img{border:0;}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:normal;}li{list-style:none;}caption,th{text-align:left;}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal;}q:before,q:after{content:'</span><span class="hljs-string">';}abbr,acronym{border:0;font-variant:normal;}sup{vertical-align:text-top;}sub{vertical-align:text-bottom;}input,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit;}input,textarea,select{*font-size:100%;}legend{color:#000;}</td><tr><td class="linenos" data-pseudo-content="61"></td><td>            html { background: #eee; padding: 10px }</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            img { border: 0; }</td><tr><td class="linenos" data-pseudo-content="63"></td><td>            #sf-resetcontent { width:970px; margin:0 auto; }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>                        .sf-reset { font: 11px Verdana, Arial, sans-serif; color: #333 }</td><tr><td class="linenos" data-pseudo-content="65"></td><td>            .sf-reset .clear { clear:both; height:0; font-size:0; line-height:0; }</td><tr><td class="linenos" data-pseudo-content="66"></td><td>            .sf-reset .clear_fix:after { display:block; height:0; clear:both; visibility:hidden; }</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            .sf-reset .clear_fix { display:inline-block; }</td><tr><td class="linenos" data-pseudo-content="68"></td><td>            .sf-reset * html .clear_fix { height:1%; }</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            .sf-reset .clear_fix { display:block; }</td><tr><td class="linenos" data-pseudo-content="70"></td><td>            .sf-reset, .sf-reset .block { margin: auto }</td><tr><td class="linenos" data-pseudo-content="71"></td><td>            .sf-reset abbr { border-bottom: 1px dotted #000; cursor: help; }</td><tr><td class="linenos" data-pseudo-content="72"></td><td>            .sf-reset p { font-size:14px; line-height:20px; color:#868686; padding-bottom:20px }</td><tr><td class="linenos" data-pseudo-content="73"></td><td>            .sf-reset strong { font-weight:bold; }</td><tr><td class="linenos" data-pseudo-content="74"></td><td>            .sf-reset a { color:#6c6159; cursor: default; }</td><tr><td class="linenos" data-pseudo-content="75"></td><td>            .sf-reset a img { border:none; }</td><tr><td class="linenos" data-pseudo-content="76"></td><td>            .sf-reset a:hover { text-decoration:underline; }</td><tr><td class="linenos" data-pseudo-content="77"></td><td>            .sf-reset em { font-style:italic; }</td><tr><td class="linenos" data-pseudo-content="78"></td><td>            .sf-reset h1, .sf-reset h2 { font: 20px Georgia, "Times New Roman", Times, serif }</td><tr><td class="linenos" data-pseudo-content="79"></td><td>            .sf-reset .exception_counter { background-color: #fff; color: #333; padding: 6px; float: left; margin-right: 10px; float: left; display: block; }</td><tr><td class="linenos" data-pseudo-content="80"></td><td>            .sf-reset .exception_title { margin-left: 3em; margin-bottom: 0.7em; display: block; }</td><tr><td class="linenos" data-pseudo-content="81"></td><td>            .sf-reset .exception_message { margin-left: 3em; display: block; }</td><tr><td class="linenos" data-pseudo-content="82"></td><td>            .sf-reset .traces li { font-size:12px; padding: 2px 4px; list-style-type:decimal; margin-left:20px; }</td><tr><td class="linenos" data-pseudo-content="83"></td><td>            .sf-reset .block { background-color:#FFFFFF; padding:10px 28px; margin-bottom:20px;</td><tr><td class="linenos" data-pseudo-content="84"></td><td>                -webkit-border-bottom-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="85"></td><td>                -webkit-border-bottom-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="86"></td><td>                -moz-border-radius-bottomright: 16px;</td><tr><td class="linenos" data-pseudo-content="87"></td><td>                -moz-border-radius-bottomleft: 16px;</td><tr><td class="linenos" data-pseudo-content="88"></td><td>                border-bottom-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="89"></td><td>                border-bottom-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="90"></td><td>                border-bottom:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="91"></td><td>                border-right:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="92"></td><td>                border-left:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="93"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="94"></td><td>            .sf-reset .block_exception { background-color:#ddd; color: #333; padding:20px;</td><tr><td class="linenos" data-pseudo-content="95"></td><td>                -webkit-border-top-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="96"></td><td>                -webkit-border-top-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="97"></td><td>                -moz-border-radius-topleft: 16px;</td><tr><td class="linenos" data-pseudo-content="98"></td><td>                -moz-border-radius-topright: 16px;</td><tr><td class="linenos" data-pseudo-content="99"></td><td>                border-top-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="100"></td><td>                border-top-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="101"></td><td>                border-top:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="102"></td><td>                border-right:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="103"></td><td>                border-left:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="104"></td><td>                overflow: hidden;</td><tr><td class="linenos" data-pseudo-content="105"></td><td>                word-wrap: break-word;</td><tr><td class="linenos" data-pseudo-content="106"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="107"></td><td>            .sf-reset a { background:none; color:#868686; text-decoration:none; }</td><tr><td class="linenos" data-pseudo-content="108"></td><td>            .sf-reset a:hover { background:none; color:#313131; text-decoration:underline; }</td><tr><td class="linenos" data-pseudo-content="109"></td><td>            .sf-reset ol { padding: 10px 0; }</td><tr><td class="linenos" data-pseudo-content="110"></td><td>            .sf-reset h1 { background-color:#FFFFFF; padding: 15px 28px; margin-bottom: 20px;</td><tr><td class="linenos" data-pseudo-content="111"></td><td>                -webkit-border-radius: 10px;</td><tr><td class="linenos" data-pseudo-content="112"></td><td>                -moz-border-radius: 10px;</td><tr><td class="linenos" data-pseudo-content="113"></td><td>                border-radius: 10px;</td><tr><td class="linenos" data-pseudo-content="114"></td><td>                border: 1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="115"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="116"></td><td>        &lt;/style&gt;</td><tr><td class="linenos" data-pseudo-content="117"></td><td>    &lt;/head&gt;</td><tr><td class="linenos" data-pseudo-content="118"></td><td>    &lt;body&gt;</td><tr><td class="linenos" data-pseudo-content="119"></td><td>                    &lt;div id="sf-resetcontent" class="sf-reset"&gt;</td><tr><td class="linenos" data-pseudo-content="120"></td><td>                &lt;h1&gt;Sorry, the page you are looking for could not be found.&lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="121"></td><td>                                        &lt;h2 class="block_exception clear_fix"&gt;</td><tr><td class="linenos" data-pseudo-content="122"></td><td>                            &lt;span class="exception_counter"&gt;1/1&lt;/span&gt;</td><tr><td class="linenos" data-pseudo-content="123"></td><td>                            &lt;span class="exception_title"&gt;&lt;abbr title="Symfony\Component\HttpKernel\Exception\NotFoundHttpException"&gt;NotFoundHttpException&lt;/abbr&gt; in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 450" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 450&lt;/a&gt;:&lt;/span&gt;</td><tr><td class="linenos" data-pseudo-content="124"></td><td>                            &lt;span class="exception_message"&gt;&lt;/span&gt;</td><tr><td class="linenos" data-pseudo-content="125"></td><td>                        &lt;/h2&gt;</td><tr><td class="linenos" data-pseudo-content="126"></td><td>                        &lt;div class="block"&gt;</td><tr><td class="linenos" data-pseudo-content="127"></td><td>                            &lt;ol class="traces list_exception"&gt;</td><tr><td class="linenos" data-pseudo-content="128"></td><td>       &lt;li&gt; in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 450" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 450&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="129"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;handleDispatcherResponse(&lt;em&gt;array&lt;/em&gt;('</span>0<span class="hljs-string">')) in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 387" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 387&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="130"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;Laravel\Lumen\Concerns\{closure}() in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 636" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 636&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="131"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;sendThroughPipeline(&lt;em&gt;array&lt;/em&gt;(), &lt;em&gt;object&lt;/em&gt;(&lt;abbr title="Closure"&gt;Closure&lt;/abbr&gt;)) in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 389" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 389&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="132"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;dispatch(&lt;em&gt;null&lt;/em&gt;) in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 334" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 334&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="133"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;run() in &lt;a title="/home/matthew/Projects/demoapi/public/index.php line 28" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;index.php line 28&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="134"></td><td>    &lt;/ol&gt;</td><tr><td class="linenos" data-pseudo-content="135"></td><td>&lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="136"></td><td></td><tr><td class="linenos" data-pseudo-content="137"></td><td>            &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="138"></td><td>    &lt;/body&gt;</td><tr><td class="linenos" data-pseudo-content="139"></td><td>&lt;/html&gt;</td><tr><td class="linenos" data-pseudo-content="140"></td><td></td><tr><td class="linenos" data-pseudo-content="141"></td><td></td><tr><td class="linenos" data-pseudo-content="142"></td><td></td><tr><td class="linenos" data-pseudo-content="143"></td><td>complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total</td><tr><td class="linenos" data-pseudo-content="144"></td><td>complete: Tests took 533ms</td><tr><td class="linenos" data-pseudo-content="145"></td><td>[Mon Aug  8 11:30:33 2016] 127.0.0.1:44472 [404]: /api/products</td><tr><td class="linenos" data-pseudo-content="146"></td><td>complete: See results in Apiary at: https://app.apiary.io/public/tests/run/0153d5bf-6efa-4fdb-b02a-246ddd75cb14</td><tr><td class="linenos" data-pseudo-content="147"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="148"></td><td>info: Backend server was killed</span></td></table></code></pre>
<p>Our route is returning HTML, not JSON, and is also raising a 404 error. So let’s fix that. First, let’s create our <code>Product</code> model at <code>app/Product.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>Next, we need to create a migration for the database tables for the <code>Product</code> model:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan make:migration create_product_table</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Created Migration: 2016_08_08_105737_create_product_table</td></table></code></pre>
<p>This will create a new file under <code>database/migrations</code>. Open this file and paste in the following:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateProductTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Create products table</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'products'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;text(<span class="hljs-string">'description'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            $table-&gt;float(<span class="hljs-string">'price'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            $table-&gt;json(<span class="hljs-string">'attributes'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment">// Drop products table</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        Schema::drop(<span class="hljs-string">'products'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}</td></table></code></pre>
<p>Note that we create fields that map to the attributes our API exposes. Also, note the use of the JSON field. In databases that support it, like PostgreSQL, it uses the native JSON support, otherwise it works like a text field. Next, we run the migration to create the table:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrated: 2016_08_08_105737_create_product_table</td></table></code></pre>
<p>With our model done, we now need to ensure that when Dredd runs, there is some data in the database, so we’ll create a seeder file at <code>database/seeds/ProductSeeder</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Add product</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::table(<span class="hljs-string">'products'</span>)-&gt;insert([</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Purple widget'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'description'</span> =&gt; <span class="hljs-string">'A purple widget'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'price'</span> =&gt; <span class="hljs-number">5.99</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'attributes'</span> =&gt; json_encode([</td><tr><td class="linenos" data-pseudo-content="21"></td><td>                <span class="hljs-string">'colour'</span> =&gt; <span class="hljs-string">'purple'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>                <span class="hljs-string">'size'</span> =&gt; <span class="hljs-string">'Small'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            ]),</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>You also need to amend <code>database/seeds/DatabaseSeeder</code> to call it:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'ProductSeeder'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>I found I also had to run the following command to find the new seeder:</p>
<pre><code class="hljs lang-bash singleline"><table>$ composer dump-autoload</table></code></pre>
<p>Then, call the seeder:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan db:seed</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Seeded: ProductSeeder</td></table></code></pre>
<p>We also need to enable Eloquent, as Lumen disables it by default. Uncomment the following line in <code>bootstrap/app.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;withEloquent();</table></code></pre>
<p>With that done, we can move onto the controller.</p>
<h2 id="creating-the-controller">Creating the controller</h2>
<p>Create the following file at <code>app/Http/Controllers/ProductController</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Product</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">private</span> $product;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Product $product)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;product = $product;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// Get all products</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        $products = <span class="hljs-keyword">$this</span>-&gt;product-&gt;all();</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($products, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td></table></code></pre>
<p>This implements the <code>index</code> route. Note that we inject the <code>Product</code> instance into the controller. Next, we need to hook it up in <code>app/Http/routes.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">/*</td><tr><td class="linenos" data-pseudo-content="4"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>| Application Routes</td><tr><td class="linenos" data-pseudo-content="6"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>|</td><tr><td class="linenos" data-pseudo-content="8"></td><td>| Here is where you can register all of the routes for an application.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>| It is a breeze. Simply tell Lumen the URIs it should respond to</td><tr><td class="linenos" data-pseudo-content="10"></td><td>| and give it the Closure to call when that URI is requested.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>|</td><tr><td class="linenos" data-pseudo-content="12"></td><td>*/</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>$app-&gt;get(<span class="hljs-string">'/api/products'</span>, <span class="hljs-string">'ProductController@index'</span>);</td></table></code></pre>
<p>Then we run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>[Mon Aug  8 12:36:28 2016] 127.0.0.1:45466 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="8"></td><td>fail: GET /api/products duration: 131ms</td><tr><td class="linenos" data-pseudo-content="9"></td><td>info: Displaying failed tests...</td><tr><td class="linenos" data-pseudo-content="10"></td><td>fail: GET /api/products duration: 131ms</td><tr><td class="linenos" data-pseudo-content="11"></td><td>fail: body: At <span class="hljs-string">''</span> Invalid <span class="hljs-built_in">type</span>: array (expected object)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>request: </td><tr><td class="linenos" data-pseudo-content="14"></td><td>method: GET</td><tr><td class="linenos" data-pseudo-content="15"></td><td>uri: /api/products</td><tr><td class="linenos" data-pseudo-content="16"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    User-Agent: Dredd/1.5.0 (Linux 4.4.0-31-generic; x64)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>expected: </td><tr><td class="linenos" data-pseudo-content="25"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="26"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="29"></td><td>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  <span class="hljs-string">"id"</span>: 1,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  <span class="hljs-string">"description"</span>: <span class="hljs-string">"A purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  <span class="hljs-string">"price"</span>: 5.99,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  <span class="hljs-string">"attributes"</span>: {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-string">"colour"</span>: <span class="hljs-string">"Purple"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-string">"size"</span>: <span class="hljs-string">"Small"</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td><tr><td class="linenos" data-pseudo-content="39"></td><td>statusCode: 200</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>actual:</td><tr><td class="linenos" data-pseudo-content="43"></td><td>statusCode: 200</td><tr><td class="linenos" data-pseudo-content="44"></td><td>headers:</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    host: localhost:3000</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    connection: close</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    x-powered-by: PHP/7.0.8-0ubuntu0.16.04.2</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    cache-control: no-cache</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    content-type: application/json</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    date: Mon, 08 Aug 2016 11:36:28 GMT</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>body:</td><tr><td class="linenos" data-pseudo-content="53"></td><td>[ </td><tr><td class="linenos" data-pseudo-content="54"></td><td>  { </td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-string">"id"</span>: 1,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-string">"name"</span>: <span class="hljs-string">"Purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-string">"description"</span>: <span class="hljs-string">"A purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-string">"price"</span>: <span class="hljs-string">"5.99"</span>,</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-string">"attributes"</span>: <span class="hljs-string">"{\"colour\":\"purple\",\"size\":\"Small\"}"</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>    <span class="hljs-string">"created_at"</span>: <span class="hljs-string">"2016-08-08 11:32:24"</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-string">"updated_at"</span>: <span class="hljs-string">"2016-08-08 11:32:24"</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="63"></td><td>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td>complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total</td><tr><td class="linenos" data-pseudo-content="68"></td><td>complete: Tests took 582ms</td><tr><td class="linenos" data-pseudo-content="69"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/83da2d67-c846-4356<span class="hljs-_">-a</span>3b8-4d7c32daa7ef</td><tr><td class="linenos" data-pseudo-content="70"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="71"></td><td>info: Backend server was killed</td></table></code></pre>
<p>Whoops, looks like we made a mistake here. The index route returns an array of objects, but we’re looking for a single object in the blueprint. We also need to wrap our attributes in quotes, and add the <code>created_at</code> and <code>updated_at</code> attributes. Let’s fix the blueprint:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>FORMAT: 1A</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-section"># Demo API</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section"># Products [/api/products]</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Product object representation</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-section">## Get products [GET /api/products]</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Get a list of products</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">            [</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">                {</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-code">                    "id": 1,</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-code">                    "name": "Purple widget",</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">                    "description": "A purple widget",</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-code">                    "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">                    "attributes": "{\"colour\": \"Purple\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">                    "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">                    "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">                }</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-code">            ]</span></td></table></code></pre>
<p>Let’s run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 65ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>complete: 1 passing, 0 failing, 0 errors, 0 skipped, 1 total</td><tr><td class="linenos" data-pseudo-content="9"></td><td>complete: Tests took 501ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 13:05:54 2016] 127.0.0.1:45618 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="11"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/7c23d4ae-aff2-4daf-bbdf-9fd76<span class="hljs-built_in">fc</span>58b97</td><tr><td class="linenos" data-pseudo-content="12"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="13"></td><td>info: Backend server was killed</td></table></code></pre>
<p>And now we can see that our test passes.</p>
<p>Next, we’ll implement a test for fetching a single product:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Get a product [GET /api/products/1]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Get a single product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">              "id": 1,</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-code">              "name": "Purple widget",</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-code">              "description": "A purple widget",</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-code">              "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">              "attributes": "{\"colour\": \"Purple\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-code">              "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">              "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>Note the same basic format - we define the URL that should be fetched, the content of the request, and the response, including the status code.</p>
<p>Let’s hook up our route in <code>app/Http/routes.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;get(<span class="hljs-string">'/api/products/{id}'</span>, <span class="hljs-string">'ProductController@show'</span>);</table></code></pre>
<p>And add the <code>show()</code> method to the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Get individual product</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $product = <span class="hljs-keyword">$this</span>-&gt;product-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($product, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td></table></code></pre>
<p>Running Dredd again should show this method has been implemented:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 66ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 13:21:31 2016] 127.0.0.1:45750 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 17ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>complete: 2 passing, 0 failing, 0 errors, 0 skipped, 2 total</td><tr><td class="linenos" data-pseudo-content="11"></td><td>complete: Tests took 521ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Mon Aug  8 13:21:31 2016] 127.0.0.1:45752 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="13"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/bb6d03c3-8fad-477c-b140-af6e0cc8b96c</td><tr><td class="linenos" data-pseudo-content="14"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="15"></td><td>info: Backend server was killed</td></table></code></pre>
<p>That’s our read support done. We just need to add support for <code>POST</code>, <code>PATCH</code> and <code>DELETE</code> methods.</p>
<h2 id="our-remaining-methods">Our remaining methods</h2>
<p>Let’s set up the test for our <code>POST</code> method first:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Create products [POST /api/products]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Create a new product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>name (string) - The product name</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-bullet">+ </span>description (string) - The product description</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>price (float) - The product price</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-bullet">+ </span>attributes (string) - The product attributes</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-code">                "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">                "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-code">                "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">                "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">            }</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-bullet">+ </span>Response 201 (application/json)</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">              "id": 2,</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">              "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">              "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-code">              "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-code">              "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-code">              "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-code">              "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>Note we specify the format of the parameters that should be passed through, and that our status code should be 201, not 200 - this is arguably a more correct choice for creating a resource. Be careful of the whitespace - I had some odd issues with it. Next, we add our route:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;post(<span class="hljs-string">'/api/products'</span>, <span class="hljs-string">'ProductController@store'</span>);</table></code></pre>
<p>And the <code>store()</code> method in the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'description'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'price'</span> =&gt; <span class="hljs-string">'required|numeric'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'attributes'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Create product</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $product = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;product;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        $product-&gt;name = $request-&gt;input(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $product-&gt;description = $request-&gt;input(<span class="hljs-string">'description'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $product-&gt;price = $request-&gt;input(<span class="hljs-string">'price'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        $product-&gt;attributes = $request-&gt;input(<span class="hljs-string">'attributes'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">// Save product</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $product-&gt;save();</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($product, <span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td></table></code></pre>
<p>Note that we validate the attributes, to ensure they are correct and that the required ones exist. Running Dredd again should show the route is now in place:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 69ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 15:17:35 2016] 127.0.0.1:47316 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 18ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 15:17:35 2016] 127.0.0.1:47318 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="11"></td><td>pass: POST /api/products duration: 42ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>complete: 3 passing, 0 failing, 0 errors, 0 skipped, 3 total</td><tr><td class="linenos" data-pseudo-content="13"></td><td>complete: Tests took 575ms</td><tr><td class="linenos" data-pseudo-content="14"></td><td>[Mon Aug  8 15:17:35 2016] 127.0.0.1:47322 [201]: /api/products</td><tr><td class="linenos" data-pseudo-content="15"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/cb5971cf-180d-47ed-abf4-002378941134</td><tr><td class="linenos" data-pseudo-content="16"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="17"></td><td>info: Backend server was killed</td></table></code></pre>
<p>Next, we’ll implement <code>PATCH</code>. This targets an existing object, but accepts parameters in the same way as <code>POST</code>:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Update existing products [PATCH /api/products/1]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Update an existing product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>name (string) - The product name</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-bullet">+ </span>description (string) - The product description</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>price (float) - The product price</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-bullet">+ </span>attributes (string) - The product attributes</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-code">                "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">                "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-code">                "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">                "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">            }</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">              "id": 2,</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">              "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">              "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-code">              "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-code">              "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-code">              "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-code">              "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>We add our new route:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;patch(<span class="hljs-string">'/api/products/{id}'</span>, <span class="hljs-string">'ProductController@update'</span>);</table></code></pre>
<p>And our <code>update()</code> method:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'description'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'price'</span> =&gt; <span class="hljs-string">'numeric'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'attributes'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Get product</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $product = <span class="hljs-keyword">$this</span>-&gt;product-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Update it</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'name'</span>)) {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            $product-&gt;name = $request-&gt;input(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'description'</span>)) {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $product-&gt;description = $request-&gt;input(<span class="hljs-string">'description'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'price'</span>)) {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $product-&gt;price = $request-&gt;input(<span class="hljs-string">'price'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'attributes'</span>)) {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            $product-&gt;attributes = $request-&gt;input(<span class="hljs-string">'attributes'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment">// Save product</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        $product-&gt;save();</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($product, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td></table></code></pre>
<p>Here we can’t guarantee every parameter will exist, so we test for it. We run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 74ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47464 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 19ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47466 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="11"></td><td>pass: POST /api/products duration: 36ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47470 [201]: /api/products</td><tr><td class="linenos" data-pseudo-content="13"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47474 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="14"></td><td>pass: PATCH /api/products/1 duration: 34ms</td><tr><td class="linenos" data-pseudo-content="15"></td><td>complete: 4 passing, 0 failing, 0 errors, 0 skipped, 4 total</td><tr><td class="linenos" data-pseudo-content="16"></td><td>complete: Tests took 2579ms</td><tr><td class="linenos" data-pseudo-content="17"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/eae98644-44ad-432f-90<span class="hljs-built_in">fc</span>-5f73fa674f66</td><tr><td class="linenos" data-pseudo-content="18"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="19"></td><td>info: Backend server was killed</td></table></code></pre>
<p>One last method to implement - the <code>DELETE</code> method. Add this to <code>apiary.apib</code>:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Delete products [DELETE /api/products/1]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Delete an existing product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">                "status": "Deleted"</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>Next, add the route:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;delete(<span class="hljs-string">'/api/products/{id}'</span>, <span class="hljs-string">'ProductController@destroy'</span>);</table></code></pre>
<p>And the <code>destroy()</code> method in the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Get product</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $product = <span class="hljs-keyword">$this</span>-&gt;product-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Delete product</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $product-&gt;delete();</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Return empty response</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'status'</span> =&gt; <span class="hljs-string">'deleted'</span>], <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td></table></code></pre>
<p>And let’s run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 66ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48664 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 19ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48666 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="11"></td><td>pass: POST /api/products duration: 45ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48670 [201]: /api/products</td><tr><td class="linenos" data-pseudo-content="13"></td><td>pass: PATCH /api/products/1 duration: 24ms</td><tr><td class="linenos" data-pseudo-content="14"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48674 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="15"></td><td>pass: DELETE /api/products/1 duration: 27ms</td><tr><td class="linenos" data-pseudo-content="16"></td><td>complete: 5 passing, 0 failing, 0 errors, 0 skipped, 5 total</td><tr><td class="linenos" data-pseudo-content="17"></td><td>complete: Tests took 713ms</td><tr><td class="linenos" data-pseudo-content="18"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48678 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="19"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/a3e11d59-1dad-404b-9319-61ca5c0fcd15</td><tr><td class="linenos" data-pseudo-content="20"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="21"></td><td>info: Backend server was killed</td></table></code></pre>
<p>Our REST API is now finished.</p>
<h2 id="generating-html-version-of-your-documentation">Generating HTML version of your documentation</h2>
<p>Now we have finished documenting and implementing our API, we need to generate an HTML version of it. One way is to use <code>aglio</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ aglio -i apiary.apib -o output.html</table></code></pre>
<p>This will write the documentation to <code>output.html</code>. There’s also scope for choosing different themes if you wish.</p>
<p>You can also use Apiary, which has the advantage that they’ll create a stub of your API so that if you need to work with the API before it’s finished being implemented, you can use that as a placeholder.</p>
<h2 id="summary">Summary</h2>
<p>The Blueprint language is a useful way of documenting your API, and makes it simple enough that it’s hard to weasel out of doing so. It’s worth taking a closer look at <a href="https://apiblueprint.org/">the specification</a> as it goes into quite a lot of detail. It’s hard to ensure that the documentation and implementation remain in sync, so it’s a good idea to use Dredd to ensure that any changes you make don’t invalidate the documentation. With Aglio or Apiary, you can easily convert the documentation into a more attractive format.</p>
<p>You’ll find the source code for this demo API <a href="https://github.com/matthewbdaly/demoapi">on Github</a>, so if you get stuck, take a look at that. I did have a fair few issues with whitespace, so bear that in mind if it behaves oddly. I’ve also noticed a few quirks, such as Dredd not working properly if a route returns a 204 response code, which is why I couldn’t use that for deleting - this <a href="https://github.com/apiaryio/dredd/issues/468">appears to be a bug</a>, but hopefully this will be resolved soon.</p>
<p>I’ll say it again, Dredd is not a substitute for proper unit tests, and under no circumstances should you use it as one. However, it can be very useful as a way to plan how your API will work and ensure that it complies with that plan, and to ensure that the implementation and documentation don’t diverge. Used as part of your normal continuous integration setup, Dredd can make sure that any divergence between the docs and the application is picked up on and fixed as quickly as possible, while also making writing documentation less onerous.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Broadcasting events with Laravel and Socket.io]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</guid>
            <pubDate>Sat, 14 May 2016 20:00:00 GMT</pubDate>
            <description><![CDATA[<p>PHP frameworks like Laravel aren’t really set up to handle real-time events properly, so if you want to build a real-time app, you’re generally better off with another platform, such as Node.js. However, if that only forms a small part of your application, you may still prefer to work with PHP. Fortunately it’s fairly straightforward to hand off the real-time aspects of your application to a dedicated microservice written using Node.js and still use Laravel to handle the rest of the functionality.</p>
<p>Here I’ll show you how I built a Laravel app that uses a separate Node.js script to handle sending real-time updates to the user.</p>
<h2 id="events-in-laravel">Events in Laravel</h2>
<p>In this case, I was building a REST API to serve as the back end for a Phonegap app that allowed users to message each other. The API includes an endpoint that allows users to create and fetch messages. Now, in theory, we could just repeatedly poll the endpoint for new messages, but that would be inefficient. What we needed was a way to notify users of new messages in real time, which seemed like the perfect opportunity to use Socket.io.</p>
<p>Laravel comes with a simple, but robust system that allows you to broadcast events to a Redis server. Another service can then listen for these events and carry out jobs on them, and there is no reason why this service has to be written in PHP. This makes it easy to decouple your application into smaller parts. In essence the functionality we wanted was as follows:</p>
<ul>
<li>Receive message</li>
<li>Push message to Redis</li>
<li>Have a separate service pick up message on Redis</li>
<li>Push message to clients</li>
</ul>
<p>First off, we need to define an event in our Laravel app. You can create a boilerplate with the following Artisan command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:event NewMessage</table></code></pre>
<p>This will create the file <code>app/Events/NewMessage.php</code>. You can then customise this as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">Event</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Message</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">ShouldBroadcast</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcast</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> $message;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     * Create a new event instance.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Message $message)</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Get message</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;message = $message;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     * Get the channels the event should be broadcast on.</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     * <span class="hljs-doctag">@return</span> array</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> [<span class="hljs-string">'room_'</span>.<span class="hljs-keyword">$this</span>-&gt;message-&gt;room_id];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}</td></table></code></pre>
<p>This particular event is a class that accepts a single argument, which is an instance of the <code>Message</code> model. This model includes an attribute of <code>room_id</code> that is used to determine which room the message is posted to - note that this is returned in the <code>broadcastOn()</code> method.</p>
<p>When we want to trigger our new event, we can do so as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">NewMessage</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Event::fire(<span class="hljs-keyword">new</span> NewMessage($message));</td></table></code></pre>
<p>Here, <code>$message</code> is the saved Eloquent object containing the message. Note the use of <code>SerializesModels</code> - this means that the Eloquent model is serialized into JSON when broadcasting the event.</p>
<p>We also need to make sure Redis is set as our broadcast driver. Ensure the Composer package <code>predis/predis</code> is installed, and set <code>BROADCAST_DRIVER=redis</code> in your <code>.env</code> file. Also, please note that I found that setting <code>QUEUE_DRIVER=redis</code> in <code>.env</code> as well broke the broadcasting system, so it looks like you can’t use Redis as both a queue and a broadcasting system unless you set up multiple connections.</p>
<p>Next, we need another server-side script to handle processing the received events and pushing the messages out. In my case, this was complicated by the fact that we were using HTTPS, courtesy of Let’s Encrypt. I installed the required dependencies for the Node.js script as follows:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install socket.io socket.io-client ioredis --save-dev</table></code></pre>
<p>Here’s an example Node.js script for processing the events:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> pkey = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/privkey.pem'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> pcert = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/fullchain.pem'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> options = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  key: pkey,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  cert: pcert</td><tr><td class="linenos" data-pseudo-content="8"></td><td>};</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">'https'</span>).createServer(options);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)(app);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ioredis'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> redis = <span class="hljs-keyword">new</span> Redis();</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>app.listen(<span class="hljs-number">9000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Server is running!'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handler</span>(<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    res.setHeader(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    res.writeHead(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    res.end(<span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>}</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>io.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>redis.psubscribe(<span class="hljs-string">'*'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, count</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>});</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>redis.on(<span class="hljs-string">'pmessage'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">subscribed, channel, message</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    message = <span class="hljs-built_in">JSON</span>.parse(message);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Channel is '</span> + channel + <span class="hljs-string">' and message is '</span> + message);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    io.emit(channel, message.data);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>});</td></table></code></pre>
<p>Note we use the <code>https</code> module instead of the <code>http</code> one, and we pass the key and certificate as options to the server. This server runs on port 9000, but feel free to move it to any arbitrary port you wish. In production, you’d normally use something like Supervisor or systemd to run a script like this as a service.</p>
<p>Next, we need a client-side script to connect to the Socket.io instance and handle any incoming messages. Here’s a very basic example that just dumps them to the browser console:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.location.protocol + <span class="hljs-string">'//'</span> + <span class="hljs-built_in">window</span>.location.hostname;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> socket = io(url, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-string">'secure'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-string">'reconnect'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-string">'reconnection delay'</span>: <span class="hljs-number">500</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-string">'max reconnection attempts'</span>: <span class="hljs-number">10</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>});</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> chosenEvent = <span class="hljs-string">'room_'</span> + room.id;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>socket.on(chosenEvent, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-built_in">console</span>.log(data);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>});</td></table></code></pre>
<p>Finally, we need to configure our web server. I’m using Nginx with PHP-FPM and PHP 7, and this is how I configured it:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">upstream</span> websocket {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9000</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">listen</span>         <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">add_header</span> X-Frame-Options SAMEORIGIN;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">gzip_proxied</span> any;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-attribute">gzip_types</span> text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml-rss text/javascript text/js application/json;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-attribute">fastcgi_index</span> index.php;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.well-known</span> {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-attribute">allow</span> all;</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-attribute">location</span> /socket.io {</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">"upgrade"</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-attribute">proxy_pass</span> https://websocket;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>}</td></table></code></pre>
<p>Any requests to <code>/socket.io</code> are proxied to port 9000, where our chat handling script is listening. Note that we allow the HTTPS connection to be upgraded to a WebSocket one.</p>
<p>Once that’s done, you just need to restart your PHP application and Nginx, and start running your chat script, and everything should be working fine. If it isn’t, the command <code>redis-cli monitor</code> is invaluable in verifying that the event is being published correctly.</p>
<h2 id="summary">Summary</h2>
<p>Getting this all working together did take quite a bit of trial and error, but that was mostly a matter of configuration. Actually implementing this is pretty straightforward, and it’s an easy way to add some basic real-time functionality to an existing Laravel application.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Writing faster Laravel tests]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/04/04/writing-faster-laravel-tests/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/04/04/writing-faster-laravel-tests/</guid>
            <pubDate>Mon, 04 Apr 2016 19:55:15 GMT</pubDate>
            <description><![CDATA[<p>Nowadays, Laravel tends to be my go-to PHP framework, to the point that we use it as our default framework at work. A big part of this is that Laravel is relatively easy to test, making practicing TDD a lot easier.</p>
<p>Out of the box running Laravel tests can be quite slow, which is a big issue - if your test suite takes several minutes to run, that’s a huge disruption. Also, Laravel doesn’t create a dedicated test database - instead it runs the tests against the same database you’re using normally, which is almost always not what you want. I’ll show you how to set up a dedicated test database, and how to use an in-memory SQLite database for faster tests. This results in cleaner and easier-to-maintain tests, since you can be sure the test database is restored to a clean state at the end of every test.</p>
<h2 id="setup">Setup</h2>
<p>Our first step is to make sure that when a new test begins, the following should happen:</p>
<ul>
<li>We should create a new transaction</li>
<li>We should empty and migrate our database</li>
</ul>
<p>Then, at the end of each test:</p>
<ul>
<li>We should roll back our transaction to restore the database to its prior state</li>
</ul>
<p>To do so, we can create custom <code>setUp()</code> and <code>tearDown()</code> methods for our base <code>TestCase</code> class. Save this in <code>tests/TestCase.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="6"></td><td>     * The base URL to use while testing the application.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">protected</span> $baseUrl = <span class="hljs-string">'http://localhost'</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * Creates the application.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Foundation\Application</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createApplication</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        $app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> $app;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">parent</span>::setUp();</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::beginTransaction();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        DB::rollBack();</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">parent</span>::tearDown();</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>}</td></table></code></pre>
<p>That takes care of building up and tearing down our database for each test.</p>
<p>EDIT: Turns out there’s actually a much easier way of doing this already included in Laravel. Just import and add either <code>use DatabaseMigrations;</code> or <code>use DatabaseTransactions;</code> to the <code>TestCase</code> class. The first will roll back the database and migrate it again after each test, while the second wraps each test in a transaction.</p>
<h2 id="using-an-in-memory-sqlite-database-for-testing-purposes">Using an in-memory SQLite database for testing purposes</h2>
<p>It’s not always practical to do this, especially if you rely on database features in PostgreSQL that aren’t available in SQLite, but if it is, it’s probably worth using an in-memory SQLite database for your tests. If you want to do so, here’s some example settings you might want to use in <code>phpunit.xml</code>:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"APP_ENV"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testing"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CACHE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"array"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_CONNECTION"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlite"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_DATABASE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">":memory:"</span>/&gt;</span></td></table></code></pre>
<p>This can result in a very significant speed boost.</p>
<p>I would still recommend that you test against your production database, but this can be easily handed off to a continuous integration server such as Jenkins, since that way it won’t disrupt your workflow. </p>
<p>During TDD, you’ll typically run your tests several times for any change you make, so if they’re too slow it can have a disastrous effect on your productivity. But with a few simple changes like this, you can ensure your tests run as quickly as possible. This approach should also be viable for Lumen apps.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[My experience using PHP 7 in production]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/03/18/my-experience-using-php-7-in-production/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/03/18/my-experience-using-php-7-in-production/</guid>
            <pubDate>Fri, 18 Mar 2016 19:42:37 GMT</pubDate>
            <description><![CDATA[<p>In the last couple of weeks I’ve been working on a PHP web app. Nothing unusual there, except this was the first time we’d used PHP 7 in production. We discussed the possibility a while back, and eventually decided that for certain projects we’d use PHP 7 without waiting another year or so (or maybe longer) for a version of Debian stable with it by default. I wanted to talk about how our experience has been using it in production.</p>
<h2 id="background">Background</h2>
<p>We’ve never really had a fixed stack that we work with at work before until recently - it was largely based on personal preferences and experience. For many jobs, especially content-based sites, we generally used WordPress - it has its issues, but it does fine for a lot of work. For more complex websites, I tended to use CodeIgniter because I’d learned it during my previous job and knew it fairly well, but I was not terribly happy with it - it’s a bit too basic and simplistic, as well as being somewhat behind the times, and I only really kept using it through inertia. For mobile app backends, I tended to use Django, partly for the admin interface, and partly because Django REST Framework makes it easy to build a REST API quickly and easily in a way that wasn’t viable with CodeIgniter.</p>
<p>This state of affairs couldn’t really continue. I love Python and Django, but I was the only one at work who had ever used Python, so in the event I got hit by a bus there would have been no-one who could have taken over from me. As for CodeIgniter, it was clearly falling further and further behind the curve, and I was sick of it and looking to replace it. Ideally we needed a PHP framework as both myself and my colleague knew it.</p>
<p>I’d also been playing around with Laravel on a few little projects, but I didn’t get the chance to use it for a new web app until autumn last year. Around the same time, we hired a third developer, who also had some experience using Laravel. In addition, the presence of Lumen meant that we could use that for smaller apps or services that were too small to use Laravel. We therefore decided to adopt Laravel as our default framework - in future we’d only use something else if there was a particular justification for it. I was rather sad to have to abandon Django for work, but pleased to have something more modern than CodeIgniter for PHP projects.</p>
<p>This also enabled us to standardize our new server builds. Over the last year or so I’ve been pushing to automate what we can of our server setup using Ansible. We now have two standard stacks that we plan to use for future projects. One is for WordPress sites and consists of:</p>
<ul>
<li>Debian stable</li>
<li>Apache</li>
<li>MySQL</li>
<li>PHP 5.6</li>
<li>Memcached</li>
<li>Varnish</li>
</ul>
<p>The other is for Laravel or Lumen web apps or APIs and consists of:</p>
<ul>
<li>Debian stable</li>
<li>Nginx</li>
<li>PHP 7</li>
<li>PostgreSQL</li>
<li>Redis</li>
</ul>
<p>It took some time to decide what we wanted to settle on, and indeed we had a mobile app backend that went up around Christmas time that we wrote with Laravel, but deployed to Apache with PHP 5.6 because when we first pushed it up PHP 7 wasn’t out yet. However, given that Laravel 5 already had good support for PHP 7, we decided we’d consider it for the next app. I tend to use PostgreSQL rather than MySQL these days because it has a lot of nifty features like JSON fields and full text search, and using an ORM minimises the learning curve in switching, and Redis is much more versatile than Memcached, so they were vital parts of our stack.</p>
<h2 id="our-first-php-7-app">Our first PHP 7 app</h2>
<p>As it happened, we had a Laravel app in the pipeline that was ideal. In the summer of last year, we were hired to make an existing site responsive. In the end, it turned out not to be viable - it was built with Zend Framework, which none of us had ever touched before, and the front end used a lot of custom widgets and fields tied together with RequireJS. The whole thing was rather unwieldy and extremely difficult to maintain and develop. In the end, we decided to tell the client it wasn’t worth developing further and offer to rewrite the whole thing from scratch using Laravel and AngularJS, with Browserify used to handle JavaScript modules - the basic idea was quite simple, it was just the implementation that was overly complex, and AngularJS made it possible to do the same kind of thing with a fraction of the code, so a rewrite in only a few weeks was perfectly viable.</p>
<p>I’d already built a simple prototype to demonstrate the viability of a from-scratch rewrite using Laravel and Angular, and once the client had agreed to the rewrite, we were able to work on this further. As the web app was going to be particularly useful on mobile devices, I wanted to ensure that the performance was as good as I could possibly make it. By the time we were looking at deploying it to a server, three months had passed since PHP 7 had been first released, and I figured that was long enough for the most serious issues to be resolved, and we could definitely do with the very significant speed boost we’d get from using PHP 7 for this app.</p>
<p>I use Jenkins to run my unit tests, and so I decided to try installing PHP 7 on the Jenkins server and using that to run the tests. The results were encouraging - nothing broke as a result of the switch. So we therefore decided that when we deployed it, we’d try it with PHP 7, and if it failed, we’d switch to PHP 5.6.</p>
<p>I opted to use FPM with Nginx rather than Apache and <code>mod_php</code> as since the web app was purely custom we didn’t really need things like <code>.htaccess</code>, and while the amount of static content was limited, Nginx might well perform better for this use case. The results are fairly encouraging - the document for the home page is typically being returned in under 40ms, with the uncached homepage taking around 1.5s in total to load, despite having to load several external fonts. In its current state, the web app scores a solid 93% on YSlow, which I’m very happy with. I don’t know how much of that is down to using PHP 7, but choosing to use it was definitely a good call. I have had absolutely zero issues with it during that time.</p>
<h2 id="summary">Summary</h2>
<p>As always, you should bear in mind that your needs may not be the same as mine, and it could well be that you need something that PHP 7 doesn’t yet provide. However, I have had a very good experience with PHP 7 in production. I may have had to jump through a few more hoops to get it up and running, and there may be some level of risk associated with using PHP 7 when it’s only been available for three months, but it’s more than justified by the speed we get from our web app. Using a configuration management system like Ansible means that even if you do have to jump through some extra hoops, it’s relatively easy to automate that process so it’s not as much of an issue as you might think. For me, using PHP 7 with a Laravel app has worked as well as I could have possibly hoped.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Setting ETags in Laravel 5]]></title>
            <link>http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/</link>
            <guid>http://matthewdaly.co.uk/blog/2015/06/14/setting-etags-in-laravel-5/</guid>
            <pubDate>Sun, 14 Jun 2015 20:29:52 GMT</pubDate>
            <description><![CDATA[<p>Although I’d prefer to use Python or Node.js, there are some times when circumstances dictate that I need to use PHP for a project at work. In the past, I used CodeIgniter, but that was through nothing more than inertia. For some time I’d been planning to switch to Laravel, largely because of the baked-in PHPUnit support, but events conspired against me - one big project that came along had a lot in common with an earlier one, so I forked it rather than starting over.</p>
<p>Recently I built a REST API for a mobile app, and I decided to use that to try out Laravel (if it had been available at the time, I’d have gone for Lumen instead). I was very pleased with the results - I was able to quickly put together the back end I wanted, with good test coverage, and the <code>tinker</code> command in particular was useful in debugging. The end result is fast and efficient, with query caching in place using Memcached to improve response times.</p>
<p>I also implemented a simple middleware to add ETags to HTTP responses and compare them on incoming requests, returning a <code>304 Not Modified</code> status code if they are the same, which is given below:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ETagMiddleware</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Implement Etag support</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Get response</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $response = $next($request);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// If this was a GET request...</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;isMethod(<span class="hljs-string">'get'</span>)) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-comment">// Generate Etag</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $etag = md5($response-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            $requestEtag = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">''</span>, $request-&gt;getETags());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-comment">// Check to see if Etag has changed</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-keyword">if</span>($requestEtag &amp;&amp; $requestEtag[<span class="hljs-number">0</span>] == $etag) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                $response-&gt;setNotModified();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-comment">// Set Etag</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>            $response-&gt;setEtag($etag);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">return</span> $response;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td></table></code></pre>
<p>This is based on <a href="https://www.nickv.codes/blog/etags-in-laravel-4/">a solution for Laravel 4 by Nick Verwymeren</a>, but implemented as Laravel 5 middleware, not a Laravel 4 filter. To use this with Laravel 5, save this as <code>app/Http/Middleware/ETagMiddleware.php</code>. Then add this to the <code>$middleware</code> array in <code>app/Http/Kernel.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>        <span class="hljs-string">'App\Http\Middleware\ETagMiddleware'</span>,</table></code></pre>
<p>It’s quite simple to write this kind of middleware with Laravel, and using something like this is a no-brainer for most web apps considering the bandwidth it will likely save your users.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Running the PHP development server with Laravel]]></title>
            <link>http://matthewdaly.co.uk/blog/2012/12/15/running-the-php-development-server-with-laravel/</link>
            <guid>http://matthewdaly.co.uk/blog/2012/12/15/running-the-php-development-server-with-laravel/</guid>
            <pubDate>Sat, 15 Dec 2012 00:26:00 GMT</pubDate>
            <description><![CDATA[<p>One thing that I’ve really never liked about PHP is the requirement to install a full-blown web server, so I was pleased when PHP 5.4 shipped with a built-in development server. However, it seems like no PHP framework has yet embraced this to the extent that their counterparts for languages like Python have.</p>
<p>I’ve recently decided that CodeIgniter is no longer fulfilling what I need from my main go-to PHP framework, and I’ve been looking at Laravel as a likely replacement. It occurred to me that I could create an Artisan task to run the development server quite easily, and after a little tinkering, I put this together, which worked well:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Runserver_Task</span> </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">($arguments)</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    </span>{   </td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $port = !<span class="hljs-keyword">isset</span>($arguments[<span class="hljs-number">0</span>]) ? <span class="hljs-number">8000</span>: $arguments[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Running PHP development server on port '</span>.$port.<span class="hljs-string">'...'</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        passthru(<span class="hljs-string">'php -S localhost:'</span>.$port.<span class="hljs-string">' -t '</span>.getcwd().<span class="hljs-string">'/public'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }   </td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-meta">?&gt;</span></td></table></code></pre>
<p>Once this is in place, you can just run <code>php artisan runserver</code> to run the development server, and hit <kbd>Ctrl-C</kbd> to stop it, giving you an experience much like that with Django. Note this requires PHP 5.4 or greater. You also have the option of specifying a different port eg <code>php artisan runserver 7000</code> for port 7000.</p>
]]></description>
            <content:encoded/>
        </item>
    </channel>
</rss>