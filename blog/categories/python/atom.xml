<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Matthew Daly's Blog]]></title>
  <link href="http://matthewdaly.co.uk/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://matthewdaly.co.uk/"/>
  <updated>2014-12-31T18:04:51+00:00</updated>
  <id>http://matthewdaly.co.uk/</id>
  <author>
    <name><![CDATA[Matthew Daly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Django web server setup]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/"/>
    <updated>2014-10-19T19:52:28+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t really part of my Django tutorial series (that has now definitely concluded!), but I thought I&rsquo;d share the setup I generally use for deploying Django applications, partly for my own reference, and partly because it is quite complex, and those readers who don&rsquo;t wish to deploy to Heroku may want some guidance on how to deploy their new blogs to a VPS.</p>

<h2>Operating system</h2>

<p>This isn&rsquo;t actually that much of a big deal, but while I prefer Ubuntu on desktops, I generally use Debian Stable on servers, since it&rsquo;s fanatically stable.</p>

<h2>Database server</h2>

<p>For my first commercial Django app, I used MySQL. However, South had one or two issues with MySQL, and I figured that since using an ORM and migrations meant that I wouldn&rsquo;t need to write much SQL anyway, I might as well jump to PostgreSQL for the Django app I&rsquo;m currently in the process of deploying at work. So far I haven&rsquo;t had any problems with it.</p>

<h2>Web server</h2>

<p>It&rsquo;s customary to use two web servers with Django. One handles the static content, and reverse proxies everything else to a different port, where another web server serves the dynamic content.</p>

<p>For serving the static files, I use Nginx - it&rsquo;s generally considered to be faster than Apache for this use case. Here&rsquo;s a typical Nginx config file:</p>

<pre><code class="json /etc/nginx/sites-available/default">server {
    listen 80;
    server_name example.com;
    client_max_body_size 50M;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location /static {
        root /var/www/mysite;
    }

    location /media {
        root /var/www/mysite;
    }

    location / {
        proxy_pass http://127.0.0.1:8000;
    }
}
</code></pre>

<p>For the application server, I use Gunicorn. You can install this with <code>pip install gunicorn</code>, then add it to <code>INSTALLED_APPS</code>. Then add the following config file to the root of your project:</p>

<pre><code class="python gunicorn.conf.py">bind = "127.0.0.1:8000"
logfile = "/var/log/gunicorn.log"
loglevel = "debug"
workers = 3
</code></pre>

<p>You should normally set the number of workers to 2 times the number of cores on your machine, plus one.</p>

<p>In order to keep Gunicorn running, I use Supervisor. As the installation commands will depend on your OS, I won&rsquo;t give details here - your package manager of choice should have a suitable package available. Here&rsquo;s a typical Supervisor config file I might use for running Gunicorn for a Django app:</p>

<pre><code class="bash /etc/supervisor/conf.d/mysite-supervisor.conf">[program:mysite]
command=/var/www/mysite/venv/bin/gunicorn myapp.wsgi:application --workers=3
directory=/var/www/mysite/
user=nobody
autostart=true
autorestart=true
</code></pre>

<p>Once that&rsquo;s in place, you can easily add the new app:</p>

<pre><code class="bash">sudo supervisorctl reread
sudo supervisorctl update
</code></pre>

<p>Then to start it:</p>

<pre><code class="bash">sudo supervisorctl start mysite
</code></pre>

<p>Or stop it with:</p>

<pre><code class="bash">sudo supervisorctl stop mysite
</code></pre>

<p>Or restart it:</p>

<pre><code class="bash">sudo supervisorctl restart mysite
</code></pre>

<h2>Celery</h2>

<p>So far, both of the web apps I&rsquo;ve built professionally have been ones where it made sense to use <a href="http://www.celeryproject.org/">Celery</a> for some tasks. For the uninitiated, Celery lets you pass a task to a queue to be handled, rather than handling it within the context of the same HTTP request. This offers the following advantages:</p>

<ul>
<li>The user doesn&rsquo;t need to wait for the task to be completed before getting a response, improving performance</li>
<li>It&rsquo;s more robust, since if the task fails, it can be automatically retried</li>
<li>The task queue can be moved to another server if desired, making it easier to scale</li>
<li>Scheduling tasks</li>
</ul>


<p>I&rsquo;ve used it in cases where I needed to send an email or a push notification, since these don&rsquo;t have to be done within the context of the same HTTP request, but need to be reliable.</p>

<p>I generally use RabbitMQ as my message queue. I&rsquo;ll leave setting this up as an exercise for the reader since it&rsquo;s covered pretty well in the Celery documentation, but like with Gunicorn, I use Supervisor to run the Celery worker. Here&rsquo;s a typical config file:</p>

<pre><code class="bash /etc/supervisor/conf.d/celery-supervisor.conf">[program:celeryd]
command=/var/www/mysite/venv/bin/python manage.py celery worker
directory=/var/www/mysite/
user=nobody
autostart=true
autorestart=true
</code></pre>

<p>Then start it up:</p>

<pre><code class="bash">sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start celeryd
</code></pre>

<p>I make no claims about how good this setup is, but it works well for me. I haven&rsquo;t yet had the occasion to deploy a Django app to anywhere other than Heroku that really benefited from caching, so I haven&rsquo;t got any tips to share about that, but if I were building a content-driven web app, I would use Memcached since it&rsquo;s well-supported.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 9]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/"/>
    <updated>2014-09-28T20:51:02+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9</id>
    <content type="html"><![CDATA[<p>Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I&rsquo;d like to show you how to upgrade to it.</p>

<p>The biggest change is that Django 1.7 introduces its own migration system, which means South is now surplus to requirements. We therefore need to switch from South to Django&rsquo;s native migrations. Fortunately, this is fairly straightforward.</p>

<p>First of all, activate your virtualenv:</p>

<pre><code class="bash">virtualenv venv
</code></pre>

<p>Then make sure your migrations are up to date:</p>

<pre><code class="bash">python manage.py syncdb
python manage.py migrate
</code></pre>

<p>Then, upgrade your Django version and uninstall South:</p>

<pre><code class="bash">pip install Django --upgrade
pip uninstall South
pip freeze &gt; requirements.txt
</code></pre>

<p>Next, remove South from <code>INSTALLED_APPS</code> in <code>django_tutorial_blog_ng/settings.py</code>.</p>

<p>You now need to delete all of the numbered migration files in <code>blogengine/migrations/</code>, and the relevant <code>.pyc</code> files, but NOT the directory or the <code>__init__.py</code> file. You can do so with this command on Linux or OS X:</p>

<pre><code class="bash">rm blogengine/migrations/00*
</code></pre>

<p>Next, we recreate our migrations with the following command:</p>

<pre><code class="bash">$ python manage.py makemigrations
Migrations for 'blogengine':
  0001_initial.py:
    - Create model Category
    - Create model Post
    - Create model Tag
    - Add field tags to post
</code></pre>

<p>Then we run the migrations:</p>

<pre><code class="bash">$ python manage.py migrate
Operations to perform:
  Synchronize unmigrated apps: sitemaps, django_jenkins, debug_toolbar
  Apply all migrations: sessions, admin, sites, flatpages, contenttypes, auth, blogengine
Synchronizing apps without migrations:
  Creating tables...
  Installing custom SQL...
  Installing indexes...
Running migrations:
  Applying contenttypes.0001_initial... FAKED
  Applying auth.0001_initial... FAKED
  Applying admin.0001_initial... FAKED
  Applying sites.0001_initial... FAKED
  Applying blogengine.0001_initial... FAKED
  Applying flatpages.0001_initial... FAKED
  Applying sessions.0001_initial... FAKED
</code></pre>

<p>Don&rsquo;t worry too much if the output doesn&rsquo;t look exactly the same as this - as long as it works, that&rsquo;s the main thing.</p>

<p>Let&rsquo;s run our test suite to ensure it works:</p>

<pre><code class="bash">$ python manage.py jenkins
Creating test database for alias 'default'...
....FF.F.FFFFFF..............
======================================================================
FAIL: test_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 385, in test_create_post
    self.assertTrue('added successfully' in response.content)
AssertionError: False is not true

======================================================================
FAIL: test_create_post_without_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 417, in test_create_post_without_tag
    self.assertTrue('added successfully' in response.content)
AssertionError: False is not true

======================================================================
FAIL: test_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 278, in test_delete_category
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_delete_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 346, in test_delete_tag
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 255, in test_edit_category
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 447, in test_edit_post
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_edit_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 323, in test_edit_tag
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_login (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 183, in test_login
    self.assertEquals(response.status_code, 200)
AssertionError: 302 != 200

======================================================================
FAIL: test_logout (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 214, in test_logout
    self.assertEquals(response.status_code, 200)
AssertionError: 302 != 200

----------------------------------------------------------------------
Ran 29 tests in 7.383s

FAILED (failures=9)
Destroying test database for alias 'default'...
</code></pre>

<p>We have an issue here. A load of the tests for the admin interface now fail. If we now try running the dev server, we see this error:</p>

<pre><code class="bash">$ python manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).
September 28, 2014 - 20:16:47
Django version 1.7, using settings 'django_tutorial_blog_ng.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
Unhandled exception in thread started by &lt;function wrapper at 0x1024a5ed8&gt;
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/autoreload.py", line 222, in wrapper
    fn(*args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py", line 132, in inner_run
    handler = self.get_handler(*args, **options)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/runserver.py", line 25, in get_handler
    handler = super(Command, self).get_handler(*args, **options)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py", line 48, in get_handler
    return get_internal_wsgi_application()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py", line 66, in get_internal_wsgi_application
    sys.exc_info()[2])
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py", line 56, in get_internal_wsgi_application
    return import_string(app_path)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/module_loading.py", line 26, in import_string
    module = import_module(module_path)
  File "/usr/local/Cellar/python/2.7.8_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py", line 37, in import_module
    __import__(name)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/django_tutorial_blog_ng/wsgi.py", line 14, in &lt;module&gt;
    from dj_static import Cling
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/dj_static.py", line 7, in &lt;module&gt;
    from django.core.handlers.base import get_path_info
django.core.exceptions.ImproperlyConfigured: WSGI application 'django_tutorial_blog_ng.wsgi.application' could not be loaded; Error importing module: 'cannot import name get_path_info'
</code></pre>

<p>Fortunately, the error above is easy to fix by upgrading <code>dj_static</code>:</p>

<pre><code class="bash">pip install dj_static --upgrade
pip freeze &gt; requirements.txt
</code></pre>

<p>That resolves the error in serving static files, but not the error with the admin. If you run the dev server, you&rsquo;ll be able to see that the admin actually works fine. The problem is caused by the test client not following redirects in the admin. We can easily run just the admin tests with the following command:</p>

<pre><code class="bash">$ python manage.py test blogengine.tests.AdminTest
Creating test database for alias 'default'...
.FF.F.FFFFFF
======================================================================
FAIL: test_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 385, in test_create_post
    self.assertTrue('added successfully' in response.content)
AssertionError: False is not true

======================================================================
FAIL: test_create_post_without_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 417, in test_create_post_without_tag
    self.assertTrue('added successfully' in response.content)
AssertionError: False is not true

======================================================================
FAIL: test_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 278, in test_delete_category
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_delete_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 346, in test_delete_tag
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 255, in test_edit_category
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 447, in test_edit_post
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_edit_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 323, in test_edit_tag
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

======================================================================
FAIL: test_login (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 183, in test_login
    self.assertEquals(response.status_code, 200)
AssertionError: 302 != 200

======================================================================
FAIL: test_logout (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 214, in test_logout
    self.assertEquals(response.status_code, 200)
AssertionError: 302 != 200

----------------------------------------------------------------------
Ran 12 tests in 3.283s

FAILED (failures=9)
Destroying test database for alias 'default'...
</code></pre>

<p>Let&rsquo;s commit our changes so far first:</p>

<pre><code class="bash">git add django_tutorial_blog_ng/ requirements.txt blogengine/
git commit -m 'Upgraded to Django 1.7'
</code></pre>

<p>Now let&rsquo;s fix our tests. Here&rsquo;s the amended version of the <code>AdminTest</code> class:</p>

<pre><code class="python blogengine/tests.py">class AdminTest(BaseAcceptanceTest):
    fixtures = ['users.json']

    def test_login(self):
        # Get login page
        response = self.client.get('/admin/', follow=True)

        # Check response code
        self.assertEquals(response.status_code, 200)

        # Check 'Log in' in response
        self.assertTrue('Log in' in response.content)

        # Log the user in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/')
        self.assertEquals(response.status_code, 200)

        # Check 'Log out' in response
        self.assertTrue('Log out' in response.content)

    def test_logout(self):
        # Log in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/')
        self.assertEquals(response.status_code, 200)

        # Check 'Log out' in response
        self.assertTrue('Log out' in response.content)

        # Log out
        self.client.logout()

        # Check response code
        response = self.client.get('/admin/', follow=True)
        self.assertEquals(response.status_code, 200)

        # Check 'Log in' in response
        self.assertTrue('Log in' in response.content)

    def test_create_category(self):
        # Log in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/blogengine/category/add/')
        self.assertEquals(response.status_code, 200)

        # Create the new category
        response = self.client.post('/admin/blogengine/category/add/', {
            'name': 'python',
            'description': 'The Python programming language'
            },
            follow=True
        )
        self.assertEquals(response.status_code, 200)

        # Check added successfully
        self.assertTrue('added successfully' in response.content)

        # Check new category now in database
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), 1)

    def test_edit_category(self):
        # Create the category
        category = CategoryFactory()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Edit the category
        response = self.client.post('/admin/blogengine/category/' + str(category.pk) + '/', {
            'name': 'perl',
            'description': 'The Perl programming language'
            }, follow=True)
        self.assertEquals(response.status_code, 200)

        # Check changed successfully
        self.assertTrue('changed successfully' in response.content)

        # Check category amended
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), 1)
        only_category = all_categories[0]
        self.assertEquals(only_category.name, 'perl')
        self.assertEquals(only_category.description, 'The Perl programming language')

    def test_delete_category(self):
        # Create the category
        category = CategoryFactory()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Delete the category
        response = self.client.post('/admin/blogengine/category/' + str(category.pk) + '/delete/', {
            'post': 'yes'
        }, follow=True)
        self.assertEquals(response.status_code, 200)

        # Check deleted successfully
        self.assertTrue('deleted successfully' in response.content)

        # Check category deleted
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), 0)

    def test_create_tag(self):
        # Log in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/blogengine/tag/add/')
        self.assertEquals(response.status_code, 200)

        # Create the new tag
        response = self.client.post('/admin/blogengine/tag/add/', {
            'name': 'python',
            'description': 'The Python programming language'
            },
            follow=True
        )
        self.assertEquals(response.status_code, 200)

        # Check added successfully
        self.assertTrue('added successfully' in response.content)

        # Check new tag now in database
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), 1)

    def test_edit_tag(self):
        # Create the tag
        tag = TagFactory()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Edit the tag
        response = self.client.post('/admin/blogengine/tag/' + str(tag.pk) + '/', {
            'name': 'perl',
            'description': 'The Perl programming language'
            }, follow=True)
        self.assertEquals(response.status_code, 200)

        # Check changed successfully
        self.assertTrue('changed successfully' in response.content)

        # Check tag amended
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), 1)
        only_tag = all_tags[0]
        self.assertEquals(only_tag.name, 'perl')
        self.assertEquals(only_tag.description, 'The Perl programming language')

    def test_delete_tag(self):
        # Create the tag
        tag = TagFactory()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Delete the tag
        response = self.client.post('/admin/blogengine/tag/' + str(tag.pk) + '/delete/', {
            'post': 'yes'
        }, follow=True)
        self.assertEquals(response.status_code, 200)

        # Check deleted successfully
        self.assertTrue('deleted successfully' in response.content)

        # Check tag deleted
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), 0)

    def test_create_post(self):
        # Create the category
        category = CategoryFactory()

        # Create the tag
        tag = TagFactory()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/blogengine/post/add/')
        self.assertEquals(response.status_code, 200)

        # Create the new post
        response = self.client.post('/admin/blogengine/post/add/', {
            'title': 'My first post',
            'text': 'This is my first post',
            'pub_date_0': '2013-12-28',
            'pub_date_1': '22:00:04',
            'slug': 'my-first-post',
            'site': '1',
            'category': str(category.pk),
            'tags': str(tag.pk)
        },
        follow=True
        )
        self.assertEquals(response.status_code, 200)

        # Check added successfully
        self.assertTrue('added successfully' in response.content)

        # Check new post now in database
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)

    def test_create_post_without_tag(self):
        # Create the category
        category = CategoryFactory()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/blogengine/post/add/')
        self.assertEquals(response.status_code, 200)

        # Create the new post
        response = self.client.post('/admin/blogengine/post/add/', {
            'title': 'My first post',
            'text': 'This is my first post',
            'pub_date_0': '2013-12-28',
            'pub_date_1': '22:00:04',
            'slug': 'my-first-post',
            'site': '1',
            'category': str(category.pk)
        },
        follow=True
        )
        self.assertEquals(response.status_code, 200)

        # Check added successfully
        self.assertTrue('added successfully' in response.content)

        # Check new post now in database
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)

    def test_edit_post(self):
        # Create the post
        post = PostFactory()

        # Create the category
        category = CategoryFactory()

        # Create the tag
        tag = TagFactory()
        post.tags.add(tag)

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Edit the post
        response = self.client.post('/admin/blogengine/post/' + str(post.pk) + '/', {
            'title': 'My second post',
            'text': 'This is my second blog post',
            'pub_date_0': '2013-12-28',
            'pub_date_1': '22:00:04',
            'slug': 'my-second-post',
            'site': '1',
            'category': str(category.pk),
            'tags': str(tag.pk)
        },
        follow=True
        )
        self.assertEquals(response.status_code, 200)

        # Check changed successfully
        self.assertTrue('changed successfully' in response.content)

        # Check post amended
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)
        only_post = all_posts[0]
        self.assertEquals(only_post.title, 'My second post')
        self.assertEquals(only_post.text, 'This is my second blog post')

    def test_delete_post(self):
        # Create the post
        post = PostFactory()

        # Create the tag
        tag = TagFactory()
        post.tags.add(tag)

        # Check new post saved
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Delete the post
        response = self.client.post('/admin/blogengine/post/' + str(post.pk) + '/delete/', {
            'post': 'yes'
        }, follow=True)
        self.assertEquals(response.status_code, 200)

        # Check deleted successfully
        self.assertTrue('deleted successfully' in response.content)

        # Check post deleted
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 0)
</code></pre>

<p>There are two main issues here. The first is that when we try to edit or delete an existing item, or refer to it when creating something else, we can no longer rely on the number representing the primary key being set to 1. So we need to specifically obtain this, rather than hard-coding it to 1. Therefore, whenever we pass through a number to represent an item (with the exception of the site, but including tags, categories and posts), we need to instead fetch its primary key and return it. So, above where we try to delete a post, we replace <code>1</code> with <code>str(post.pk)</code>. This will solve a lot of the problems. As there&rsquo;s a lot of them, I won&rsquo;t go through each one, but you can see the entire class above for reference, and if you&rsquo;ve followed along so far, you shouldn&rsquo;t have any problems.</p>

<p>The other issue we need to fix is the login and logout tests. We simply add <code>follow=True</code> to these to ensure that the test client follows the redirects.</p>

<p>Let&rsquo;s run our tests to make sure they pass:</p>

<pre><code class="bash">$ python manage.py jenkins
Creating test database for alias 'default'...
.............................
----------------------------------------------------------------------
Ran 29 tests in 8.210s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>With that done, you can commit your changes:</p>

<pre><code class="bash">git add blogengine/tests.py
git commit -m 'Fixed broken tests'
</code></pre>

<p>Don&rsquo;t forget to deploy your changes:</p>

<pre><code class="bash">fab deploy
</code></pre>

<p>Our blog has now been happily migrated over to Django 1.7!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 8]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/"/>
    <updated>2014-08-31T22:00:00+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8</id>
    <content type="html"><![CDATA[<p>Hello again! In our final instalment, we&rsquo;ll wrap up our blog by:</p>

<ul>
<li>Implementing a sitemap</li>
<li>Optimising and tidying up the site</li>
<li>Creating a Fabric task for easier deployment</li>
</ul>


<p>I&rsquo;ll also cover development tools and practices that can make using Django easier. But first there&rsquo;s a few housekeeping tasks that need doing&hellip;</p>

<p>Don&rsquo;t forget to activate your virtualenv - you should know how to do this off by heart by now!</p>

<h1>Upgrading Django</h1>

<p>At the time of writing, Django 1.7 is due any day now, but it&rsquo;s not out yet so I won&rsquo;t cover it. The biggest change is the addition of a built-in migration system, but switching from South to this is well-documented. When Django 1.7 comes out, it shouldn&rsquo;t be difficult to upgrade to it - because we have good test coverage, we shouldn&rsquo;t have much trouble catching errors.</p>

<p>However, Django 1.6.6 was recently released, and we need to upgrade to it. Just enter the following command to upgrade:</p>

<pre><code class="bash">pip install Django --upgrade
</code></pre>

<p>Then add it to your <code>requirements.txt</code>:</p>

<pre><code class="bash">pip freeze &gt; requirements.txt
</code></pre>

<p>Then commit your changes:</p>

<pre><code class="bash">git add requirements.txt
git commit -m 'Upgraded Django version'
</code></pre>

<h1>Implementing a sitemap</h1>

<p>Creating a sitemap for your blog is a good idea - it can be submitted to search engines, so that they can easily find your content. With Django, it&rsquo;s pretty straightforward too.</p>

<p>First, let&rsquo;s create a test for our sitemap. Add the following code at the end of <code>tests.py</code>:</p>

<pre><code class="python blogengine/tests.py">class SitemapTest(BaseAcceptanceTest):
    def test_sitemap(self):
        # Create a post
        post = PostFactory()

        # Create a flat page
        page = FlatPageFactory()

        # Get sitemap
        response = self.client.get('/sitemap.xml')
        self.assertEquals(response.status_code, 200)

        # Check post is present in sitemap
        self.assertTrue('my-first-post' in response.content)

        # Check page is present in sitemap
        self.assertTrue('/about/' in response.content)
</code></pre>

<p>Run it, and you should see the test fail:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
...........................F
======================================================================
FAIL: test_sitemap (blogengine.tests.SitemapTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 847, in test_sitemap
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

----------------------------------------------------------------------
Ran 28 tests in 6.873s

FAILED (failures=1)
Destroying test database for alias 'default'...
</code></pre>

<p>Now, let&rsquo;s implement our sitemap. The sitemap application comes with Django, and needs to be activated in your settings file, under <code>INSTALLED_APPS</code>:</p>

<pre><code class="python django_blog_tutorial_ng/settings.py">    'django.contrib.sitemaps',
</code></pre>

<p>Next, let&rsquo;s think about what content we want to include in the sitemap. We want to index our flat pages and our blog posts, so our sitemap should reflect that. Create a new file at <code>blogengine/sitemap.py</code> and enter the following text:</p>

<pre><code class="python blogengine/sitemap.py">from django.contrib.sitemaps import Sitemap
from django.contrib.flatpages.models import FlatPage
from blogengine.models import Post

class PostSitemap(Sitemap):
    changefreq = "always"
    priority = 0.5

    def items(self):
        return Post.objects.all()

    def lastmod(self, obj):
        return obj.pub_date


class FlatpageSitemap(Sitemap):
    changefreq = "always"
    priority = 0.5

    def items(self):
        return FlatPage.objects.all()
</code></pre>

<p>We define two sitemaps, one for all the posts, and the other for all the flat pages. Note that this works in a very similar way to the syndication framework.</p>

<p>Next, we amend our URLs. Add the following text after the existing imports in your URL file:</p>

<pre><code class="python blogengine/urls.py">from django.contrib.sitemaps.views import sitemap
from blogengine.sitemap import PostSitemap, FlatpageSitemap

# Define sitemaps
sitemaps = {
    'posts': PostSitemap,
    'pages': FlatpageSitemap
}
</code></pre>

<p>Then add the following after the existing routes:</p>

<pre><code class="python blogengine/urls.py">    # Sitemap
    url(r'^sitemap\.xml$', sitemap, {'sitemaps': sitemaps},
            name='django.contrib.sitemaps.views.sitemap'),
</code></pre>

<p>Here we define what sitemaps we&rsquo;re going to use, and we define a URL for them. It&rsquo;s pretty straightforward to use.</p>

<p>Let&rsquo;s run our tests:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
............................
----------------------------------------------------------------------
Ran 28 tests in 6.863s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>And done! Let&rsquo;s commit our changes:</p>

<pre><code class="bash">git add blogengine/ django_tutorial_blog_ng/settings.py
git commit -m 'Implemented a sitemap'
</code></pre>

<h1>Fixing test coverage</h1>

<p>Our blog is now feature-complete, but there are a few gaps in test coverage, so we&rsquo;ll fix them. If, like me, you&rsquo;re using Coveralls.io, <a href="https://coveralls.io/builds/1151177">you can easily see via their web interface where there are gaps in the coverage</a>.</p>

<p>Now, our gaps are all in our view file - if you <a href="https://coveralls.io/files/280228813">take a look at my build</a>, you can easily identify the gaps as they&rsquo;re marked in red.</p>

<p>The first gap is where a tag does not exist. Interestingly, if we look at the code in the view, we can see that some of it is redundant:</p>

<pre><code class="python blogengine/views.py">class TagPostsFeed(PostsFeed):
    def get_object(self, request, slug):
        return get_object_or_404(Tag, slug=slug)

    def title(self, obj):
        return "RSS feed - blog posts tagged  %s" % obj.name

    def link(self, obj):
        return obj.get_absolute_url()

    def description(self, obj):
        return "RSS feed - blog posts tagged %s" % obj.name

    def items(self, obj):
        try:
            tag = Tag.objects.get(slug=obj.slug)
            return tag.post_set.all()
        except Tag.DoesNotExist:
            return Post.objects.none()
</code></pre>

<p>Under the <code>items</code> function, we check to see if the tag exists. However, under <code>get_object</code> we can see that if the object didn&rsquo;t exist, it would already have returned a 404 error. We can therefore safely amend <code>items</code> to not check, since that try statement will never fail:</p>

<pre><code class="python blogengine/views.py">class TagPostsFeed(PostsFeed):
    def get_object(self, request, slug):
        return get_object_or_404(Tag, slug=slug)

    def title(self, obj):
        return "RSS feed - blog posts tagged  %s" % obj.name

    def link(self, obj):
        return obj.get_absolute_url()

    def description(self, obj):
        return "RSS feed - blog posts tagged %s" % obj.name

    def items(self, obj):
        tag = Tag.objects.get(slug=obj.slug)
        return tag.post_set.all()
</code></pre>

<p>The other two gaps are in our search view - we never get an empty result for the search in the following section:</p>

<pre><code class="python blogengine/views.py">def getSearchResults(request):
    """
    Search for a post by title or text
    """
    # Get the query data
    query = request.GET.get('q', '')
    page = request.GET.get('page', 1)

    # Query the database
    if query:
        results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))
    else:
        results = None

    # Add pagination
    pages = Paginator(results, 5)

    # Get specified page
    try:
        returned_page = pages.page(page)
    except EmptyPage:
        returned_page = pages.page(pages.num_pages)

    # Display the search results
    return render_to_response('blogengine/search_post_list.html',
                              {'page_obj': returned_page,
                               'object_list': returned_page.object_list,
                               'search': query})
</code></pre>

<p>So replace it with this:</p>

<pre><code class="python blogengine/views.py">def getSearchResults(request):
    """
    Search for a post by title or text
    """
    # Get the query data
    query = request.GET.get('q', '')
    page = request.GET.get('page', 1)

    # Query the database
    results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))

    # Add pagination
    pages = Paginator(results, 5)

    # Get specified page
    try:
        returned_page = pages.page(page)
    except EmptyPage:
        returned_page = pages.page(pages.num_pages)

    # Display the search results
    return render_to_response('blogengine/search_post_list.html',
                              {'page_obj': returned_page,
                               'object_list': returned_page.object_list,
                               'search': query})
</code></pre>

<p>We don&rsquo;t need to check whether <code>query</code> is defined because if <code>q</code> is left blank, the value of <code>query</code> will be an empty string, so we may as well pull out the redundant code.</p>

<p>Finally, the other gap is for when a user tries to get an empty search page (eg, page two of something with five or less results). So let&rsquo;s add another test to our <code>SearchViewTest</code> class:</p>

<pre><code class="python blogengine/tests.py">    def test_failing_search(self):
        # Search for something that is not present
        response = self.client.get('/search?q=wibble')
        self.assertEquals(response.status_code, 200)
        self.assertTrue('No posts found' in response.content)

        # Try to get nonexistent second page
        response = self.client.get('/search?q=wibble&amp;page=2')
        self.assertEquals(response.status_code, 200)
        self.assertTrue('No posts found' in response.content)
</code></pre>

<p>Run our tests and check the coverage:</p>

<pre><code class="bash">coverage run --include="blogengine/*" --omit="blogengine/migrations/*" manage.py test blogengine
coverage html
</code></pre>

<p>If you open <code>htmlcov/index.html</code> in your browser, you should see that the test coverage is back up to 100%. With that done, it&rsquo;s time to commit again:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Fixed gaps in coverage'
</code></pre>

<p>Remember, it&rsquo;s not always possible to achieve 100% test coverage, and you shouldn&rsquo;t worry too much about it if it&rsquo;s not possible - <a href="http://nedbatchelder.com/code/coverage/excluding.html">it&rsquo;s possible to ignore code</a> if necessary. However, it&rsquo;s a good idea to aim for 100%.</p>

<h1>Using Fabric for deployment</h1>

<p>Next we&rsquo;ll cover using Fabric, a handy tool for deploying your changes (any pretty much any other task you want to automate). First, you need to install it:</p>

<pre><code class="bash">pip install Fabric
</code></pre>

<p>If you have any problems installing it, you should be able to resolve them via Google - most of them are likely to be absent libraries that Fabric depends upon. Once it&rsquo;s installed, add it to your <code>requirements.tzt</code>:</p>

<pre><code class="bash">pip freeze &gt; requirements.txt
</code></pre>

<p>Next, create a file called <code>fabfile.py</code> and enter the following text:</p>

<pre><code class="python fabfile.py">#!/usr/bin/env python
from fabric.api import local

def deploy():
    """
    Deploy the latest version to Heroku
    """
    # Push changes to master
    local("git push origin master")

    # Push changes to Heroku
    local("git push heroku master")

    # Run migrations on Heroku
    local("heroku run python manage.py migrate")
</code></pre>

<p>Now, all this file does is push our changes to Github (or wherever else your repository is hosted) and to Heroku, and runs your migrations. It&rsquo;s not a terribly big task anyway, but it&rsquo;s handy to have it in place. Let&rsquo;s commit our changes:</p>

<pre><code class="bash">git add fabfile.py requirements.txt
git commit -m 'Added Fabric task for deployment'
</code></pre>

<p>Then, let&rsquo;s try it out:</p>

<pre><code class="bash">$ fab deploy
</code></pre>

<p>There, wasn&rsquo;t that more convenient? Fabric is much more powerful than this simple demonstration indicates, and can run tasks on remote servers via SSH easily. I recommend you take a look at the <a href="http://www.fabfile.org/">documentation</a> to see what else you can do with it. If you&rsquo;re hosting your site on a VPS, you will probably find Fabric indispensable, as you will need to restart the application every time you push up a new revision.</p>

<h1>Tidying up</h1>

<p>We want our blog application to play nicely with other Django apps. For instance, say you&rsquo;re working on a new site that includes a blogging engine. Wouldn&rsquo;t it make sense to just be able to drop in this blogging engine and have it work immediately? At the moment, some of our URL&rsquo;s are hard-coded, so we may have problems in doing so. Let&rsquo;s fix that.</p>

<p>First we&rsquo;ll amend our tests. Add this at the top of the tests file:</p>

<pre><code class="python blogengine/tests.py">from django.core.urlresolvers import reverse
</code></pre>

<p>Next, replace every instance of this:</p>

<pre><code class="python blogengine/tests.py">        response = self.client.get('/')
</code></pre>

<p>with this:</p>

<pre><code class="python blogengine/tests.py">response = self.client.get(reverse('blogengine:index'))
</code></pre>

<p>Then, rewrite the calls to the search route. For instance, this:</p>

<pre><code class="python blogengine/tests.py">        response = self.client.get('/search?q=first')
</code></pre>

<p>should become this:</p>

<pre><code class="python blogengine/tests.py">        response = self.client.get(reverse('blogengine:search') + '?q=first')
</code></pre>

<p>I&rsquo;ll leave changing these as an exercise for the reader, but check the repository if you get stuck.</p>

<p>Next, we need to assign a namespace to our app&rsquo;s routes:</p>

<pre><code class="python django_tutorial_blog_ng/urls.py">from django.conf.urls import patterns, include, url

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),
    # url(r'^blog/', include('blog.urls')),

    url(r'^admin/', include(admin.site.urls)),

    # Blog URLs
    url(r'', include('blogengine.urls', namespace="blogengine")),

    # Flat pages
    url(r'', include('django.contrib.flatpages.urls')),
)
</code></pre>

<p>We then assign names to our routes in the app&rsquo;s <code>urls.py</code>:</p>

<pre><code class="python blogengine/urls.py">from django.conf.urls import patterns, url
from django.views.generic import ListView, DetailView
from blogengine.models import Post, Category, Tag
from blogengine.views import CategoryListView, TagListView, PostsFeed, CategoryPostsFeed, TagPostsFeed, getSearchResults
from django.contrib.sitemaps.views import sitemap
from blogengine.sitemap import PostSitemap, FlatpageSitemap

# Define sitemaps
sitemaps = {
    'posts': PostSitemap,
    'pages': FlatpageSitemap
}

urlpatterns = patterns('',
    # Index
    url(r'^(?P&lt;page&gt;\d+)?/?$', ListView.as_view(
        model=Post,
        paginate_by=5,
        ),
        name='index'
        ),

    # Individual posts
    url(r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', DetailView.as_view(
        model=Post,
        ),
        name='post'
        ),

    # Categories
    url(r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', CategoryListView.as_view(
        paginate_by=5,
        model=Category,
        ),
        name='category'
        ),


    # Tags
    url(r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', TagListView.as_view(
        paginate_by=5,
        model=Tag,
        ),
        name='tag'
        ),

    # Post RSS feed
    url(r'^feeds/posts/$', PostsFeed()),

    # Category RSS feed
    url(r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', CategoryPostsFeed()),

    # Tag RSS feed
    url(r'^feeds/posts/tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', TagPostsFeed()),

    # Search posts
    url(r'^search', getSearchResults, name='search'),

    # Sitemap
    url(r'^sitemap\.xml$', sitemap, {'sitemaps': sitemaps},
            name='django.contrib.sitemaps.views.sitemap'),
)
</code></pre>

<p>You also need to amend two of your templates:</p>

<p>&#8220;` html blogengine/templates/blogengine/includes/base.html
&lt;!DOCTYPE html></p>

<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->


<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->


<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>{% block title %}My Django Blog{% endblock %}</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="alternate" type="application/rss+xml" title="Blog posts" href="http://matthewdaly.co.uk/feeds/posts/" ></p>

<pre><code>    &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

    {% load staticfiles %}
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/normalize.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/code.css' %}"&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!--[if lt IE 7]&gt;
        &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
    &lt;![endif]--&gt;

    &lt;!-- Add your site or application content here --&gt;

    &lt;div id="fb-root"&gt;&lt;/div&gt;
    &lt;script&gt;(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;

    &lt;div class="navbar navbar-static-top navbar-inverse"&gt;
        &lt;div class="container-fluid"&gt;
            &lt;div class="navbar-header"&gt;
                &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#header-nav"&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;/button&gt;
                &lt;a class="navbar-brand" href="{% url 'blogengine:index' %}"&gt;My Django Blog&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="collapse navbar-collapse" id="header-nav"&gt;
                &lt;ul class="nav navbar-nav"&gt;
                    {% load flatpages %}
                    {% get_flatpages as flatpages %}
                    {% for flatpage in flatpages %}
                    &lt;li&gt;&lt;a href="{{ flatpage.url }}"&gt;{{ flatpage.title }}&lt;/a&gt;&lt;/li&gt;
                    {% endfor %}
                    &lt;li&gt;&lt;a href="http://matthewdaly.co.uk/feeds/posts/"&gt;RSS feed&lt;/a&gt;&lt;/li&gt;

                    &lt;form action="/search" method="GET" class="navbar-form navbar-left"&gt;
                        &lt;div class="form-group"&gt;
                            &lt;input type="text" name="q" placeholder="Search..." class="form-control"&gt;&lt;/input&gt;
                        &lt;/div&gt;
                        &lt;button type="submit" class="btn btn-default"&gt;Search&lt;/button&gt;
                    &lt;/form&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
        {% block header %}
            &lt;div class="page-header"&gt;
                &lt;h1&gt;My Django Blog&lt;/h1&gt;
            &lt;/div&gt;
        {% endblock %}

        &lt;div class="row"&gt;
            {% block content %}{% endblock %}
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container footer"&gt;
        &lt;div class="row"&gt;
            &lt;div class="span12"&gt;
                &lt;p&gt;Copyright &amp;copy; {% now "Y" %}&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;window.jQuery || document.write('&lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}"&gt;&lt;\/script&gt;')&lt;/script&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/plugins.js' %}"&gt;&lt;/script&gt;
    &lt;script src="{% static 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}"&gt;&lt;/script&gt;

    &lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;
    &lt;script&gt;
        (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
        function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
        e=o.createElement(i);r=o.getElementsByTagName(i)[0];
        e.src='//www.google-analytics.com/analytics.js';
        r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
        ga('create','UA-XXXXX-X');ga('send','pageview');
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
&#8220;`</p>

<pre><code class="html blogengine/templates/blogengine/search_post_list.html">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        {% if object_list %}
            {% for post in object_list %}
            &lt;div class="post col-md-12"&gt;
            &lt;h1&gt;&lt;a href="{{ post.get_absolute_url }}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
            &lt;h3&gt;{{ post.pub_date }}&lt;/h3&gt;
            {{ post.text|custom_markdown }}
            &lt;/div&gt;
            {% if post.category %}
            &lt;div class="col-md-12"&gt;
            &lt;a href="{{ post.category.get_absolute_url }}"&gt;&lt;span class="label label-primary"&gt;{{ post.category.name }}&lt;/span&gt;&lt;/a&gt;
            &lt;/div&gt;
            {% endif %}
            {% if post.tags %}
            &lt;div class="col-md-12"&gt;
            {% for tag in post.tags.all %}
            &lt;a href="{{ tag.get_absolute_url }}"&gt;&lt;span class="label label-success"&gt;{{ tag.name }}&lt;/span&gt;&lt;/a&gt;
            {% endfor %}
            &lt;/div&gt;
            {% endif %}
            {% endfor %}
        {% else %}
            &lt;p&gt;No posts found&lt;/p&gt;
        {% endif %}

        &lt;ul class="pager"&gt;
        {% if page_obj.has_previous %}
        &lt;li class="previous"&gt;&lt;a href="{% url 'blogengine:search' %}?page={{ page_obj.previous_page_number }}&amp;q={{ search }}"&gt;Previous Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        {% if page_obj.has_next %}
        &lt;li class="next"&gt;&lt;a href="{% url 'blogengine:search' %}?page={{ page_obj.next_page_number }}&amp;q={{ search }}"&gt;Next Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        &lt;/ul&gt;

    {% endblock %}
</code></pre>

<p>Let&rsquo;s run our tests:</p>

<pre><code class="bash">$ python manage.py test blogengine/
Creating test database for alias 'default'...
.............................
----------------------------------------------------------------------
Ran 29 tests in 10.456s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>And commit our changes:</p>

<pre><code class="bash">git add .
git commit -m 'Now use named routes'
</code></pre>

<h1>Debugging Django</h1>

<p>There are a number of handy ways to debug Django applications. One of the simplest is to use the Python debugger. To use it, just enter the following lines at the point you want to break at:</p>

<pre><code class="python">import pdb
pdb.set_trace()
</code></pre>

<p>Now, whenever that line of code is run, you&rsquo;ll be dropped into an interactive shell that lets you play around to find out what&rsquo;s going wrong. However, it doesn&rsquo;t offer autocompletion, so we&rsquo;ll install <code>ipdb</code>, which is an improved version:</p>

<pre><code class="bash">pip install ipdb
pip freeze &gt; requirements.txt
</code></pre>

<p>Now you can use <code>ipdb</code> in much the same way as you would use <code>pdb</code>:</p>

<pre><code class="python">import ipdb
ipdb.set_trace()
</code></pre>

<p>Now, <code>ipdb</code> is very useful, but it isn&rsquo;t much help for profiling your application. For that you need the Django Debug Toolbar. Run the following commands:</p>

<pre><code class="bash">pip install django-debug-toolbar
pip freeze &gt; requirements.txt
</code></pre>

<p>Then add the following line to <code>INSTALLED_APPS</code> in your settings file:</p>

<pre><code class="python django_blog_tutorial_ng/settings.py">    'debug_toolbar',
</code></pre>

<p>Then, try running the development server, and you&rsquo;ll see a toolbar on the right-hand side of the screen that allows you to view some useful data about your page. For instance, you&rsquo;ll notice a field called <code>SQL</code> - this contains details of the queries carried out when building the page. To actually see the queries carried out, you&rsquo;ll want to disable caching in your settings file by commenting out all the constants that start with <code>CACHE</code>.</p>

<p>We won&rsquo;t go into using the toolbar to optimise queries, but using this, you can easily see what queries are being executed on a specific page, how long they take, and the values they return. Sometimes, you may need to optimise a slow query - in this case, Django allows you to drop down to writing raw SQL if necessary.</p>

<p>Note that if you&rsquo;re running Django in production, you should set <code>DEBUG</code> to <code>False</code> as otherwise it gives rather too much information to potential attackers, and with Django Debug Toolbar installed, that&rsquo;s even more important.</p>

<p>Please also note that when you disable debug mode, Django no longer handles static files automatically, so you&rsquo;ll need to run <code>python manage.py collectstatic</code> and commit the <code>staticfiles</code> directory.</p>

<p>Once you&rsquo;ve disabled debug mode, collected the static files, and re-enables caching, you can commit your changes:</p>

<pre><code class="bash">git add .
git commit -m 'Installed debugging tools'
</code></pre>

<h1>Optimising static files</h1>

<p>We want our blog to get the best SEO results it can, so making it fast is essential. One of the simplest things you can do is to concatenate and minify static assets such as CSS and JavaScript. There are numerous ways to do this, but I generally use Grunt. Let&rsquo;s set up a Grunt config to concatenate and minify our CSS and JavaScript.</p>

<p>You&rsquo;ll need to have Node.js installed on your development machine for this. Then, you need to install the Grunt command-line interface:</p>

<pre><code class="bash">sudo npm install -g grunt-cli
</code></pre>

<p>With that done, we need to create a <code>package.json</code> file. You can create one using the command <code>npm init</code>. Here&rsquo;s mine:</p>

<pre><code class="json package.json">{
  "name": "django_tutorial_blog_ng",
  "version": "1.0.0",
  "description": "Django Tutorial Blog NG =======================",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/matthewbdaly/django_tutorial_blog_ng.git"
  },
  "author": "Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/matthewbdaly/django_tutorial_blog_ng/issues"
  },
  "homepage": "https://github.com/matthewbdaly/django_tutorial_blog_ng"
}
</code></pre>

<p>Feel free to amend  it as you see fit.</p>

<p>Next we install Grunt and the required plugins:</p>

<pre><code class="bash">npm install grunt grunt-contrib-cssmin grunt-contrib-concat grunt-contrib-uglify --save-dev
</code></pre>

<p>We now need to create a Gruntfile for our tasks:</p>

<pre><code class="javascript Gruntfile.js">module.exports = function (grunt) {
    'use strict';

    grunt.initConfig({
        concat: {
            dist: {
                src: [
                    'blogengine/static/bower_components/bootstrap/dist/css/bootstrap.css',
                    'blogengine/static/bower_components/bootstrap/dist/css/bootstrap-theme.css',
                    'blogengine/static/css/code.css',
                    'blogengine/static/css/main.css',
                ],
                dest: 'blogengine/static/css/style.css'
            }
        },
        uglify: {
            dist: {
                src: [
                    'blogengine/static/bower_components/jquery/jquery.js',
                    'blogengine/static/bower_components/bootstrap/dist/js/bootstrap.js'
                ],
                dest: 'blogengine/static/js/all.min.js'
            }
        },
        cssmin: {
            dist: {
                src: 'blogengine/static/css/style.css',
                dest: 'blogengine/static/css/style.min.css'
            }
        }
    });

    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.registerTask('default', ['concat', 'uglify', 'cssmin']);
};
</code></pre>

<p>You&rsquo;ll also need to change the paths in your base HTML file to point to the minified versions:</p>

<p>&#8220;` html blogengine/templates/blogengine/includes/base.html
&lt;!DOCTYPE html></p>

<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->


<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->


<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>{% block title %}My Django Blog{% endblock %}</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="alternate" type="application/rss+xml" title="Blog posts" href="http://matthewdaly.co.uk/feeds/posts/" ></p>

<pre><code>    &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

    {% load staticfiles %}
    &lt;link rel="stylesheet" href="{% static 'css/style.min.css' %}"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!--[if lt IE 7]&gt;
        &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
    &lt;![endif]--&gt;

    &lt;!-- Add your site or application content here --&gt;

    &lt;div id="fb-root"&gt;&lt;/div&gt;
    &lt;script&gt;(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;

    &lt;div class="navbar navbar-static-top navbar-inverse"&gt;
        &lt;div class="container-fluid"&gt;
            &lt;div class="navbar-header"&gt;
                &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#header-nav"&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;/button&gt;
                &lt;a class="navbar-brand" href="{% url 'blogengine:index' %}"&gt;My Django Blog&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="collapse navbar-collapse" id="header-nav"&gt;
                &lt;ul class="nav navbar-nav"&gt;
                    {% load flatpages %}
                    {% get_flatpages as flatpages %}
                    {% for flatpage in flatpages %}
                    &lt;li&gt;&lt;a href="{{ flatpage.url }}"&gt;{{ flatpage.title }}&lt;/a&gt;&lt;/li&gt;
                    {% endfor %}
                    &lt;li&gt;&lt;a href="http://matthewdaly.co.uk/feeds/posts/"&gt;RSS feed&lt;/a&gt;&lt;/li&gt;

                    &lt;form action="/search" method="GET" class="navbar-form navbar-left"&gt;
                        &lt;div class="form-group"&gt;
                            &lt;input type="text" name="q" placeholder="Search..." class="form-control"&gt;&lt;/input&gt;
                        &lt;/div&gt;
                        &lt;button type="submit" class="btn btn-default"&gt;Search&lt;/button&gt;
                    &lt;/form&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
        {% block header %}
            &lt;div class="page-header"&gt;
                &lt;h1&gt;My Django Blog&lt;/h1&gt;
            &lt;/div&gt;
        {% endblock %}

        &lt;div class="row"&gt;
            {% block content %}{% endblock %}
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container footer"&gt;
        &lt;div class="row"&gt;
            &lt;div class="span12"&gt;
                &lt;p&gt;Copyright &amp;copy; {% now "Y" %}&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="{% static 'js/all.min.js' %}"&gt;&lt;/script&gt;

    &lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;
    &lt;script&gt;
        (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
        function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
        e=o.createElement(i);r=o.getElementsByTagName(i)[0];
        e.src='//www.google-analytics.com/analytics.js';
        r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
        ga('create','UA-XXXXX-X');ga('send','pageview');
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
&#8220;`</p>

<p>Now, run the Grunt task:</p>

<pre><code class="bash">grunt
</code></pre>

<p>And collect the static files:</p>

<pre><code class="bash">python manage.py collectstatic
</code></pre>

<p>You&rsquo;ll also want to add your <code>node_modules</code> folder to your <code>gitignore</code>:</p>

<pre><code class="bash .gitignore">venv/
*.pyc
db.sqlite3
reports/
htmlcov/
.coverage
node_modules/
</code></pre>

<p>Then commit your changes:</p>

<pre><code class="bash">git add .
git commit -m 'Optimised static assets'
</code></pre>

<p>Now, our <code>package.json</code> will cause a problem - it will mean that this app is mistakenly identified as a Node.js app. To prevent this, create the following file:</p>

<pre><code class="bash .slugignore">package.json
</code></pre>

<p>Then commit your changes and push them up:</p>

<pre><code class="bash">git add .slugignore
git commit -m 'Added slugignore'
fab deploy
</code></pre>

<p>If you check, your site should now be loading the minified versions of the static files.</p>

<p>That&rsquo;s our site done! As usual I&rsquo;ve tagged the final commit with <code>lesson-8</code>.</p>

<p>Sadly, that&rsquo;s our final instalment over with! I hope you&rsquo;ve enjoyed these tutorials, and I look forward to seeing what you create with them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 7]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/"/>
    <updated>2014-08-25T17:15:01+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7</id>
    <content type="html"><![CDATA[<p>Hello once again! In this instalment we&rsquo;ll cover:</p>

<ul>
<li>Caching your content with Memcached to improve your site&rsquo;s performance</li>
<li>Refactoring and simplifying our tests</li>
<li>Implementing additional feeds</li>
<li>Creating a simple search engine</li>
</ul>


<p>Don&rsquo;t forget to activate your virtualenv:</p>

<pre><code class="bash">source venv/bin/activate
</code></pre>

<p>Now let&rsquo;s get started!</p>

<h1>Memcached</h1>

<p>If you frequent (or used to frequent) social media sites like Reddit, Slashdot or Digg, you may be familiar with something called variously the Digg or Slashdot effect, whereby if a page gets submitted to a social media site, and subsequently becomes popular, it can be hit by a huge number of HTTP requests in a very short period of time, slowing it down or even taking the server down completely.</p>

<p>Now, as a general rule of thumb, for most dynamic websites such as blogs, the bottleneck is not the web server or the programming language, but the database. If you have a lot of people hitting the same page over and over again in quick succession, then you&rsquo;re essentially running the same query over and over again and getting the same result each time, which is expensive in terms of processing power. What you need to be able to do is cache the results of the query in memory for a given period of time so that the number of queries is reduced.</p>

<p>That&rsquo;s where Memcached comes in. It&rsquo;s a simple key-value store that allows you to store values in memory for a given period of time so that they can be retrieved without having to query the database. Memcached is a very common choice for caching, and is by far the fastest and most efficient type of cache available for Django. It&rsquo;s also available on Heroku&rsquo;s free tier.</p>

<p>Django has a very powerful caching framework that supports numerous types of cache in addition to Memcached, such as:</p>

<ul>
<li>Database caching</li>
<li>Filesystem caching</li>
<li>Local memory caching</li>
</ul>


<p>There are also third-party backends for using other caching systems such as Redis.</p>

<p>Now, the cache can be used in a number of different ways. You can cache only certain parts of your site if you wish. However, because our site is heavily content-driven, we should be pretty safe to use the per-site cache, which is the simplest way to set up caching.</p>

<p>In order to set up Memcached, there&rsquo;s a couple of Python libraries we&rsquo;ll need. If you want to install them locally, however, you&rsquo;ll need to install both memcached and libmemcached (on Ubuntu, the packages you need are called <code>memcached</code> and <code>libmemcached-dev</code>) on your development machine. If you don&rsquo;t want to do this, then just copy and paste these lines into <code>requirements.txt</code> instead:</p>

<pre><code class="bash requirements.txt">django-pylibmc-sasl==0.2.4
pylibmc==1.3.0
</code></pre>

<p>If you are happy to install these dependencies locally, then run this command once memcached and libmemcached are installed:</p>

<pre><code class="bash">pip install pylibmc django-pylibmc-sasl
</code></pre>

<p>With that done let&rsquo;s configure Memcached. Open up the settings file and add the following at the bottom:</p>

<pre><code class="python django_tutorial_blog_ng/settings.py">def get_cache():
  import os
  try:
    os.environ['MEMCACHE_SERVERS'] = os.environ['MEMCACHIER_SERVERS'].replace(',', ';')
    os.environ['MEMCACHE_USERNAME'] = os.environ['MEMCACHIER_USERNAME']
    os.environ['MEMCACHE_PASSWORD'] = os.environ['MEMCACHIER_PASSWORD']
    return {
      'default': {
        'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',
        'TIMEOUT': 300,
        'BINARY': True,
        'OPTIONS': { 'tcp_nodelay': True }
      }
    }
  except:
    return {
      'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'
      }
    }

CACHES = get_cache()
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 300
CACHE_MIDDLEWARE_KEY_PREFIX = ''
</code></pre>

<p>Then add the following to <code>MIDDLEWARE_CLASSES</code>:</p>

<pre><code class="python django_tutorial_blog_ng/settings.py">    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
</code></pre>

<p>That&rsquo;s it! The first section configures the application to use Memcached to cache the content when running on Heroku, and sets some configuration parameters, while the second  section tells Django to use the per-site cache in order to cache all the site content.</p>

<p>Now, Heroku doesn&rsquo;t include Memcached by default - instead it&rsquo;s available as an add-on called Memcachier. To use add-ons you need to set up a credit card for billing. We will set it up to use the free developer plan, but if you outgrow this you can easily switch to a paid plan. To add Memcachier, run this command:</p>

<pre><code class="bash">heroku addons:add memcachier:dev
</code></pre>

<p>Please note that Memcachier can take a few minutes to get set up, so you may want to leave it a little while between adding it and pushing up your changes. Now we&rsquo;ll commit our changes:</p>

<pre><code class="bash">git add requirements.txt django_tutorial_blog_ng/settings.py
git commit -m 'Implemented caching with Memcached'
</code></pre>

<p>Then we&rsquo;ll push them up to our remote repository and to Heroku:</p>

<pre><code class="bash">git push origin master
git push heroku master
</code></pre>

<p>And that&rsquo;s all you need to do to set up Memcached. In addition to storing your query results in Memcached, enabling the caching framework in Django will also set various HTTP headers to enable web proxies and browsers to cache content for an appropriate length of time. If you open up your browser&rsquo;s developer tools and compare the response headers for your homepage on the latest version of the code with the previous version, you&rsquo;ll notice that a number of additional headers appear, including <code>Cache-Control</code>, <code>Expires</code> and <code>Last-Modified</code>. These tell web browsers and web proxies how often to request the latest version of the HTML document, in order to help you reduce the bandwidth used.</p>

<p>As you can see, for a site like this where you are the only person adding content, it&rsquo;s really easy to implement caching with Django, and for a blog there&rsquo;s very little reason not to do it. If you&rsquo;re not using Heroku and are instead hosting your site on a VPS, then the configuration will be somewhat different - see <a href="https://docs.djangoproject.com/en/1.6/topics/cache/#memcached">here</a> for details. You can also find information on using other cache backends on the same page.</p>

<p>That isn&rsquo;t all you can do to speed up your site. Heroku doesn&rsquo;t seem to be very good for serving static files, and if your site is attracting a lot of traffic you might want to host your static files elsewhere, such as on Amazon&rsquo;s S3 service. Doing so is outside the scope of this tutorial, but for that use case, you should check out <a href="http://django-storages.readthedocs.org/en/latest/index.html">django-storages</a>.</p>

<h1>Clearing the cache automatically</h1>

<p>There is one issue with this implementation. As it is right now, if you view the home page, add a post, then reload the page, you may not see the new post immediately because the cache will continue serving the old version until it has expired. That behaviour is less than ideal - we would like the cache to be cleared automatically when a new post gets added so that users will see the new version immediately. That response will still be cached afterwards, so it only means one extra query.</p>

<p>This is the ideal place to introduce <a href="https://docs.djangoproject.com/en/dev/topics/signals/">signals</a>. Signals are a way to carry out a given action when an event takes place. In our case, we plan to clear the cache when a post is saved (either created or updated).</p>

<p>Note that as we&rsquo;ll be testing the behaviour of the cache at this point, you&rsquo;ll need to install Memcached on your local machine, and we&rsquo;ll need to change the settings to fall back to our local Memcached instance:</p>

<pre><code class="python django_tutorial_blog_ng/settings.py">def get_cache():
  import os
  try:
    os.environ['MEMCACHE_SERVERS'] = os.environ['MEMCACHIER_SERVERS'].replace(',', ';')
    os.environ['MEMCACHE_USERNAME'] = os.environ['MEMCACHIER_USERNAME']
    os.environ['MEMCACHE_PASSWORD'] = os.environ['MEMCACHIER_PASSWORD']
    return {
      'default': {
        'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',
        'TIMEOUT': 300,
        'BINARY': True,
        'OPTIONS': { 'tcp_nodelay': True }
      }
    }
  except:
    return {
      'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': '127.0.0.1:11211'
      }
    }

CACHES = get_cache()
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 300
CACHE_MIDDLEWARE_KEY_PREFIX = ''
</code></pre>

<p>If you don&rsquo;t want to install Memcached locally, you can skip this step, but be aware that the test we write for clearing the cache will always pass if you do skip it.</p>

<p>Then we&rsquo;ll run our tests to make sure nothing has been broken:</p>

<pre><code class="bash">$ python manage.py jenkins blogengine
Creating test database for alias 'default'...
.......................
----------------------------------------------------------------------
Ran 23 tests in 6.164s

OK
</code></pre>

<p>Let&rsquo;s commit:</p>

<pre><code class="bash">git add django_tutorial_blog_ng/settings.py
git commit -m 'Now use Memcached in development'
</code></pre>

<p>Now we&rsquo;ll add a test for clearing the cache to <code>PostViewTest</code>:</p>

<pre><code class="python blogengine/tests.py">    def test_clear_cache(self):
        # Create the category
        category = Category()
        category.name = 'python'
        category.description = 'The Python programming language'
        category.save()

        # Create the tag
        tag = Tag()
        tag.name = 'perl'
        tag.description = 'The Perl programming language'
        tag.save()

        # Create the author
        author = User.objects.create_user('testuser', 'user@example.com', 'password')
        author.save()

        # Create the site
        site = Site()
        site.name = 'example.com'
        site.domain = 'example.com'
        site.save()

        # Create the first post
        post = Post()
        post.title = 'My first post'
        post.text = 'This is [my first blog post](http://127.0.0.1:8000/)'
        post.slug = 'my-first-post'
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()
        post.tags.add(tag)

        # Check new post saved
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)

        # Fetch the index
        response = self.client.get('/')
        self.assertEquals(response.status_code, 200)

        # Create the second post
        post = Post()
        post.title = 'My second post'
        post.text = 'This is [my second blog post](http://127.0.0.1:8000/)'
        post.slug = 'my-second-post'
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()
        post.tags.add(tag)

        # Fetch the index again
        response = self.client.get('/')

        # Check second post present
        self.assertTrue('my second blog post' in response.content)
</code></pre>

<p>This should be fairly self-explanatory. We create one post, and request the index page. We then add a second post, request the index page again, and check for the second post. The test should fail because the cached version is returned, rather than the version in the database.</p>

<p>Now we have a test in place, we can implement a fix. First, add this to the top of your <code>models.py</code>:</p>

<pre><code class="python blogengine/models.py">from django.db.models.signals import post_save
from django.core.cache import cache
</code></pre>

<p>Then add the following at the bottom of the file:</p>

<pre><code class="python blogengine/models.py">
# Define signals
def new_post(sender, instance, created, **kwargs):
    cache.clear()

# Set up signals
post_save.connect(new_post, sender=Post)
</code></pre>

<p>This is fairly straightforward. What we&rsquo;re doing is first defining a function called <code>new_post</code> that is called when a new post is created. We then connect it to the <code>post_save</code> signal. When a post is saved, it calls <code>new_post</code>, which clears the cache, making sure users are seeing the latest and greatest version of your site immediately.</p>

<p>Let&rsquo;s test it:</p>

<pre><code class="bash">$ python manage.py jenkins blogengine
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 8.473s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>There are a number of signals available, and when you create one, you have access to the created object via the <code>instance</code> parameter. Using signals you can implement all kinds of functionality. For instance, you could implement the functionality to send an email when a new post is published.</p>

<p>If you&rsquo;re using Travis CI, you&rsquo;ll also need to update the config file:</p>

<pre><code class="yaml .travis.yml">language: python
python:
- "2.7"
services: memcached
before_install:
    - sudo apt-get install -y libmemcached-dev
# command to install dependencies
install: "pip install -r requirements.txt"
# command to run tests
script: coverage run --include="blogengine/*" --omit="blogengine/migrations/*" manage.py test blogengine
after_success:
    coveralls
</code></pre>

<p>Time to commit:</p>

<pre><code class="bash">git add blogengine/ .travis.yml
git commit -m 'Now clear cache when post added'
</code></pre>

<h1>Formatting for RSS feeds</h1>

<p>Now, we want to offer more than one option for RSS feeds. For instance, if your blog is aggregated on a site such as <a href="http://planet.python.org/">Planet Python</a>, but you also blog about JavaScript, you may want to be able to provide a feed for posts in the <code>python</code> category only.</p>

<p>If you have written any posts that use any of Markdown&rsquo;s custom formatting, you may notice that if you load your RSS feed in a reader, it isn&rsquo;t formatted as Markdown. Let&rsquo;s fix that. First we&rsquo;ll amend our test:</p>

<pre><code class="python blogengine/tests.py">class FeedTest(BaseAcceptanceTest):
    def test_all_post_feed(self):
        # Create the category
        category = Category()
        category.name = 'python'
        category.description = 'The Python programming language'
        category.save()

        # Create the tag
        tag = Tag()
        tag.name = 'python'
        tag.description = 'The Python programming language'
        tag.save()

        # Create the author
        author = User.objects.create_user('testuser', 'user@example.com', 'password')
        author.save()

        # Create the site
        site = Site()
        site.name = 'example.com'
        site.domain = 'example.com'
        site.save()

        # Create a post
        post = Post()
        post.title = 'My first post'
        post.text = 'This is my *first* blog post'
        post.slug = 'my-first-post'
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category

        # Save it
        post.save()

        # Add the tag
        post.tags.add(tag)
        post.save()

        # Check we can find it
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)
        only_post = all_posts[0]
        self.assertEquals(only_post, post)

        # Fetch the feed
        response = self.client.get('/feeds/posts/')
        self.assertEquals(response.status_code, 200)

        # Parse the feed
        feed = feedparser.parse(response.content)

        # Check length
        self.assertEquals(len(feed.entries), 1)

        # Check post retrieved is the correct one
        feed_post = feed.entries[0]
        self.assertEquals(feed_post.title, post.title)
        self.assertTrue('This is my &lt;em&gt;first&lt;/em&gt; blog post' in feed_post.description)
</code></pre>

<p>Don&rsquo;t forget to run the tests to make sure they fail. Now, let&rsquo;s fix it:</p>

<pre><code class="python blogengine/views.py">from django.shortcuts import render
from django.views.generic import ListView
from blogengine.models import Category, Post, Tag
from django.contrib.syndication.views import Feed
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe
import markdown2

# Create your views here.
class CategoryListView(ListView):
    def get_queryset(self):
        slug = self.kwargs['slug']
        try:
            category = Category.objects.get(slug=slug)
            return Post.objects.filter(category=category)
        except Category.DoesNotExist:
            return Post.objects.none()


class TagListView(ListView):
    def get_queryset(self):
        slug = self.kwargs['slug']
        try:
            tag = Tag.objects.get(slug=slug)
            return tag.post_set.all()
        except Tag.DoesNotExist:
            return Post.objects.none()


class PostsFeed(Feed):
    title = "RSS feed - posts"
    link = "feeds/posts/"
    description = "RSS feed - blog posts"

    def items(self):
        return Post.objects.order_by('-pub_date')

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        extras = ["fenced-code-blocks"]
        content = mark_safe(markdown2.markdown(force_unicode(item.text),
                                               extras = extras))
        return content
</code></pre>

<p>All we&rsquo;re doing here is amending the <code>item_description</code> method of <code>PostsFeed</code> to render it as Markdown. Now let&rsquo;s run our tests again:</p>

<pre><code class="bash">$ python manage.py jenkins
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 9.370s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>With that done, we&rsquo;ll commit our changes:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Fixed rendering for post feed'
</code></pre>

<h1>Refactoring our tests</h1>

<p>Now, before we get into implementing the feed, our tests are a bit verbose. We create a lot of items over and over again - let&rsquo;s sort that out. Factory Boy is a handy Python module that allows you to create easy-to-use factories for creating objects over and over again in tests. Let&rsquo;s install it:</p>

<pre><code class="bash">pip install factory_boy
pip freeze &gt; requirements.txt
git add requirements.txt
git commit -m 'Installed Factory Boy'
</code></pre>

<p>Now let&rsquo;s set up a factory for creating posts. Add this at the top of the test file:</p>

<pre><code class="python blogengine/tests.py">import factory.django
</code></pre>

<p>Then, before your actual tests, insert the following:</p>

<pre><code class="python blogengine/tests.py"># Factories
class SiteFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Site
        django_get_or_create = (
            'name',
            'domain'
        )

    name = 'example.com'
    domain = 'example.com'
</code></pre>

<p>Now, wherever you call <code>Site()</code>, add its attributes, and save it, replace those lines with the following:</p>

<pre><code class="python blogengine/tests.py">        site = SiteFactory()
</code></pre>

<p>Much simpler and more concise, I&rsquo;m sure you&rsquo;ll agree! Now, let&rsquo;s run the tests to make sure they aren&rsquo;t broken:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 7.482s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>Let&rsquo;s commit again:
<code>bash
git add blogengine/tests.py
git commit -m 'Now use Factory Boy for site objects'
</code></p>

<p>Let&rsquo;s do the same thing with <code>Category</code> objects:</p>

<pre><code class="python blogengine/tests.py">class CategoryFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Category
        django_get_or_create = (
            'name',
            'description',
            'slug'
        )

    name = 'python'
    description = 'The Python programming language'
    slug = 'python'
</code></pre>

<p>Again, just find every time we call <code>Category()</code> and replace it with the following:</p>

<pre><code class="python blogengine/tests.py">        category = CategoryFactory()
</code></pre>

<p>Now if we run our tests, we&rsquo;ll notice a serious error:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
EE..EE.EE.EE...E.EEE..E.
======================================================================
ERROR: test_create_category (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 42, in test_create_category
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 80, in test_create_post
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 339, in test_create_post
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_create_post_without_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 378, in test_create_post_without_tag
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 245, in test_delete_category
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_delete_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 467, in test_delete_post
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 221, in test_edit_category
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 410, in test_edit_post
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_all_post_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 810, in test_all_post_feed
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_category_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 640, in test_category_page
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_clear_cache (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 753, in test_clear_cache
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_index (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 518, in test_index
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create
    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create


    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

======================================================================
ERROR: test_post_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 576, in test_post_page
    category = CategoryFactory()
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 82, in __call__
    return cls.create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 585, in create
    return cls._generate(True, attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 510, in _generate
    obj = cls._prepare(create, **attrs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py", line 485, in _prepare
    return cls._create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 151, in _create


    return cls._get_or_create(model_class, *args, **kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py", line 142, in _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py", line 154, in get_or_create
    return self.get_queryset().get_or_create(**kwargs)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py", line 383, in get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument 'force_insert'

----------------------------------------------------------------------
Ran 24 tests in 5.162s

FAILED (errors=13)
Destroying test database for alias 'default'...
</code></pre>

<p>Thankfully, this is easy to fix. We just need to amend the custom <code>save()</code> method of the <code>Category</code> model:</p>

<pre><code class="python blogengine/models.py">    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unicode(self.name))
        super(Category, self).save(*args, **kwargs)
</code></pre>

<p>That should resolve the issue:</p>

<pre><code class="bash">$ python manage.py jenkins
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 7.749s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>Let&rsquo;s commit again:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Category now uses Factory Boy'
</code></pre>

<p>Now let&rsquo;s do the same thing for tags:</p>

<pre><code class="python blogengine/tests.py">class TagFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Tag
        django_get_or_create = (
            'name',
            'description',
            'slug'
        )

    name = 'python'
    description = 'The Python programming language'
    slug = 'python'
</code></pre>

<p>And replace the sections where we create new <code>Tag</code> objects:</p>

<pre><code class="python blogengine/tests.py">        tag = TagFactory()
</code></pre>

<p>Note that some tags have different values. We can easily pass different values to our <code>TagFactory()</code> to override the default values:</p>

<pre><code class="python blogengine/tests.py">        tag = TagFactory(name='perl', description='The Perl programming language')
</code></pre>

<p>The <code>Tag</code> model has the same issue as the <code>Category</code> one did, so let&rsquo;s fix that:</p>

<pre><code class="python blogengine/models.py">    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unicode(self.name))
        super(Tag, self).save(*args, **kwargs)
</code></pre>

<p>We run our tests again:</p>

<pre><code class="bash">$ python manage.py test blogengine/
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 7.153s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>Time to commit again:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Now use Factory Boy for tags'
</code></pre>

<p>Next we&rsquo;ll create a factory for adding users. Note that the factory name doesn&rsquo;t have to match the object name, so you can create factories for different types of users. Here we create a factory for authors - you could, for instance, create a separate factory for subscribers if you wanted:</p>

<pre><code class="python blogengine/tests.py">class AuthorFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = User
        django_get_or_create = ('username','email', 'password',)

    username = 'testuser'
    email = 'user@example.com'
    password = 'password'
</code></pre>

<p>And as before, replace those sections where we create users with the following:</p>

<pre><code class="python blogengine/tests.py">        author = AuthorFactory()
</code></pre>

<p>Run the tests again:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 5.808s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>We commit our changes:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Now use Factory Boy for creating authors'
</code></pre>

<p>Now we&rsquo;ll create a flat page factory:</p>

<pre><code class="python blogengine/tests.py">

class FlatPageFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = FlatPage
        django_get_or_create = (
            'url',
            'title',
            'content'
        )

    url = '/about/'
    title = 'About me'
    content = 'All about me'
</code></pre>

<p>And use it for our flat page test:
<code>python blogengine/tests.py
        page = FlatPageFactory()
</code></p>

<p>Check the tests pass:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
........................
----------------------------------------------------------------------
Ran 24 tests in 5.796s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>And commit again:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Now use Factory Boy for flat page test'
</code></pre>

<p>Now we&rsquo;ll create a final factory for posts:</p>

<pre><code class="python blogengine/tests.py">class PostFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Post
        django_get_or_create = (
            'title',
            'text',
            'slug',
            'pub_date'
        )

    title = 'My first post'
    text = 'This is my first blog post'
    slug = 'my-first-post'
    pub_date = timezone.now()
    author = factory.SubFactory(AuthorFactory)
    site = factory.SubFactory(SiteFactory)
    category = factory.SubFactory(CategoryFactory)
</code></pre>

<p>This factory is a little bit different. Because our <code>Post</code> model depends on several others, we need to be able to create those additional objects on demand. By designating them as subfactories, we can easily create the associated objects for our <code>Post</code> object.</p>

<p>That means that not only can we get rid of our <code>Post()</code> calls, but we can also get rid of the factory calls to create the associated objects for <code>Post</code> models. Again, I&rsquo;ll leave actually doing this as an exercise for the reader, but you can always refer to the GitHub repository if you&rsquo;re not too sure.</p>

<p>Make sure your tests still pass, then commit the changes:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Now use Factory Boy for testing posts'
</code></pre>

<p>Using Factory Boy made a big difference to the size of the test file - I was able to cut it down by over 200 lines of code. As your application gets bigger, it gets harder to maintain, so do what you can to keep the size down.</p>

<h1>Additional RSS feeds</h1>

<p>Now, let&rsquo;s implement our additional RSS feeds. First, we&rsquo;ll write a test for the category feed. Add this to the <code>FeedTest</code> class:</p>

<pre><code class="python blogengine/tests.py">    def test_category_feed(self):
        # Create a post
        post = PostFactory(text='This is my *first* blog post')

        # Create another post in a different category
        category = CategoryFactory(name='perl', description='The Perl programming language', slug='perl')
        post2 = PostFactory(text='This is my *second* blog post', title='My second post', slug='my-second-post', category=category)

        # Fetch the feed
        response = self.client.get('/feeds/posts/category/python/')
        self.assertEquals(response.status_code, 200)

        # Parse the feed
        feed = feedparser.parse(response.content)

        # Check length
        self.assertEquals(len(feed.entries), 1)

        # Check post retrieved is the correct one
        feed_post = feed.entries[0]
        self.assertEquals(feed_post.title, post.title)
        self.assertTrue('This is my &lt;em&gt;first&lt;/em&gt; blog post' in feed_post.description)

        # Check other post is not in this feed
        self.assertTrue('This is my &lt;em&gt;second&lt;/em&gt; blog post' not in response.content)
</code></pre>

<p>Here we create two posts in different categories (note that we create a new category and override the post category for it). We then fetch <code>/feeds/posts/category/python/</code> and assert that it contains only one post, with the content of the first post and not the content of the second.</p>

<p>Run the tests and they should fail:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
................F........
======================================================================
FAIL: test_category_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 716, in test_category_feed
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

----------------------------------------------------------------------
Ran 25 tests in 5.804s

FAILED (failures=1)
Destroying test database for alias 'default'...
</code></pre>

<p>Because we haven&rsquo;t yet implemented that route, we get a 404 error. So let&rsquo;s create a route for this:</p>

<pre><code class="python blogengine/urls.py">from django.conf.urls import patterns, url
from django.views.generic import ListView, DetailView
from blogengine.models import Post, Category, Tag
from blogengine.views import CategoryListView, TagListView, PostsFeed, CategoryPostsFeed

urlpatterns = patterns('',
    # Index
    url(r'^(?P&lt;page&gt;\d+)?/?$', ListView.as_view(
        model=Post,
        paginate_by=5,
        )),

    # Individual posts
    url(r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', DetailView.as_view(
        model=Post,
        )),

    # Categories
    url(r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', CategoryListView.as_view(
        paginate_by=5,
        model=Category,
        )),

    # Tags
    url(r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', TagListView.as_view(
        paginate_by=5,
        model=Tag,
        )),

    # Post RSS feed
    url(r'^feeds/posts/$', PostsFeed()),

    # Category RSS feed
    url(r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', CategoryPostsFeed()),
)
</code></pre>

<p>Note that the category RSS feed route is similar to the post RSS feed route, but accepts a <code>slug</code> parameter. We will use this to pass through the slug for the category in question. Also note we import the <code>CategoryPostsFeed</code> view. Now, we need to create that view. Fortunately, because it&rsquo;s written as a Python class, we can extend the existing <code>PostsFeed</code> class. Open up your views file and amend it to look like this:</p>

<pre><code class="python blogengine/views.py">from django.shortcuts import get_object_or_404
from django.views.generic import ListView
from blogengine.models import Category, Post, Tag
from django.contrib.syndication.views import Feed
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe
import markdown2

# Create your views here.
class CategoryListView(ListView):
    def get_queryset(self):
        slug = self.kwargs['slug']
        try:
            category = Category.objects.get(slug=slug)
            return Post.objects.filter(category=category)
        except Category.DoesNotExist:
            return Post.objects.none()


class TagListView(ListView):
    def get_queryset(self):
        slug = self.kwargs['slug']
        try:
            tag = Tag.objects.get(slug=slug)
            return tag.post_set.all()
        except Tag.DoesNotExist:
            return Post.objects.none()


class PostsFeed(Feed):
    title = "RSS feed - posts"
    description = "RSS feed - blog posts"
    link = '/'

    def items(self):
        return Post.objects.order_by('-pub_date')

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        extras = ["fenced-code-blocks"]
        content = mark_safe(markdown2.markdown(force_unicode(item.text),
                                               extras = extras))
        return content


class CategoryPostsFeed(PostsFeed):
    def get_object(self, request, slug):
        return get_object_or_404(Category, slug=slug)

    def title(self, obj):
        return "RSS feed - blog posts in category %s" % obj.name

    def link(self, obj):
        return obj.get_absolute_url()

    def description(self, obj):
        return "RSS feed - blog posts in category %s" % obj.name

    def items(self, obj):
        return Post.objects.filter(category=obj).order_by('-pub_date')
</code></pre>

<p>Note that many of our fields don&rsquo;t have to be explicitly defined as they are inherited from <code>PostsFeed</code>. We can&rsquo;t hard-code the title, link or description because they depend on the category, so we instead define methods to return the appropriate text.</p>

<p>Also note <code>get_object()</code> - we define this so that we can ensure the category exists. If it doesn&rsquo;t exist, then it returns a 404 error rather than showing an empty feed.</p>

<p>We also override <code>items()</code> to filter it to just those posts that are in the given category.</p>

<p>If you run the tests again, they should now pass:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
.........................
----------------------------------------------------------------------
Ran 25 tests in 5.867s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>Let&rsquo;s commit our changes:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Implemented category RSS feed'
</code></pre>

<p>Now, we can get our category RSS feed, but how do we navigate to it? Let&rsquo;s add a link to each category page that directs a user to its RSS feed. To do so, we&rsquo;ll need to create a new template for category pages. First, let&rsquo;s add some code to our tests to ensure that the right template is used at all times. Add the following to the end of the <code>test_index</code> method of <code>PostViewTest</code>:</p>

<pre><code class="python blogengine/tests.py">        # Check the correct template was used
        self.assertTemplateUsed(response, 'blogengine/post_list.html')
</code></pre>

<p>Then, add this to the end of <code>test_post_page</code>:</p>

<pre><code class="python blogengine/tests.py">
        # Check the correct template was used
        self.assertTemplateUsed(response, 'blogengine/post_detail.html')
</code></pre>

<p>Finally, add this to the end of <code>test_category_page</code>:</p>

<pre><code class="python blogengine/tests.py">        # Check the correct template was used
        self.assertTemplateUsed(response, 'blogengine/category_post_list.html')
</code></pre>

<p>These assertions confirm which template was used to generate which request.</p>

<p>Next, we head into our views file:</p>

<pre><code class="python blogengine/views.py">class CategoryListView(ListView):
    template_name = 'blogengine/category_post_list.html'

    def get_queryset(self):
        slug = self.kwargs['slug']
        try:
            category = Category.objects.get(slug=slug)
            return Post.objects.filter(category=category)
        except Category.DoesNotExist:
            return Post.objects.none()

    def get_context_data(self, **kwargs):
        context = super(CategoryListView, self).get_context_data(**kwargs)
        slug = self.kwargs['slug']
        try:
            context['category'] = Category.objects.get(slug=slug)
        except Category.DoesNotExist:
            context['category'] = None
        return context
</code></pre>

<p>Note that we first of all change the template used by this view. Then, we override <code>get_context_data</code> to add in additional data. What we&rsquo;re doing is getting the slug that was passed through, looking up any category for which it is the slug, and returning it as additional context data. Using this method, you can easily add additional data that you may wish to render in your Django templates.</p>

<p>Finally, we create our new template:</p>

<pre><code class="html templates/blogengine/category_post_list.html">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        {% if object_list %}
            {% for post in object_list %}
            &lt;div class="post col-md-12"&gt;
            &lt;h1&gt;&lt;a href="{{ post.get_absolute_url }}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
            &lt;h3&gt;{{ post.pub_date }}&lt;/h3&gt;
            {{ post.text|custom_markdown }}
            &lt;/div&gt;
            {% if post.category %}
            &lt;div class="col-md-12"&gt;
            &lt;a href="{{ post.category.get_absolute_url }}"&gt;&lt;span class="label label-primary"&gt;{{ post.category.name }}&lt;/span&gt;&lt;/a&gt;
            &lt;/div&gt;
            {% endif %}
            {% if post.tags %}
            &lt;div class="col-md-12"&gt;
            {% for tag in post.tags.all %}
            &lt;a href="{{ tag.get_absolute_url }}"&gt;&lt;span class="label label-success"&gt;{{ tag.name }}&lt;/span&gt;&lt;/a&gt;
            {% endfor %}
            &lt;/div&gt;
            {% endif %}
            {% endfor %}
        {% else %}
            &lt;p&gt;No posts found&lt;/p&gt;
        {% endif %}

        &lt;ul class="pager"&gt;
        {% if page_obj.has_previous %}
        &lt;li class="previous"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.previous_page_number }}/"&gt;Previous Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        {% if page_obj.has_next %}
        &lt;li class="next"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.next_page_number }}/"&gt;Next Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        &lt;/ul&gt;

        &lt;a href="http://matthewdaly.co.uk/feeds/posts/category/{{ category.slug }}/"&gt;RSS feed for category {{ category.name }}&lt;/a&gt;

    {% endblock %}
</code></pre>

<p>Note that the category has been passed through to the template and is now accessible. If you run the tests, they should now pass:</p>

<pre><code class="bash">$ python manage.py jenkins
Creating test database for alias 'default'...
.........................
----------------------------------------------------------------------
Ran 25 tests in 7.232s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>With that done. we can commit our changes:</p>

<pre><code class="bash">git add templates/ blogengine/
git commit -m 'Added link to RSS feed from category page'
</code></pre>

<p>Next up, let&rsquo;s implement another RSS feed for tags. First, we&rsquo;ll implement our test:</p>

<pre><code class="python blogengine/tests.py">      def test_tag_feed(self):
          # Create a post
          post = PostFactory(text='This is my *first* blog post')
          tag = TagFactory()
          post.tags.add(tag)
          post.save()

          # Create another post with a different tag
          tag2 = TagFactory(name='perl', description='The Perl programming language', slug='perl')
          post2 = PostFactory(text='This is my *second* blog post', title='My second post', slug='my-second-post')
          post2.tags.add(tag2)
          post2.save()

          # Fetch the feed
          response = self.client.get('/feeds/posts/tag/python/')
          self.assertEquals(response.status_code, 200)

          # Parse the feed
          feed = feedparser.parse(response.content)

          # Check length
          self.assertEquals(len(feed.entries), 1)

          # Check post retrieved is the correct one
          feed_post = feed.entries[0]
          self.assertEquals(feed_post.title, post.title)
          self.assertTrue('This is my &lt;em&gt;first&lt;/em&gt; blog post' in feed_post.description)

          # Check other post is not in this feed
          self.assertTrue('This is my &lt;em&gt;second&lt;/em&gt; blog post' not in response.content)
</code></pre>

<p>This is virtually identical to the test for the categroy feed, but we adjust it to work with the <code>Tag</code> attribute and change the URL. Let&rsquo;s check that our test fails:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
.................F........
======================================================================
FAIL: test_tag_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 757, in test_tag_feed
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

----------------------------------------------------------------------
Ran 26 tests in 5.760s

FAILED (failures=1)
Destroying test database for alias 'default'...
</code></pre>

<p>As before, we create a route for this:</p>

<pre><code class="python blogengine/urls.py">from django.conf.urls import patterns, url
from django.views.generic import ListView, DetailView
from blogengine.models import Post, Category, Tag
from blogengine.views import CategoryListView, TagListView, PostsFeed, CategoryPostsFeed, TagPostsFeed

urlpatterns = patterns('',
    # Index
    url(r'^(?P&lt;page&gt;\d+)?/?$', ListView.as_view(
        model=Post,
        paginate_by=5,
        )),

    # Individual posts
    url(r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', DetailView.as_view(
        model=Post,
        )),

    # Categories
    url(r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', CategoryListView.as_view(
        paginate_by=5,
        model=Category,
        )),

    # Tags
    url(r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', TagListView.as_view(
        paginate_by=5,
        model=Tag,
        )),

    # Post RSS feed
    url(r'^feeds/posts/$', PostsFeed()),

    # Category RSS feed
    url(r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', CategoryPostsFeed()),

    # Tag RSS feed
    url(r'^feeds/posts/tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$', TagPostsFeed()),
)
</code></pre>

<p>Next, we create our view:</p>

<pre><code class="python blogengine/views.py">class TagPostsFeed(PostsFeed):
    def get_object(self, request, slug):
        return get_object_or_404(Tag, slug=slug)

    def title(self, obj):
        return "RSS feed - blog posts tagged  %s" % obj.name

    def link(self, obj):
        return obj.get_absolute_url()

    def description(self, obj):
        return "RSS feed - blog posts tagged %s" % obj.name

    def items(self, obj):
        try:
            tag = Tag.objects.get(slug=obj.slug)
            return tag.post_set.all()
        except Tag.DoesNotExist:
            return Post.objects.none()
</code></pre>

<p>Again, this inherits from <code>PostsFeed</code>, but the syntax for getting posts matching a tag is slightly different because they use a many-to-many relationship.</p>

<p>We also need a template for the tag pages. Add this to the end of the <code>test_tag_page</code> method:</p>

<pre><code class="python blogengine/tests.py">
        # Check the correct template was used
        self.assertTemplateUsed(response, 'blogengine/tag_post_list.html')
</code></pre>

<p>Let&rsquo;s create that template:</p>

<pre><code class="html templates/blogengine/tag_post_list.html">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        {% if object_list %}
            {% for post in object_list %}
            &lt;div class="post col-md-12"&gt;
            &lt;h1&gt;&lt;a href="{{ post.get_absolute_url }}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
            &lt;h3&gt;{{ post.pub_date }}&lt;/h3&gt;
            {{ post.text|custom_markdown }}
            &lt;/div&gt;
            {% if post.category %}
            &lt;div class="col-md-12"&gt;
            &lt;a href="{{ post.category.get_absolute_url }}"&gt;&lt;span class="label label-primary"&gt;{{ post.category.name }}&lt;/span&gt;&lt;/a&gt;
            &lt;/div&gt;
            {% endif %}
            {% if post.tags %}
            &lt;div class="col-md-12"&gt;
            {% for tag in post.tags.all %}
            &lt;a href="{{ tag.get_absolute_url }}"&gt;&lt;span class="label label-success"&gt;{{ tag.name }}&lt;/span&gt;&lt;/a&gt;
            {% endfor %}
            &lt;/div&gt;
            {% endif %}
            {% endfor %}
        {% else %}
            &lt;p&gt;No posts found&lt;/p&gt;
        {% endif %}

        &lt;ul class="pager"&gt;
        {% if page_obj.has_previous %}
        &lt;li class="previous"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.previous_page_number }}/"&gt;Previous Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        {% if page_obj.has_next %}
        &lt;li class="next"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.next_page_number }}/"&gt;Next Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        &lt;/ul&gt;

        &lt;a href="http://matthewdaly.co.uk/feeds/posts/tag/{{ tag.slug }}/"&gt;RSS feed for tag {{ tag.name }}&lt;/a&gt;

    {% endblock %}
</code></pre>

<p>This is virtually identical to the category template. You&rsquo;ll also need to apply this template in the view for the tag list, and pass the tag name through as context data:</p>

<pre><code class="python blogengine/views.py">class TagListView(ListView):
    template_name = 'blogengine/tag_post_list.html'

    def get_queryset(self):
        slug = self.kwargs['slug']
        try:
            tag = Tag.objects.get(slug=slug)
            return tag.post_set.all()
        except Tag.DoesNotExist:
            return Post.objects.none()

    def get_context_data(self, **kwargs):
        context = super(TagListView, self).get_context_data(**kwargs)
        slug = self.kwargs['slug']
        try:
            context['tag'] = Tag.objects.get(slug=slug)
        except Tag.DoesNotExist:
            context['tag'] = None
        return context
</code></pre>

<p>Let&rsquo;s run our tests:</p>

<pre><code class="bash">$ python manage.py test blogengine
Creating test database for alias 'default'...
..........................
----------------------------------------------------------------------
Ran 26 tests in 5.770s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>You may want to do a quick check to ensure your tag feed link works as expected. Time to commit:</p>

<pre><code class="bash">git add blogengine templates
git commit -m 'Implemented tag feeds'
</code></pre>

<h1>Moving our templates</h1>

<p>Before we crack on with implementing search, there&rsquo;s one more piece of housekeeping. In Django, templates can be applied at project level or at app level. So far, we&rsquo;ve been storing them in the project, but we would like our app to be as self-contained as possible so it can just be dropped into future projects where we need a blog. That way, it can be easily overridden for specific projects. You can move the folders and update the Git repository at the same time with this command:</p>

<pre><code class="bash">git mv templates/ blogengine/
</code></pre>

<p>We run the tests to make sure nothing untoward has happened:</p>

<pre><code class="bash">$ python manage.py test
Creating test database for alias 'default'...
..........................
----------------------------------------------------------------------
Ran 26 tests in 5.847s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>And we commit:</p>

<pre><code class="bash">git commit -m 'Moved templates'
</code></pre>

<p>Note that <code>git mv</code> updates Git and moves the files, so you don&rsquo;t need to call <code>git add</code>.</p>

<h1>Implementing search</h1>

<p>For our final task today, we will be implementing a very simple search engine. Our requirements are:</p>

<ul>
<li>It should be in the header, to allow for easy access from anywhere in the front end.</li>
<li>It should search the title and text of posts.</li>
</ul>


<p>First, we&rsquo;ll write our tests:</p>

<pre><code class="python blogengine/tests.py">class SearchViewTest(BaseAcceptanceTest):
    def test_search(self):
        # Create a post
        post = PostFactory()

        # Create another post
        post2 = PostFactory(text='This is my *second* blog post', title='My second post', slug='my-second-post')

        # Search for first post
        response = self.client.get('/search?q=first')
        self.assertEquals(response.status_code, 200)

        # Check the first post is contained in the results
        self.assertTrue('My first post' in response.content)

        # Check the second post is not contained in the results
        self.assertTrue('My second post' not in response.content)

        # Search for second post
        response = self.client.get('/search?q=second')
        self.assertEquals(response.status_code, 200)

        # Check the first post is not contained in the results
        self.assertTrue('My first post' not in response.content)

        # Check the second post is contained in the results
        self.assertTrue('My second post' in response.content)
</code></pre>

<p>Don&rsquo;t forget to run the tests to make sure they fail:</p>

<pre><code class="bash"> python manage.py test
Creating test database for alias 'default'...
..........................F
======================================================================
FAIL: test_search (blogengine.tests.SearchViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 819, in test_search
    self.assertEquals(response.status_code, 200)
AssertionError: 404 != 200

----------------------------------------------------------------------
Ran 27 tests in 6.919s

FAILED (failures=1)
Destroying test database for alias 'default'...
</code></pre>

<p>With that done, we can add the search form to the header:</p>

<p>&#8220;` html blogengine/templates/blogengine/includes/base.html
&lt;!DOCTYPE html></p>

<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->


<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->


<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>{% block title %}My Django Blog{% endblock %}</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="alternate" type="application/rss+xml" title="Blog posts" href="http://matthewdaly.co.uk/feeds/posts/" ></p>

<pre><code>    &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

    {% load staticfiles %}
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/normalize.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/code.css' %}"&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!--[if lt IE 7]&gt;
        &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
    &lt;![endif]--&gt;

    &lt;!-- Add your site or application content here --&gt;

    &lt;div id="fb-root"&gt;&lt;/div&gt;
    &lt;script&gt;(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;

    &lt;div class="navbar navbar-static-top navbar-inverse"&gt;
        &lt;div class="container-fluid"&gt;
            &lt;div class="navbar-header"&gt;
                &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#header-nav"&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;/button&gt;
                &lt;a class="navbar-brand" href="http://matthewdaly.co.uk/"&gt;My Django Blog&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="collapse navbar-collapse" id="header-nav"&gt;
                &lt;ul class="nav navbar-nav"&gt;
                    {% load flatpages %}
                    {% get_flatpages as flatpages %}
                    {% for flatpage in flatpages %}
                    &lt;li&gt;&lt;a href="{{ flatpage.url }}"&gt;{{ flatpage.title }}&lt;/a&gt;&lt;/li&gt;
                    {% endfor %}
                    &lt;li&gt;&lt;a href="http://matthewdaly.co.uk/feeds/posts/"&gt;RSS feed&lt;/a&gt;&lt;/li&gt;

                    &lt;form action="/search" method="GET" class="navbar-form navbar-left"&gt;
                        &lt;div class="form-group"&gt;
                            &lt;input type="text" name="q" placeholder="Search..." class="form-control"&gt;&lt;/input&gt;
                        &lt;/div&gt;
                        &lt;button type="submit" class="btn btn-default"&gt;Search&lt;/button&gt;
                    &lt;/form&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
        {% block header %}
            &lt;div class="page-header"&gt;
                &lt;h1&gt;My Django Blog&lt;/h1&gt;
            &lt;/div&gt;
        {% endblock %}

        &lt;div class="row"&gt;
            {% block content %}{% endblock %}
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container footer"&gt;
        &lt;div class="row"&gt;
            &lt;div class="span12"&gt;
                &lt;p&gt;Copyright &amp;copy; {% now "Y" %}&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;window.jQuery || document.write('&lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}"&gt;&lt;\/script&gt;')&lt;/script&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/plugins.js' %}"&gt;&lt;/script&gt;
    &lt;script src="{% static 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}"&gt;&lt;/script&gt;

    &lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;
    &lt;script&gt;
        (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
        function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
        e=o.createElement(i);r=o.getElementsByTagName(i)[0];
        e.src='//www.google-analytics.com/analytics.js';
        r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
        ga('create','UA-XXXXX-X');ga('send','pageview');
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
&#8220;`</p>

<p>Now we&rsquo;ll actually implement our search. Implementing search using Django&rsquo;s generic views can be fiddly, so we&rsquo;ll write our search view as a function instead. First, amend the imports at the top of your view file to look like this:</p>

<pre><code class="python blogengine/views.py">from django.shortcuts import get_object_or_404, render_to_response
from django.core.paginator import Paginator, EmptyPage
from django.db.models import Q
from django.views.generic import ListView
from blogengine.models import Category, Post, Tag
from django.contrib.syndication.views import Feed
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe
import markdown2
</code></pre>

<p>Next, add the following code to the end of the file:</p>

<pre><code class="python blogengine/views.py">def getSearchResults(request):
    """
    Search for a post by title or text
    """
    # Get the query data
    query = request.GET.get('q', '')
    page = request.GET.get('page', 1)

    # Query the database
    if query:
        results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))
    else:
        results = None

    # Add pagination
    pages = Paginator(results, 5)

    # Get specified page
    try:
        returned_page = pages.page(page)
    except EmptyPage:
        returned_page = pages.page(pages.num_pages)

    # Display the search results
    return render_to_response('blogengine/search_post_list.html',
                              {'page_obj': returned_page,
                               'object_list': returned_page.object_list,
                               'search': query})
</code></pre>

<p>As this is the first time we&rsquo;ve written a view without using generic views, a little explanation is called for. First we get the values of the <code>q</code> and <code>page</code> parameters passed to the view. <code>q</code> contains the query text and <code>page</code> contains the page number. Note also that our page defaults to 1 if not set.</p>

<p>We then use the Q object to perform a query. The Django ORM will <code>AND</code> together keyword argument queries, but that&rsquo;s not the behaviour we want here. Instead we want to be able to search for content in the title or text, so we need to use a query with an <code>OR</code> statement, which necessitates using the <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects">Q</a> object.</p>

<p>Next, we use the <code>Paginator</code> object to manually paginate the results, and if it raises an <code>EmptyPage</code> exception, to just show the last page instead. Finally we render the template <code>blogengine/search_post_list.html</code>, and pass through the parameters <code>page_obj</code> for the returned page, <code>object_list</code> for the objects, and <code>search</code> for the query.</p>

<p>We also need to add a route for our new view:</p>

<pre><code class="python blogengine/urls.py">
    # Search posts
    url(r'^search', 'blogengine.views.getSearchResults'),
</code></pre>

<p>Finally, let&rsquo;s create a new template to show our results:</p>

<pre><code class="html blogengine/templates/blogengine/search_post_list.html">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        {% if object_list %}
            {% for post in object_list %}
            &lt;div class="post col-md-12"&gt;
            &lt;h1&gt;&lt;a href="{{ post.get_absolute_url }}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
            &lt;h3&gt;{{ post.pub_date }}&lt;/h3&gt;
            {{ post.text|custom_markdown }}
            &lt;/div&gt;
            {% if post.category %}
            &lt;div class="col-md-12"&gt;
            &lt;a href="{{ post.category.get_absolute_url }}"&gt;&lt;span class="label label-primary"&gt;{{ post.category.name }}&lt;/span&gt;&lt;/a&gt;
            &lt;/div&gt;
            {% endif %}
            {% if post.tags %}
            &lt;div class="col-md-12"&gt;
            {% for tag in post.tags.all %}
            &lt;a href="{{ tag.get_absolute_url }}"&gt;&lt;span class="label label-success"&gt;{{ tag.name }}&lt;/span&gt;&lt;/a&gt;
            {% endfor %}
            &lt;/div&gt;
            {% endif %}
            {% endfor %}
        {% else %}
            &lt;p&gt;No posts found&lt;/p&gt;
        {% endif %}

        &lt;ul class="pager"&gt;
        {% if page_obj.has_previous %}
        &lt;li class="previous"&gt;&lt;a href="http://matthewdaly.co.uk/search?page={{ page_obj.previous_page_number }}&amp;q={{ search }}"&gt;Previous Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        {% if page_obj.has_next %}
        &lt;li class="next"&gt;&lt;a href="http://matthewdaly.co.uk/search?page={{ page_obj.next_page_number }}&amp;q={{ search }}"&gt;Next Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        &lt;/ul&gt;

    {% endblock %}
</code></pre>

<p>Let&rsquo;s run our tests:</p>

<pre><code class="bash">$ python manage.py test
Creating test database for alias 'default'...
...........................
----------------------------------------------------------------------
Ran 27 tests in 6.421s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>Don&rsquo;t forget to do a quick sense check to make sure it&rsquo;s all working as expected. Then it&rsquo;s time to commit:</p>

<pre><code class="bash">git add blogengine/
git commit -m 'Implemented search'
</code></pre>

<p>And push up your changes:</p>

<pre><code class="bash">git push origin master
git push heroku master
</code></pre>

<p>And that&rsquo;s the end of this instalment. Please note this particular search solution is quite basic, and if you want something more powerful, you may want to look at <a href="http://haystacksearch.org/">Haystack</a>.</p>

<p>As usual, you can get this lesson with <code>git checkout lesson-7</code> - if you have any problems, the <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">repository</a> should be the first place you look for answers as this is the working code base for the application, and with judicious use of a tool like <code>diff</code>, it&rsquo;s generally pretty easy to track down most issues.</p>

<p>In our next, and final instalment, we&rsquo;ll cover:</p>

<ul>
<li>Tidying everything up</li>
<li>Implementing an XML sitemap for search engines</li>
<li>Optimising our site</li>
<li>Using Fabric to make deployment easier</li>
</ul>


<p>Hope to see you then!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Blog Tutorial - the Next Generation - Part 6]]></title>
    <link href="http://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/"/>
    <updated>2014-05-25T17:23:28+01:00</updated>
    <id>http://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6</id>
    <content type="html"><![CDATA[<p>Welcome back! In this tutorial we&rsquo;ll cover the following:</p>

<ul>
<li>Fixing bugs the TDD way</li>
<li>Setting up syntax highlighting for code snippets</li>
<li>Tidying up the front end</li>
</ul>


<p>Apologies, but I&rsquo;m holding over implementing the search and additional feeds for a future instalment - in the past I&rsquo;ve tried to cover too much in one post and that has led to me putting them off for much too long. So this instalment and future ones are going to be shorter so I can get them out the door quicker.</p>

<p>Ready? Let&rsquo;s get started!</p>

<h1>Fixing bugs</h1>

<p>When someone reports a bug, it&rsquo;s tempting to just dive straight in and start fixing it. But TDD cautions us against this practice. If we have a bug, then our tests should have caught it. If they don&rsquo;t, then before we fix the bug, we have to make sure we can catch it if it crops up in future by implementing a test for it, and ensuring that it fails. Once that test is in place, we can then go ahead and fix the bug, safe in the knowledge that if it should reappear in future, we will be warned when our tests run.</p>

<p>As it happens, we have a bug in our web app. If you activate your virtualenv in the usual way and run the development server, and then try to create a new post without adding a tag, you&rsquo;ll see that it fails as the tag is empty. Now, it&rsquo;s pretty obvious that this is because the <code>tags</code> attribute of the <code>Post</code> model cannot be blank, so we have a good idea of what we need to do to fix this. But to make sure it never occurs again, we need to implement a test first.</p>

<p>Add the following method to <code>AdminTest</code>:</p>

<pre><code class="python blogengine/tests.py">    def test_create_post_without_tag(self):
        # Create the category
        category = Category()
        category.name = 'python'
        category.description = 'The Python programming language'
        category.save()

        # Log in
        self.client.login(username='bobsmith', password="password")

        # Check response code
        response = self.client.get('/admin/blogengine/post/add/')
        self.assertEquals(response.status_code, 200)

        # Create the new post
        response = self.client.post('/admin/blogengine/post/add/', {
            'title': 'My first post',
            'text': 'This is my first post',
            'pub_date_0': '2013-12-28',
            'pub_date_1': '22:00:04',
            'slug': 'my-first-post',
            'site': '1',
            'category': '1'
        },
        follow=True
        )
        self.assertEquals(response.status_code, 200)

        # Check added successfully
        self.assertTrue('added successfully' in response.content)

        # Check new post now in database
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), 1)
</code></pre>

<p>This is virtually identical to our previous method for adding a post, but doesn&rsquo;t add a tag to the post. If you run <code>python manage.py jenkins</code>, the test should fail. Let&rsquo;s commit our changes:</p>

<pre><code class="bash">git add blogengine/tests.py
git commit -m 'Added failing test for posts without tags'
</code></pre>

<p>Now we&rsquo;re in a position to fix our bug. Let&rsquo;s take a look at our models:</p>

<pre><code class="python blogengine/models.py">class Post(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=40, unique=True)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=True, null=True)
    tags = models.ManyToManyField(Tag)
</code></pre>

<p>If you compare <code>category</code> and <code>tags</code>, you&rsquo;ll immediately see that <code>category</code> has the additional parameters <code>blank</code> and <code>null</code> both set to <code>True</code>. So that&rsquo;s what we need to do for <code>tags</code> as well. Amend the model to look like this:</p>

<pre><code class="python blogengine/models.py">class Post(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=40, unique=True)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=True, null=True)
    tags = models.ManyToManyField(Tag, blank=True, null=True)
</code></pre>

<p>You shouldn&rsquo;t have to create a migration for this. Let&rsquo;s run our tests:</p>

<pre><code class="bash">$ python manage.py jenkins --coverage-html-report=htmlcov
Creating test database for alias 'default'...
.......................
----------------------------------------------------------------------
Ran 23 tests in 7.634s

OK
Destroying test database for alias 'default'...
</code></pre>

<p>Our tests pass! So we&rsquo;ve fixed our bug, and we&rsquo;ve ensured that if it happens again, we&rsquo;ll catch it. With that done, it&rsquo;s time to commit:</p>

<pre><code class="bash">git add blogengine/models.py
git commit -m 'Fixed a bug with the Post model'
</code></pre>

<p><strong>Remember</strong>: Always make the effort to create a test to reproduce your bug before fixing it. That way, you know you can catch it in future.</p>

<h1>Syntax highlighting</h1>

<p>This is one feature that not everyone will want to implement. If you want to be able to show code snippets on your blog, then implementing syntax highlighting is well worth your time. However, if that&rsquo;s not what you want to use your blog for, feel free to skip over this section.</p>

<p>Now, earlier in the series we implemented Markdown support. In Markdown there are two main ways to denote a code block. One is to indent the code by four spaces, while the other is to use <a href="https://help.github.com/articles/github-flavored-markdown#syntax-highlighting">fenced code blocks with syntax highlighting</a>. There are many flavours of Markdown available for Python, and unfortunately the one we&rsquo;ve been using so far doesn&rsquo;t support fenced code blocks, so we&rsquo;ll be switching to one that does.</p>

<p>We also need to be able to generate a suitable stylesheet to highlight the code appropriately. For that, we&rsquo;ll be using <a href="http://pygments.org/">Pygments</a>. So let&rsquo;s first uninstall our existing implementation of Markdown:</p>

<pre><code class="bash">pip uninstall Markdown
</code></pre>

<p>And install the new modules:</p>

<pre><code class="bash">pip install markdown2 Pygments
</code></pre>

<p>Don&rsquo;t forget to record the changes:</p>

<pre><code class="bash">pip freeze &gt; requirements.txt
</code></pre>

<p>Now, we need to amend our Markdown template tags to use the new version of Markdown:</p>

<pre><code class="python blogengine/templatetags/custom_markdown.py">import markdown2

from django import template
from django.template.defaultfilters import stringfilter
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe

register = template.Library()

@register.filter(is_safe=True)
@stringfilter
def custom_markdown(value):
    extras = ["fenced-code-blocks"]

    return mark_safe(markdown2.markdown(force_unicode(value),
                                       extras = extras))
</code></pre>

<p>All we do here is change the Markdown module that gets imported, and amend how it is called. Note that we pass through the parameter <code>fenced-code-blocks</code> to enable this functionality.</p>

<p>If you now run the development server and create a post with some code in it (just copy the Ruby example from <a href="https://help.github.com/articles/github-flavored-markdown#syntax-highlighting">here</a>), then view it on the site, you should be able to see that it&rsquo;s in a <code>&lt;code&gt;</code> block. However, it&rsquo;s not highlighted yet. Let&rsquo;s commit our changes:</p>

<pre><code class="bash">git add requirements/txt blogengine/templatetags/custom_markdown.py
git commit -m 'Now use Markdown2 to allow for syntax highlighting'
</code></pre>

<p>Now, if you examine the markup for your code blocks using your browser&rsquo;s developer tools, you&rsquo;ll notice that the code is wrapped in many different spans with various classes. Pygments can generate a CSS file that uses those classes to highlight your code.</p>

<p>First, let&rsquo;s create a folder to store our CSS files in:</p>

<pre><code class="bash">mkdir blogengine/static/css
</code></pre>

<p>Next, we&rsquo;ll add a blank CSS file for any other styling we may want to apply:</p>

<pre><code class="bash">touch blogengine/static/css/main.css
</code></pre>

<p>Then, we generate our CSS file:</p>

<pre><code class="bash">pygmentize -S default -f html &gt; blogengine/static/css/code.css
</code></pre>

<p>We need to include our CSS files in our HTML template:</p>

<p>&#8220;` html templates/blogengine/includes/base.html
&lt;!DOCTYPE html></p>

<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->


<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->


<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>{% block title %}My Django Blog{% endblock %}</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1"></p>

<pre><code>    &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

    {% load staticfiles %}
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/normalize.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/code.css' %}"&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!--[if lt IE 7]&gt;
        &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
    &lt;![endif]--&gt;

    &lt;!-- Add your site or application content here --&gt;

    &lt;div id="fb-root"&gt;&lt;/div&gt;
    &lt;script&gt;(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;

    &lt;div class="navbar navbar-static-top navbar-inverse"&gt;
        &lt;div class="navbar-inner"&gt;
            &lt;div class="container"&gt;
                &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;/a&gt;
                &lt;a class="brand" href="http://matthewdaly.co.uk/"&gt;My Django Blog&lt;/a&gt;
                &lt;div class="nav-collapse collapse"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
        {% block header %}
            &lt;div class="page-header"&gt;
                &lt;h1&gt;My Django Blog&lt;/h1&gt;
            &lt;/div&gt;
        {% endblock %}

        &lt;div class="row"&gt;
            {% block content %}{% endblock %}
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container footer"&gt;
        &lt;div class="row"&gt;
            &lt;div class="span12"&gt;
                &lt;p&gt;Copyright &amp;copy; {% now "Y" %}&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;window.jQuery || document.write('&lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}"&gt;&lt;\/script&gt;')&lt;/script&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/plugins.js' %}"&gt;&lt;/script&gt;
    &lt;script src="{% static 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}"&gt;&lt;/script&gt;

    &lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;
    &lt;script&gt;
        (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
        function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
        e=o.createElement(i);r=o.getElementsByTagName(i)[0];
        e.src='//www.google-analytics.com/analytics.js';
        r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
        ga('create','UA-XXXXX-X');ga('send','pageview');
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
&#8220;`</p>

<p>Now, if you run the development server and reload the page, your code will be highlighted using the default Pygments style. If you don&rsquo;t like it, there are plenty to choose from. Run the following command:</p>

<pre><code class="bash">pygmentize -L styles
</code></pre>

<p>That will list the various styles available. For instance, let&rsquo;s say we want to try the Tango style:</p>

<pre><code class="bash">pygmentize -S tango -f html &gt; blogengine/static/css/code.css
</code></pre>

<p>If you like the Monokai theme in Sublime Text, there&rsquo;s a Pygments version of that:</p>

<pre><code class="bash">pygmentize -S monokai -f html &gt; blogengine/static/css/code.css
</code></pre>

<p>If you like the Solarized theme, that&rsquo;s not bundled with Pygments, but can be installed separately:</p>

<pre><code class="bash">pip install pygments-style-solarized
</code></pre>

<p>Then run this for the light version:</p>

<pre><code class="bash">pygmentize -S solarizedlight -f html &gt; blogengine/static/css/code.css
</code></pre>

<p>And this for the dark version:</p>

<pre><code class="bash">pygmentize -S solarizeddark -f html &gt; blogengine/static/css/code.css
</code></pre>

<p>Pick one that you like - I&rsquo;m going to go for the dark version of Solarized.</p>

<p>Note that this doesn&rsquo;t actually change the background colour of the code blocks. You will therefore need to set this manually using the CSS file we created earlier. If you&rsquo;re using Solarized Dark like I am, then this should set it correctly:</p>

<pre><code class="css blogengine/static/css/main.css">div.codehilite pre {
    background-color: #002b36;
}
</code></pre>

<p>If you&rsquo;re using Solarized Light, then this should be more appropriate:</p>

<pre><code class="css blogengine/static/css/main.css">div.codehilite pre {
    background-color: #fdf6e3;
}
</code></pre>

<p>Or, if you&rsquo;re using Monokai, black will do:</p>

<pre><code class="css blogengine/static/css/main.css">div.codehilite pre {
    background-color: #000000;
}
</code></pre>

<p>With that done, let&rsquo;s record the additional Pygments style:</p>

<pre><code class="bash">pip freeze &gt; requirements.txt
</code></pre>

<p>And commit our changes:</p>

<pre><code class="bash">git add requirements.txt blogengine/static/css/ templates/blogengine/includes/base.html
git commit -m 'Styled code with Solarized Dark'
</code></pre>

<p>Let&rsquo;s run our tests:</p>

<pre><code class="bash">$ python manage.py jenkins
Creating test database for alias 'default'...
E
======================================================================
ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)
----------------------------------------------------------------------
ImportError: Failed to import test module: blogengine.tests
Traceback (most recent call last):
  File "/usr/local/Cellar/python/2.7.6_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py", line 254, in _find_tests
    module = self._get_module_from_name(name)
  File "/usr/local/Cellar/python/2.7.6_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py", line 232, in _get_module_from_name
    __import__(name)
  File "/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py", line 7, in &lt;module&gt;
    import markdown
ImportError: No module named markdown


----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
Destroying test database for alias 'default'...
</code></pre>

<p>Whoops! We introduced an error here. If we take a look, we can see that the problem is on line 7, where we import the Markdown module. That makes sense, as we now use a different implementation of Markdown. Fortunately, in Python you can import modules with a different name, which makes this a breeze to fix. Change the line to:</p>

<pre><code class="python blogengine/tests.py">import markdown2 as markdown
</code></pre>

<p>Now, if you run your tests, they should pass. It&rsquo;s important that if a test breaks, you fix it as soon as possible and don&rsquo;t put it off. Let&rsquo;s commit these changes:</p>

<pre><code class="bash">git add blogengine/tests.py
git commit -m 'Fixed a broken test'
</code></pre>

<p>Our syntax highlighting is now done! If you want to see it in action using the Solarized Dark theme, check out the copy of this blogging engine hosted <a href="http://blog.shellshocked.info/">here</a>.</p>

<h1>Tidying up</h1>

<p>Now that our blog is up and running on Heroku, it could do with a bit of work on the front end to make it look a bit nicer. If you recall, we&rsquo;re using Bootstrap for our front end, so you may want to refer to the documentation for that to give you some ideas on how you want to style your blog.</p>

<p>Bootstrap has a nifty pager class for Next and Previous links, so let&rsquo;s apply that to our post list template:</p>

<pre><code class="html templates/blogengine/post_list.html">&lt;ul class="pager"&gt;
        {% if page_obj.has_previous %}
        &lt;li class="previous"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.previous_page_number }}/"&gt;Previous Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        {% if page_obj.has_next %}
        &lt;li class="next"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.next_page_number }}/"&gt;Next Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        &lt;/ul&gt;
</code></pre>

<p>Let&rsquo;s also add labels to our categories and tags. We&rsquo;ll also place our posts and other content inside proper columns:</p>

<pre><code class="html templates/blogengine/post_list.html">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        {% if object_list %}
            {% for post in object_list %}
            &lt;div class="post col-md-12"&gt;
            &lt;h1&gt;&lt;a href="{{ post.get_absolute_url }}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
            &lt;h3&gt;{{ post.pub_date }}&lt;/h3&gt;
            {{ post.text|custom_markdown }}
            &lt;/div&gt;
            {% if post.category %}
            &lt;div class="col-md-12"&gt;
            &lt;a href="{{ post.category.get_absolute_url }}"&gt;&lt;span class="label label-primary"&gt;{{ post.category.name }}&lt;/span&gt;&lt;/a&gt;
            &lt;/div&gt;
            {% endif %}
            {% if post.tags %}
            &lt;div class="col-md-12"&gt;
            {% for tag in post.tags.all %}
            &lt;a href="{{ tag.get_absolute_url }}"&gt;&lt;span class="label label-success"&gt;{{ tag.name }}&lt;/span&gt;&lt;/a&gt;
            {% endfor %}
            &lt;/div&gt;
            {% endif %}
            {% endfor %}
        {% else %}
            &lt;p&gt;No posts found&lt;/p&gt;
        {% endif %}

        &lt;ul class="pager"&gt;
        {% if page_obj.has_previous %}
        &lt;li class="previous"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.previous_page_number }}/"&gt;Previous Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        {% if page_obj.has_next %}
        &lt;li class="next"&gt;&lt;a href="http://matthewdaly.co.uk/{{ page_obj.next_page_number }}/"&gt;Next Page&lt;/a&gt;&lt;/li&gt;
        {% endif %}
        &lt;/ul&gt;

    {% endblock %}
</code></pre>

<p>We&rsquo;ll also want to tidy up the layout for our individual post pages:</p>

<pre><code class="html templates/blogengine/post_detail.html">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        &lt;div class="post col-md-12"&gt;
        &lt;h1&gt;{{ object.title }}&lt;/h1&gt;
        &lt;h3&gt;{{ object.pub_date }}&lt;/h3&gt;
        {{ object.text|custom_markdown }}
        &lt;/div&gt;
        {% if object.category %}
        &lt;div class="col-md-12"&gt;
        &lt;a href="{{ object.category.get_absolute_url }}"&gt;&lt;span class="label label-primary"&gt;{{ object.category.name }}&lt;/span&gt;&lt;/a&gt;
        &lt;/div&gt;
        {% endif %}
        {% if object.tags %}
        &lt;div class="col-md-12"&gt;
        {% for tag in object.tags.all %}
        &lt;a href="{{ tag.get_absolute_url }}"&gt;&lt;span class="label label-success"&gt;{{ tag.name }}&lt;/span&gt;&lt;/a&gt;
        {% endfor %}
        &lt;/div&gt;
        {% endif %}

        &lt;div class="col-md-12"&gt;
        &lt;h4&gt;Comments&lt;/h4&gt;
        &lt;div class="fb-comments" data-href="http://{{ object.site }}{{ object.get_absolute_url }}" data-width="470" data-num-posts="10"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;/div&gt;

    {% endblock %}
</code></pre>

<p>Time to commit our changes:</p>

<pre><code class="bash">git add templates/blogengine/
git commit -m 'Tidied up post templates'
</code></pre>

<p>With that done, let&rsquo;s turn our attention to our base template. We&rsquo;ll amend the header to collapse down at smaller screen widths. This is easy to do with Bootstrap:</p>

<p>&#8220;` html templates/blogengine/includes/base.html
&lt;!DOCTYPE html></p>

<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->


<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->


<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>{% block title %}My Django Blog{% endblock %}</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="alternate" type="application/rss+xml" title="Blog posts" href="http://matthewdaly.co.uk/feeds/posts/" ></p>

<pre><code>    &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

    {% load staticfiles %}
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/normalize.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/html5-boilerplate/css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/main.css' %}"&gt;
    &lt;link rel="stylesheet" href="{% static 'css/code.css' %}"&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!--[if lt IE 7]&gt;
        &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
    &lt;![endif]--&gt;

    &lt;!-- Add your site or application content here --&gt;

    &lt;div id="fb-root"&gt;&lt;/div&gt;
    &lt;script&gt;(function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;

    &lt;div class="navbar navbar-static-top navbar-inverse"&gt;
        &lt;div class="container-fluid"&gt;
            &lt;div class="navbar-header"&gt;
                &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#header-nav"&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                    &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;/button&gt;
                &lt;a class="navbar-brand" href="http://matthewdaly.co.uk/"&gt;My Django Blog&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="collapse navbar-collapse" id="header-nav"&gt;
                &lt;ul class="nav navbar-nav"&gt;
                    {% load flatpages %}
                    {% get_flatpages as flatpages %}
                    {% for flatpage in flatpages %}
                    &lt;li&gt;&lt;a href="{{ flatpage.url }}"&gt;{{ flatpage.title }}&lt;/a&gt;&lt;/li&gt;
                    {% endfor %}
                    &lt;li&gt;&lt;a href="http://matthewdaly.co.uk/feeds/posts/"&gt;RSS feed&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
        {% block header %}
            &lt;div class="page-header"&gt;
                &lt;h1&gt;My Django Blog&lt;/h1&gt;
            &lt;/div&gt;
        {% endblock %}

        &lt;div class="row"&gt;
            {% block content %}{% endblock %}
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container footer"&gt;
        &lt;div class="row"&gt;
            &lt;div class="span12"&gt;
                &lt;p&gt;Copyright &amp;copy; {% now "Y" %}&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;window.jQuery || document.write('&lt;script src="{% static 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}"&gt;&lt;\/script&gt;')&lt;/script&gt;
    &lt;script src="{% static 'bower_components/html5-boilerplate/js/plugins.js' %}"&gt;&lt;/script&gt;
    &lt;script src="{% static 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}"&gt;&lt;/script&gt;

    &lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;
    &lt;script&gt;
        (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
        function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
        e=o.createElement(i);r=o.getElementsByTagName(i)[0];
        e.src='//www.google-analytics.com/analytics.js';
        r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
        ga('create','UA-XXXXX-X');ga('send','pageview');
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
&#8220;`</p>

<p>Here we&rsquo;ve also added a link to our RSS feed in the header, and another in the page head to facilitate working with browsers that support RSS better.</p>

<p>Our blog&rsquo;s now looking much more presentable. All that remains is to commit it:</p>

<pre><code class="bash">git add templates/blogengine/includes/base.html
git commit -m 'Amended base template'
</code></pre>

<p>Now we can push it to GitHub and deploy it on Heroku:</p>

<pre><code class="bash">git push origin master
git push heroku master
</code></pre>

<p>And we&rsquo;re done! Don&rsquo;t forget, you can grab this lesson with <code>git checkout lesson-6</code>.</p>

<p>Next time, we&rsquo;ll cover search (I promise!).</p>
]]></content>
  </entry>
  
</feed>
