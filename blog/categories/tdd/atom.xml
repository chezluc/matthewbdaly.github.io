<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[tdd | Matthew Daly's Blog]]></title>
        <description><![CDATA[tdd | I'm a web developer in Norfolk. This is my blog...]]></description>
        <link>http://github.com/dylang/node-rss</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sun, 15 Feb 2015 19:05:40 GMT</lastBuildDate>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 9]]></title>
            <description><![CDATA[<p>Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I’d like to show you how to upgrade to it.</p>
<p>The biggest change is that Django 1.7 introduces its own migration system, which means South is now surplus to requirements. We therefore need to switch from South to Django’s native migrations. Fortunately, this is fairly straightforward.</p>
<p>First of all, activate your virtualenv:</p>
<pre><code class="hljs lang-bash">$ virtualenv venv
</code></pre>
<p>Then make sure your migrations are up to date:</p>
<pre><code class="hljs lang-bash">$ python manage.py syncdb
$ python manage.py migrate
</code></pre>
<p>Then, upgrade your Django version and uninstall South:</p>
<pre><code class="hljs lang-bash">$ pip install Django --upgrade
$ pip uninstall South
$ pip freeze &gt; requirements.txt
</code></pre>
<p>Next, remove South from <code>INSTALLED_APPS</code> in <code>django_tutorial_blog_ng/settings.py</code>.</p>
<p>You now need to delete all of the numbered migration files in <code>blogengine/migrations/</code>, and the relevant <code>.pyc</code> files, but NOT the directory or the <code>__init__.py</code> file. You can do so with this command on Linux or OS X:</p>
<pre><code class="hljs lang-bash">$ rm blogengine/migrations/<span class="hljs-number">00</span>*
</code></pre>
<p>Next, we recreate our migrations with the following command:</p>
<pre><code class="hljs lang-bash">$ python manage.py makemigrations
Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'blogengine'</span>:
  <span class="hljs-number">0001</span>_initial.py:
    - Create model Category
    - Create model Post
    - Create model Tag
    - Add field tags to post
</code></pre>
<p>Then we run the migrations:</p>
<pre><code class="hljs lang-bash">$ python manage.py migrate
Operations to perform:
  Synchronize unmigrated apps: sitemaps, django_jenkins, debug_toolbar
  Apply all migrations: sessions, admin, sites, flatpages, contenttypes, auth, blogengine
Synchronizing apps without migrations:
  Creating tables...
  Installing custom SQL...
  Installing indexes...
Running migrations:
  Applying contenttypes.<span class="hljs-number">0001</span>_initial... FAKED
  Applying auth.<span class="hljs-number">0001</span>_initial... FAKED
  Applying admin.<span class="hljs-number">0001</span>_initial... FAKED
  Applying sites.<span class="hljs-number">0001</span>_initial... FAKED
  Applying blogengine.<span class="hljs-number">0001</span>_initial... FAKED
  Applying flatpages.<span class="hljs-number">0001</span>_initial... FAKED
  Applying sessions.<span class="hljs-number">0001</span>_initial... FAKED
</code></pre>
<p>Don’t worry too much if the output doesn’t look exactly the same as this - as long as it works, that’s the main thing.</p>
<p>Let’s run our test suite to ensure it works:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
....FF.F.FFFFFF..............
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">385</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_post_without_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">417</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post_without_tag
    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">278</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_delete_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">346</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">255</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">447</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">323</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_login (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">183</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_login
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span> (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">214</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span>
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">29</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.383</span>s

FAILED (failures=<span class="hljs-number">9</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>We have an issue here. A load of the tests for the admin interface now fail. If we now try running the dev server, we see this error:</p>
<pre><code class="hljs lang-bash">$ python manage.py runserver
Performing system checks...

System check identified no issues (<span class="hljs-number">0</span> silenced).
September <span class="hljs-number">28</span>, <span class="hljs-number">2014</span> - <span class="hljs-number">20</span>:<span class="hljs-number">16</span>:<span class="hljs-number">47</span>
Django version <span class="hljs-number">1.7</span>, using settings <span class="hljs-string">'django_tutorial_blog_ng.settings'</span>
Starting development server at http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span>/
Quit the server with CONTROL-C.
Unhandled exception <span class="hljs-keyword">in</span> thread started by &lt;<span class="hljs-keyword">function</span> wrapper at <span class="hljs-number">0</span>x1024a5ed8&gt;
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/autoreload.py"</span>, line <span class="hljs-number">222</span>, <span class="hljs-keyword">in</span> wrapper
    fn(*args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line <span class="hljs-number">132</span>, <span class="hljs-keyword">in</span> inner_run
    handler = self.get_handler(*args, **options)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/runserver.py"</span>, line <span class="hljs-number">25</span>, <span class="hljs-keyword">in</span> get_handler
    handler = super(Command, self).get_handler(*args, **options)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line <span class="hljs-number">48</span>, <span class="hljs-keyword">in</span> get_handler
    <span class="hljs-built_in">return</span> get_internal_wsgi_application()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py"</span>, line <span class="hljs-number">66</span>, <span class="hljs-keyword">in</span> get_internal_wsgi_application
    sys.exc_info()[<span class="hljs-number">2</span>])
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py"</span>, line <span class="hljs-number">56</span>, <span class="hljs-keyword">in</span> get_internal_wsgi_application
    <span class="hljs-built_in">return</span> import_string(app_path)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/module_loading.py"</span>, line <span class="hljs-number">26</span>, <span class="hljs-keyword">in</span> import_string
    module = import_module(module_path)
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.8_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py"</span>, line <span class="hljs-number">37</span>, <span class="hljs-keyword">in</span> import_module
    __import__(name)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/django_tutorial_blog_ng/wsgi.py"</span>, line <span class="hljs-number">14</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    from dj_static import Cling
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/dj_static.py"</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    from django.core.handlers.base import get_path_info
django.core.exceptions.ImproperlyConfigured: WSGI application <span class="hljs-string">'django_tutorial_blog_ng.wsgi.application'</span> could not be loaded; Error importing module: <span class="hljs-string">'cannot import name get_path_info'</span>
</code></pre>
<p>Fortunately, the error above is easy to fix by upgrading <code>dj_static</code>:</p>
<pre><code class="hljs lang-bash">$ pip install dj_static --upgrade
$ pip freeze &gt; requirements.txt
</code></pre>
<p>That resolves the error in serving static files, but not the error with the admin. If you run the dev server, you’ll be able to see that the admin actually works fine. The problem is caused by the test client not following redirects in the admin. We can easily run just the admin tests with the following command:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine.tests.AdminTest
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.FF.F.FFFFFF
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">385</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_post_without_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">417</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post_without_tag
    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">278</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_delete_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">346</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">255</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">447</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">323</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_login (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">183</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_login
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span> (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">214</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_<span class="hljs-built_in">logout</span>
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">302</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">12</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.283</span>s

FAILED (failures=<span class="hljs-number">9</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s commit our changes so far first:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/ requirements.txt blogengine/
$ git commit -m <span class="hljs-string">'Upgraded to Django 1.7'</span>
</code></pre>
<p>Now let’s fix our tests. Here’s the amended version of the <code>AdminTest</code> class:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Get login page</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>, follow=<span class="hljs-keyword">True</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log out</span>
        self.client.logout()

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/category/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new category</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/add/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span>
            },
            follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new category now in database</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = CategoryFactory()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the category</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/'</span> + str(category.pk) + <span class="hljs-string">'/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span>
            }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check category amended</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)
        only_category = all_categories[<span class="hljs-number">0</span>]
        self.assertEquals(only_category.name, <span class="hljs-string">'perl'</span>)
        self.assertEquals(only_category.description, <span class="hljs-string">'The Perl programming language'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = CategoryFactory()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the category</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/'</span> + str(category.pk) + <span class="hljs-string">'/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check category deleted</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">0</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new tag</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span>
            },
            follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new tag now in database</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = TagFactory()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the tag</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/'</span> + str(tag.pk) + <span class="hljs-string">'/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span>
            }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check tag amended</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)
        only_tag = all_tags[<span class="hljs-number">0</span>]
        self.assertEquals(only_tag.name, <span class="hljs-string">'perl'</span>)
        self.assertEquals(only_tag.description, <span class="hljs-string">'The Perl programming language'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = TagFactory()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the tag</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/'</span> + str(tag.pk) + <span class="hljs-string">'/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check tag deleted</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">0</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = CategoryFactory()

        <span class="hljs-comment"># Create the tag</span>
        tag = TagFactory()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: str(category.pk),
            <span class="hljs-string">'tags'</span>: str(tag.pk)
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post_without_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = CategoryFactory()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: str(category.pk)
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = PostFactory()

        <span class="hljs-comment"># Create the category</span>
        category = CategoryFactory()

        <span class="hljs-comment"># Create the tag</span>
        tag = TagFactory()
        post.tags.add(tag)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/'</span> + str(post.pk) + <span class="hljs-string">'/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: str(category.pk),
            <span class="hljs-string">'tags'</span>: str(tag.pk)
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = PostFactory()

        <span class="hljs-comment"># Create the tag</span>
        tag = TagFactory()
        post.tags.add(tag)

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/'</span> + str(post.pk) + <span class="hljs-string">'/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post deleted</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)
</code></pre>
<p>There are two main issues here. The first is that when we try to edit or delete an existing item, or refer to it when creating something else, we can no longer rely on the number representing the primary key being set to 1. So we need to specifically obtain this, rather than hard-coding it to 1. Therefore, whenever we pass through a number to represent an item (with the exception of the site, but including tags, categories and posts), we need to instead fetch its primary key and return it. So, above where we try to delete a post, we replace <code>1</code> with <code>str(post.pk)</code>. This will solve a lot of the problems. As there’s a lot of them, I won’t go through each one, but you can see the entire class above for reference, and if you’ve followed along so far, you shouldn’t have any problems.</p>
<p>The other issue we need to fix is the login and logout tests. We simply add <code>follow=True</code> to these to ensure that the test client follows the redirects.</p>
<p>Let’s run our tests to make sure they pass:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.............................
----------------------------------------------------------------------
Ran <span class="hljs-number">29</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">8.210</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>With that done, you can commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/tests.py
$ git commit -m <span class="hljs-string">'Fixed broken tests'</span>
</code></pre>
<p>Don’t forget to deploy your changes:</p>
<pre><code class="hljs lang-bash">$ fab deploy
</code></pre>
<p>Our blog has now been happily migrated over to Django 1.7!</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/</guid>
            <pubDate>Sun, 28 Sep 2014 19:51:02 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 8]]></title>
            <description><![CDATA[<p>Hello again! In our final instalment, we’ll wrap up our blog by:</p>
<ul>
<li>Implementing a sitemap</li>
<li>Optimising and tidying up the site</li>
<li>Creating a Fabric task for easier deployment</li>
</ul>
<p>I’ll also cover development tools and practices that can make using Django easier. But first there’s a few housekeeping tasks that need doing…</p>
<p>Don’t forget to activate your virtualenv - you should know how to do this off by heart by now!</p>
<h1 id="upgrading-django">Upgrading Django</h1>
<p>At the time of writing, Django 1.7 is due any day now, but it’s not out yet so I won’t cover it. The biggest change is the addition of a built-in migration system, but switching from South to this is well-documented. When Django 1.7 comes out, it shouldn’t be difficult to upgrade to it - because we have good test coverage, we shouldn’t have much trouble catching errors.</p>
<p>However, Django 1.6.6 was recently released, and we need to upgrade to it. Just enter the following command to upgrade:</p>
<pre><code class="hljs lang-bash">$ pip install Django --upgrade
</code></pre>
<p>Then add it to your <code>requirements.txt</code>:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
</code></pre>
<p>Then commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add requirements.txt
$ git commit -m <span class="hljs-string">'Upgraded Django version'</span>
</code></pre>
<h1 id="implementing-a-sitemap">Implementing a sitemap</h1>
<p>Creating a sitemap for your blog is a good idea - it can be submitted to search engines, so that they can easily find your content. With Django, it’s pretty straightforward too.</p>
<p>First, let’s create a test for our sitemap. Add the following code at the end of <code>tests.py</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SitemapTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_sitemap</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create a post</span>
        post = PostFactory()

        <span class="hljs-comment"># Create a flat page</span>
        page = FlatPageFactory()

        <span class="hljs-comment"># Get sitemap</span>
        response = self.client.get(<span class="hljs-string">'/sitemap.xml'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check post is present in sitemap</span>
        self.assertTrue(<span class="hljs-string">'my-first-post'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check page is present in sitemap</span>
        self.assertTrue(<span class="hljs-string">'/about/'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Run it, and you should see the test fail:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
...........................F
======================================================================
FAIL: <span class="hljs-built_in">test</span>_sitemap (blogengine.tests.SitemapTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">847</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_sitemap
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">28</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">6.873</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Now, let’s implement our sitemap. The sitemap application comes with Django, and needs to be activated in your settings file, under <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-string">'django.contrib.sitemaps'</span>,
</code></pre>
<p>Next, let’s think about what content we want to include in the sitemap. We want to index our flat pages and our blog posts, so our sitemap should reflect that. Create a new file at <code>blogengine/sitemap.py</code> and enter the following text:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.contrib.sitemaps <span class="hljs-keyword">import</span> Sitemap
<span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostSitemap</span><span class="hljs-params">(Sitemap)</span>:</span>
    changefreq = <span class="hljs-string">"always"</span>
    priority = <span class="hljs-number">0.5</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> Post.objects.all()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lastmod</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> obj.pub_date


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatpageSitemap</span><span class="hljs-params">(Sitemap)</span>:</span>
    changefreq = <span class="hljs-string">"always"</span>
    priority = <span class="hljs-number">0.5</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> FlatPage.objects.all()
</code></pre>
<p>We define two sitemaps, one for all the posts, and the other for all the flat pages. Note that this works in a very similar way to the syndication framework.</p>
<p>Next, we amend our URLs. Add the following text after the existing imports in your URL file:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.contrib.sitemaps.views <span class="hljs-keyword">import</span> sitemap
<span class="hljs-keyword">from</span> blogengine.sitemap <span class="hljs-keyword">import</span> PostSitemap, FlatpageSitemap

<span class="hljs-comment"># Define sitemaps</span>
sitemaps = {
    <span class="hljs-string">'posts'</span>: PostSitemap,
    <span class="hljs-string">'pages'</span>: FlatpageSitemap
}
</code></pre>
<p>Then add the following after the existing routes:</p>
<pre><code class="hljs lang-python">    <span class="hljs-comment"># Sitemap</span>
    url(<span class="hljs-string">r'^sitemap\.xml$'</span>, sitemap, {<span class="hljs-string">'sitemaps'</span>: sitemaps},
            name=<span class="hljs-string">'django.contrib.sitemaps.views.sitemap'</span>),
</code></pre>
<p>Here we define what sitemaps we’re going to use, and we define a URL for them. It’s pretty straightforward to use.</p>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
............................
----------------------------------------------------------------------
Ran <span class="hljs-number">28</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">6.863</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>And done! Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ django_tutorial_blog_ng/settings.py
$ git commit -m <span class="hljs-string">'Implemented a sitemap'</span>
</code></pre>
<h1 id="fixing-test-coverage">Fixing test coverage</h1>
<p>Our blog is now feature-complete, but there are a few gaps in test coverage, so we’ll fix them. If, like me, you’re using Coveralls.io, <a href="https://coveralls.io/builds/1151177">you can easily see via their web interface where there are gaps in the coverage</a>.</p>
<p>Now, our gaps are all in our view file - if you <a href="https://coveralls.io/files/280228813">take a look at my build</a>, you can easily identify the gaps as they’re marked in red.</p>
<p>The first gap is where a tag does not exist. Interestingly, if we look at the code in the view, we can see that some of it is redundant:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span>
        <span class="hljs-keyword">return</span> get_object_or_404(Tag, slug=slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged  %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> obj.get_absolute_url()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">try</span>:
            tag = Tag.objects.get(slug=obj.slug)
            <span class="hljs-keyword">return</span> tag.post_set.all()
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()
</code></pre>
<p>Under the <code>items</code> function, we check to see if the tag exists. However, under <code>get_object</code> we can see that if the object didn’t exist, it would already have returned a 404 error. We can therefore safely amend <code>items</code> to not check, since that try statement will never fail:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span>
        <span class="hljs-keyword">return</span> get_object_or_404(Tag, slug=slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged  %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> obj.get_absolute_url()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span>
        tag = Tag.objects.get(slug=obj.slug)
        <span class="hljs-keyword">return</span> tag.post_set.all()
</code></pre>
<p>The other two gaps are in our search view - we never get an empty result for the search in the following section:</p>
<pre><code class="hljs lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSearchResults</span><span class="hljs-params">(request)</span>:</span>
    <span class="hljs-string">"""
    Search for a post by title or text
    """</span>
    <span class="hljs-comment"># Get the query data</span>
    query = request.GET.get(<span class="hljs-string">'q'</span>, <span class="hljs-string">''</span>)
    page = request.GET.get(<span class="hljs-string">'page'</span>, <span class="hljs-number">1</span>)

    <span class="hljs-comment"># Query the database</span>
    <span class="hljs-keyword">if</span> query:
        results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))
    <span class="hljs-keyword">else</span>:
        results = <span class="hljs-keyword">None</span>

    <span class="hljs-comment"># Add pagination</span>
    pages = Paginator(results, <span class="hljs-number">5</span>)

    <span class="hljs-comment"># Get specified page</span>
    <span class="hljs-keyword">try</span>:
        returned_page = pages.page(page)
    <span class="hljs-keyword">except</span> EmptyPage:
        returned_page = pages.page(pages.num_pages)

    <span class="hljs-comment"># Display the search results</span>
    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'blogengine/search_post_list.html'</span>,
                              {<span class="hljs-string">'page_obj'</span>: returned_page,
                               <span class="hljs-string">'object_list'</span>: returned_page.object_list,
                               <span class="hljs-string">'search'</span>: query})
</code></pre>
<p>So replace it with this:</p>
<pre><code class="hljs lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSearchResults</span><span class="hljs-params">(request)</span>:</span>
    <span class="hljs-string">"""
    Search for a post by title or text
    """</span>
    <span class="hljs-comment"># Get the query data</span>
    query = request.GET.get(<span class="hljs-string">'q'</span>, <span class="hljs-string">''</span>)
    page = request.GET.get(<span class="hljs-string">'page'</span>, <span class="hljs-number">1</span>)

    <span class="hljs-comment"># Query the database</span>
    results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))

    <span class="hljs-comment"># Add pagination</span>
    pages = Paginator(results, <span class="hljs-number">5</span>)

    <span class="hljs-comment"># Get specified page</span>
    <span class="hljs-keyword">try</span>:
        returned_page = pages.page(page)
    <span class="hljs-keyword">except</span> EmptyPage:
        returned_page = pages.page(pages.num_pages)

    <span class="hljs-comment"># Display the search results</span>
    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'blogengine/search_post_list.html'</span>,
                              {<span class="hljs-string">'page_obj'</span>: returned_page,
                               <span class="hljs-string">'object_list'</span>: returned_page.object_list,
                               <span class="hljs-string">'search'</span>: query})
</code></pre>
<p>We don’t need to check whether <code>query</code> is defined because if <code>q</code> is left blank, the value of <code>query</code> will be an empty string, so we may as well pull out the redundant code.</p>
<p>Finally, the other gap is for when a user tries to get an empty search page (eg, page two of something with five or less results). So let’s add another test to our <code>SearchViewTest</code> class:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_failing_search</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Search for something that is not present</span>
        response = self.client.get(<span class="hljs-string">'/search?q=wibble'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Try to get nonexistent second page</span>
        response = self.client.get(<span class="hljs-string">'/search?q=wibble&amp;page=2'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Run our tests and check the coverage:</p>
<pre><code class="hljs lang-bash">$ coverage run --include=<span class="hljs-string">"blogengine/*"</span> --omit=<span class="hljs-string">"blogengine/migrations/*"</span> manage.py <span class="hljs-built_in">test</span> blogengine
$ coverage html
</code></pre>
<p>If you open <code>htmlcov/index.html</code> in your browser, you should see that the test coverage is back up to 100%. With that done, it’s time to commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Fixed gaps in coverage'</span>
</code></pre>
<p>Remember, it’s not always possible to achieve 100% test coverage, and you shouldn’t worry too much about it if it’s not possible - <a href="http://nedbatchelder.com/code/coverage/excluding.html">it’s possible to ignore code</a> if necessary. However, it’s a good idea to aim for 100%.</p>
<h1 id="using-fabric-for-deployment">Using Fabric for deployment</h1>
<p>Next we’ll cover using Fabric, a handy tool for deploying your changes (any pretty much any other task you want to automate). First, you need to install it:</p>
<pre><code class="hljs lang-bash">$ pip install Fabric
</code></pre>
<p>If you have any problems installing it, you should be able to resolve them via Google - most of them are likely to be absent libraries that Fabric depends upon. Once it’s installed, add it to your <code>requirements.tzt</code>:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
</code></pre>
<p>Next, create a file called <code>fabfile.py</code> and enter the following text:</p>
<pre><code class="hljs lang-python"><span class="hljs-comment">#!/usr/bin/env python</span>
<span class="hljs-keyword">from</span> fabric.api <span class="hljs-keyword">import</span> local

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    Deploy the latest version to Heroku
    """</span>
    <span class="hljs-comment"># Push changes to master</span>
    local(<span class="hljs-string">"git push origin master"</span>)

    <span class="hljs-comment"># Push changes to Heroku</span>
    local(<span class="hljs-string">"git push heroku master"</span>)

    <span class="hljs-comment"># Run migrations on Heroku</span>
    local(<span class="hljs-string">"heroku run python manage.py migrate"</span>)
</code></pre>
<p>Now, all this file does is push our changes to Github (or wherever else your repository is hosted) and to Heroku, and runs your migrations. It’s not a terribly big task anyway, but it’s handy to have it in place. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add fabfile.py requirements.txt
$ git commit -m <span class="hljs-string">'Added Fabric task for deployment'</span>
</code></pre>
<p>Then, let’s try it out:</p>
<pre><code class="hljs lang-bash">$ fab deploy
</code></pre>
<p>There, wasn’t that more convenient? Fabric is much more powerful than this simple demonstration indicates, and can run tasks on remote servers via SSH easily. I recommend you take a look at the <a href="http://www.fabfile.org/">documentation</a> to see what else you can do with it. If you’re hosting your site on a VPS, you will probably find Fabric indispensable, as you will need to restart the application every time you push up a new revision.</p>
<h1 id="tidying-up">Tidying up</h1>
<p>We want our blog application to play nicely with other Django apps. For instance, say you’re working on a new site that includes a blogging engine. Wouldn’t it make sense to just be able to drop in this blogging engine and have it work immediately? At the moment, some of our URL’s are hard-coded, so we may have problems in doing so. Let’s fix that.</p>
<p>First we’ll amend our tests. Add this at the top of the tests file:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse
</code></pre>
<p>Next, replace every instance of this:</p>
<pre><code class="hljs lang-python">        response = self.client.get(<span class="hljs-string">'/'</span>)
</code></pre>
<p>with this:</p>
<pre><code class="hljs lang-python">response = self.client.get(reverse(<span class="hljs-string">'blogengine:index'</span>))
</code></pre>
<p>Then, rewrite the calls to the search route. For instance, this:</p>
<pre><code class="hljs lang-python">        response = self.client.get(<span class="hljs-string">'/search?q=first'</span>)
</code></pre>
<p>should become this:</p>
<pre><code class="hljs lang-python">        response = self.client.get(reverse(<span class="hljs-string">'blogengine:search'</span>) + <span class="hljs-string">'?q=first'</span>)
</code></pre>
<p>I’ll leave changing these as an exercise for the reader, but check the repository if you get stuck.</p>
<p>Next, we need to assign a namespace to our app’s routes:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url

<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
admin.autodiscover()

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Examples:</span>
    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span>
    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span>

    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),

    <span class="hljs-comment"># Blog URLs</span>
    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'blogengine.urls'</span>, namespace=<span class="hljs-string">"blogengine"</span>)),

    <span class="hljs-comment"># Flat pages</span>
    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'django.contrib.flatpages.urls'</span>)),
)
</code></pre>
<p>We then assign names to our routes in the app’s <code>urls.py</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag
<span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed, CategoryPostsFeed, TagPostsFeed, getSearchResults
<span class="hljs-keyword">from</span> django.contrib.sitemaps.views <span class="hljs-keyword">import</span> sitemap
<span class="hljs-keyword">from</span> blogengine.sitemap <span class="hljs-keyword">import</span> PostSitemap, FlatpageSitemap

<span class="hljs-comment"># Define sitemaps</span>
sitemaps = {
    <span class="hljs-string">'posts'</span>: PostSitemap,
    <span class="hljs-string">'pages'</span>: FlatpageSitemap
}

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        ),
        name=<span class="hljs-string">'index'</span>
        ),

    <span class="hljs-comment"># Individual posts</span>
    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(
        model=Post,
        ),
        name=<span class="hljs-string">'post'</span>
        ),

    <span class="hljs-comment"># Categories</span>
    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Category,
        ),
        name=<span class="hljs-string">'category'</span>
        ),


    <span class="hljs-comment"># Tags</span>
    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Tag,
        ),
        name=<span class="hljs-string">'tag'</span>
        ),

    <span class="hljs-comment"># Post RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),

    <span class="hljs-comment"># Category RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryPostsFeed()),

    <span class="hljs-comment"># Tag RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagPostsFeed()),

    <span class="hljs-comment"># Search posts</span>
    url(<span class="hljs-string">r'^search'</span>, getSearchResults, name=<span class="hljs-string">'search'</span>),

    <span class="hljs-comment"># Sitemap</span>
    url(<span class="hljs-string">r'^sitemap\.xml$'</span>, sitemap, {<span class="hljs-string">'sitemaps'</span>: sitemaps},
            name=<span class="hljs-string">'django.contrib.sitemaps.views.sitemap'</span>),
)
</code></pre>
<p>You also need to amend two of your templates:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"alternate"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/rss+xml"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Blog posts"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span> &gt;</span>

        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span>

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> staticfiles %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;
            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;</span>

        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s, id)</span> </span>{
            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;
                js = d.createElement(s); js.id = id;
                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;
                fjs.parentNode.insertBefore(js, fjs);
            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container-fluid"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-toggle"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">"#header-nav"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">url</span> 'blogengine:index' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"collapse navbar-collapse"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"header-nav"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav navbar-nav"</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% get_flatpages <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>

                        <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"/search"</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">"GET"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-form navbar-left"</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-group"</span>&gt;</span>
                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"q"</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">"Search..."</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">input</span>&gt;</span>
                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-default"</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> header %}</span><span class="xml">
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"page-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container footer"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"span12"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template_tag">{% <span class="hljs-keyword">now</span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="javascript"><span class="hljs-string">"&gt;&lt;\/script&gt;')</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
            (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b,o,i,l,e,r)</span></span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;
            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];
            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;
            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));
            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);
        </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object_list %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
            </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.category %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-primary"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.tags %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">else</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pager"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">url</span> 'blogengine:search' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">?page=</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">&amp;q=</span></span></span><span class="hljs-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">url</span> 'blogengine:search' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">?page=</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">&amp;q=</span></span></span><span class="hljs-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine/
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.............................
----------------------------------------------------------------------
Ran <span class="hljs-number">29</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">10.456</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>And commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add .
$ git commit -m <span class="hljs-string">'Now use named routes'</span>
</code></pre>
<h1 id="debugging-django">Debugging Django</h1>
<p>There are a number of handy ways to debug Django applications. One of the simplest is to use the Python debugger. To use it, just enter the following lines at the point you want to break at:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> pdb
pdb.set_trace()
</code></pre>
<p>Now, whenever that line of code is run, you’ll be dropped into an interactive shell that lets you play around to find out what’s going wrong. However, it doesn’t offer autocompletion, so we’ll install <code>ipdb</code>, which is an improved version:</p>
<pre><code class="hljs lang-bash">$ pip install ipdb
$ pip freeze &gt; requirements.txt
</code></pre>
<p>Now you can use <code>ipdb</code> in much the same way as you would use <code>pdb</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> ipdb
ipdb.set_trace()
</code></pre>
<p>Now, <code>ipdb</code> is very useful, but it isn’t much help for profiling your application. For that you need the Django Debug Toolbar. Run the following commands:</p>
<pre><code class="hljs lang-bash">$ pip install django-debug-toolbar
$ pip freeze &gt; requirements.txt
</code></pre>
<p>Then add the following line to <code>INSTALLED_APPS</code> in your settings file:</p>
<pre><code class="hljs lang-python">    <span class="hljs-string">'debug_toolbar'</span>,
</code></pre>
<p>Then, try running the development server, and you’ll see a toolbar on the right-hand side of the screen that allows you to view some useful data about your page. For instance, you’ll notice a field called <code>SQL</code> - this contains details of the queries carried out when building the page. To actually see the queries carried out, you’ll want to disable caching in your settings file by commenting out all the constants that start with <code>CACHE</code>.</p>
<p>We won’t go into using the toolbar to optimise queries, but using this, you can easily see what queries are being executed on a specific page, how long they take, and the values they return. Sometimes, you may need to optimise a slow query - in this case, Django allows you to drop down to writing raw SQL if necessary.</p>
<p>Note that if you’re running Django in production, you should set <code>DEBUG</code> to <code>False</code> as otherwise it gives rather too much information to potential attackers, and with Django Debug Toolbar installed, that’s even more important.</p>
<p>Please also note that when you disable debug mode, Django no longer handles static files automatically, so you’ll need to run <code>python manage.py collectstatic</code> and commit the <code>staticfiles</code> directory.</p>
<p>Once you’ve disabled debug mode, collected the static files, and re-enables caching, you can commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add .
$ git commit -m <span class="hljs-string">'Installed debugging tools'</span>
</code></pre>
<h1 id="optimising-static-files">Optimising static files</h1>
<p>We want our blog to get the best SEO results it can, so making it fast is essential. One of the simplest things you can do is to concatenate and minify static assets such as CSS and JavaScript. There are numerous ways to do this, but I generally use Grunt. Let’s set up a Grunt config to concatenate and minify our CSS and JavaScript.</p>
<p>You’ll need to have Node.js installed on your development machine for this. Then, you need to install the Grunt command-line interface:</p>
<pre><code class="hljs lang-bash">$ sudo npm install -g grunt-cli
</code></pre>
<p>With that done, we need to create a <code>package.json</code> file. You can create one using the command <code>npm init</code>. Here’s mine:</p>
<pre><code class="hljs lang-json">{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"django_tutorial_blog_ng"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0.0"</span></span>,
  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Django Tutorial Blog NG ======================="</span></span>,
  "<span class="hljs-attribute">main</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span></span>,
  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">test</span>": <span class="hljs-value"><span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
  </span>}</span>,
  "<span class="hljs-attribute">repository</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"git"</span></span>,
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/matthewbdaly/django_tutorial_blog_ng.git"</span>
  </span>}</span>,
  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)"</span></span>,
  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"ISC"</span></span>,
  "<span class="hljs-attribute">bugs</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/matthewbdaly/django_tutorial_blog_ng/issues"</span>
  </span>}</span>,
  "<span class="hljs-attribute">homepage</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/matthewbdaly/django_tutorial_blog_ng"</span>
</span>}
</code></pre>
<p>Feel free to amend  it as you see fit.</p>
<p>Next we install Grunt and the required plugins:</p>
<pre><code class="hljs lang-bash">$ npm install grunt grunt-contrib-cssmin grunt-contrib-concat grunt-contrib-uglify --save-dev
</code></pre>
<p>We now need to create a Gruntfile for our tasks:</p>
<pre><code class="hljs lang-javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(grunt)</span> </span>{
<span class="hljs-pi">    'use strict'</span>;

    grunt.initConfig({
        concat: {
            dist: {
                src: [
                    <span class="hljs-string">'blogengine/static/bower_components/bootstrap/dist/css/bootstrap.css'</span>,
                    <span class="hljs-string">'blogengine/static/bower_components/bootstrap/dist/css/bootstrap-theme.css'</span>,
                    <span class="hljs-string">'blogengine/static/css/code.css'</span>,
                    <span class="hljs-string">'blogengine/static/css/main.css'</span>,
                ],
                dest: <span class="hljs-string">'blogengine/static/css/style.css'</span>
            }
        },
        uglify: {
            dist: {
                src: [
                    <span class="hljs-string">'blogengine/static/bower_components/jquery/jquery.js'</span>,
                    <span class="hljs-string">'blogengine/static/bower_components/bootstrap/dist/js/bootstrap.js'</span>
                ],
                dest: <span class="hljs-string">'blogengine/static/js/all.min.js'</span>
            }
        },
        cssmin: {
            dist: {
                src: <span class="hljs-string">'blogengine/static/css/style.css'</span>,
                dest: <span class="hljs-string">'blogengine/static/css/style.min.css'</span>
            }
        }
    });

    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>);
    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-uglify'</span>);
    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-cssmin'</span>);
    grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'concat'</span>, <span class="hljs-string">'uglify'</span>, <span class="hljs-string">'cssmin'</span>]);
};
</code></pre>
<p>You’ll also need to change the paths in your base HTML file to point to the minified versions:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"alternate"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/rss+xml"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Blog posts"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span> &gt;</span>

        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span>

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> staticfiles %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/style.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;
            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;</span>

        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s, id)</span> </span>{
            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;
                js = d.createElement(s); js.id = id;
                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;
                fjs.parentNode.insertBefore(js, fjs);
            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container-fluid"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-toggle"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">"#header-nav"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">url</span> 'blogengine:index' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"collapse navbar-collapse"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"header-nav"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav navbar-nav"</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% get_flatpages <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>

                        <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"/search"</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">"GET"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-form navbar-left"</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-group"</span>&gt;</span>
                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"q"</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">"Search..."</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">input</span>&gt;</span>
                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-default"</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> header %}</span><span class="xml">
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"page-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container footer"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"span12"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template_tag">{% <span class="hljs-keyword">now</span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'js/all.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
            (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b,o,i,l,e,r)</span></span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;
            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];
            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;
            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));
            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);
        </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<p>Now, run the Grunt task:</p>
<pre><code class="hljs lang-bash">$ grunt
</code></pre>
<p>And collect the static files:</p>
<pre><code class="hljs lang-bash">$ python manage.py collectstatic
</code></pre>
<p>You’ll also want to add your <code>node_modules</code> folder to your <code>gitignore</code>:</p>
<pre><code class="hljs lang-bash">venv/
*.pyc
db.sqlite3
reports/
htmlcov/
.coverage
node_modules/
</code></pre>
<p>Then commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add .
$ git commit -m <span class="hljs-string">'Optimised static assets'</span>
</code></pre>
<p>Now, our <code>package.json</code> will cause a problem - it will mean that this app is mistakenly identified as a Node.js app. To prevent this, create the <code>.slugignore</code> file:</p>
<pre><code class="hljs lang-bash">package.json
</code></pre>
<p>Then commit your changes and push them up:</p>
<pre><code class="hljs lang-bash">$ git add .slugignore
$ git commit -m <span class="hljs-string">'Added slugignore'</span>
$ fab deploy
</code></pre>
<p>If you check, your site should now be loading the minified versions of the static files.</p>
<p>That’s our site done! As usual I’ve tagged the final commit with <code>lesson-8</code>.</p>
<p>Sadly, that’s our final instalment over with! I hope you’ve enjoyed these tutorials, and I look forward to seeing what you create with them.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/</guid>
            <pubDate>Sun, 31 Aug 2014 21:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 7]]></title>
            <description><![CDATA[<p>Hello once again! In this instalment we’ll cover:</p>
<ul>
<li>Caching your content with Memcached to improve your site’s performance</li>
<li>Refactoring and simplifying our tests</li>
<li>Implementing additional feeds</li>
<li>Creating a simple search engine</li>
</ul>
<p>Don’t forget to activate your virtualenv:</p>
<pre><code class="hljs lang-bash">$ <span class="hljs-built_in">source</span> venv/bin/activate
</code></pre>
<p>Now let’s get started!</p>
<h1 id="memcached">Memcached</h1>
<p>If you frequent (or used to frequent) social media sites like Reddit, Slashdot or Digg, you may be familiar with something called variously the Digg or Slashdot effect, whereby if a page gets submitted to a social media site, and subsequently becomes popular, it can be hit by a huge number of HTTP requests in a very short period of time, slowing it down or even taking the server down completely.</p>
<p>Now, as a general rule of thumb, for most dynamic websites such as blogs, the bottleneck is not the web server or the programming language, but the database. If you have a lot of people hitting the same page over and over again in quick succession, then you’re essentially running the same query over and over again and getting the same result each time, which is expensive in terms of processing power. What you need to be able to do is cache the results of the query in memory for a given period of time so that the number of queries is reduced.</p>
<p>That’s where Memcached comes in. It’s a simple key-value store that allows you to store values in memory for a given period of time so that they can be retrieved without having to query the database. Memcached is a very common choice for caching, and is by far the fastest and most efficient type of cache available for Django. It’s also available on Heroku’s free tier.</p>
<p>Django has a very powerful caching framework that supports numerous types of cache in addition to Memcached, such as:</p>
<ul>
<li>Database caching</li>
<li>Filesystem caching</li>
<li>Local memory caching</li>
</ul>
<p>There are also third-party backends for using other caching systems such as Redis.</p>
<p>Now, the cache can be used in a number of different ways. You can cache only certain parts of your site if you wish. However, because our site is heavily content-driven, we should be pretty safe to use the per-site cache, which is the simplest way to set up caching.</p>
<p>In order to set up Memcached, there’s a couple of Python libraries we’ll need. If you want to install them locally, however, you’ll need to install both memcached and libmemcached (on Ubuntu, the packages you need are called <code>memcached</code> and <code>libmemcached-dev</code>) on your development machine. If you don’t want to do this, then just copy and paste these lines into <code>requirements.txt</code> instead:</p>
<pre><code class="hljs lang-bash">django-pylibmc-sasl==<span class="hljs-number">0.2</span>.<span class="hljs-number">4</span>
pylibmc==<span class="hljs-number">1.3</span>.<span class="hljs-number">0</span>
</code></pre>
<p>If you are happy to install these dependencies locally, then run this command once memcached and libmemcached are installed:</p>
<pre><code class="hljs lang-bash">$ pip install pylibmc django-pylibmc-sasl
</code></pre>
<p>With that done let’s configure Memcached. Open up the settings file and add the following at the bottom:</p>
<pre><code class="hljs lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cache</span><span class="hljs-params">()</span>:</span>
  <span class="hljs-keyword">import</span> os
  <span class="hljs-keyword">try</span>:
    os.environ[<span class="hljs-string">'MEMCACHE_SERVERS'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_SERVERS'</span>].replace(<span class="hljs-string">','</span>, <span class="hljs-string">';'</span>)
    os.environ[<span class="hljs-string">'MEMCACHE_USERNAME'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_USERNAME'</span>]
    os.environ[<span class="hljs-string">'MEMCACHE_PASSWORD'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_PASSWORD'</span>]
    <span class="hljs-keyword">return</span> {
      <span class="hljs-string">'default'</span>: {
        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django_pylibmc.memcached.PyLibMCCache'</span>,
        <span class="hljs-string">'TIMEOUT'</span>: <span class="hljs-number">300</span>,
        <span class="hljs-string">'BINARY'</span>: <span class="hljs-keyword">True</span>,
        <span class="hljs-string">'OPTIONS'</span>: { <span class="hljs-string">'tcp_nodelay'</span>: <span class="hljs-keyword">True</span> }
      }
    }
  <span class="hljs-keyword">except</span>:
    <span class="hljs-keyword">return</span> {
      <span class="hljs-string">'default'</span>: {
        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django.core.cache.backends.locmem.LocMemCache'</span>
      }
    }

CACHES = get_cache()
CACHE_MIDDLEWARE_ALIAS = <span class="hljs-string">'default'</span>
CACHE_MIDDLEWARE_SECONDS = <span class="hljs-number">300</span>
CACHE_MIDDLEWARE_KEY_PREFIX = <span class="hljs-string">''</span>
</code></pre>
<p>Then add the following to <code>MIDDLEWARE_CLASSES</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-string">'django.middleware.cache.UpdateCacheMiddleware'</span>,
    <span class="hljs-string">'django.middleware.common.CommonMiddleware'</span>,
    <span class="hljs-string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,
</code></pre>
<p>That’s it! The first section configures the application to use Memcached to cache the content when running on Heroku, and sets some configuration parameters, while the second  section tells Django to use the per-site cache in order to cache all the site content.</p>
<p>Now, Heroku doesn’t include Memcached by default - instead it’s available as an add-on called Memcachier. To use add-ons you need to set up a credit card for billing. We will set it up to use the free developer plan, but if you outgrow this you can easily switch to a paid plan. To add Memcachier, run this command:</p>
<pre><code class="hljs lang-bash">$ heroku addons:add memcachier:dev
</code></pre>
<p>Please note that Memcachier can take a few minutes to get set up, so you may want to leave it a little while between adding it and pushing up your changes. Now we’ll commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add requirements.txt django_tutorial_blog_ng/settings.py
$ git commit -m <span class="hljs-string">'Implemented caching with Memcached'</span>
</code></pre>
<p>Then we’ll push them up to our remote repository and to Heroku:</p>
<pre><code class="hljs lang-bash">$ git push origin master
$ git push heroku master
</code></pre>
<p>And that’s all you need to do to set up Memcached. In addition to storing your query results in Memcached, enabling the caching framework in Django will also set various HTTP headers to enable web proxies and browsers to cache content for an appropriate length of time. If you open up your browser’s developer tools and compare the response headers for your homepage on the latest version of the code with the previous version, you’ll notice that a number of additional headers appear, including <code>Cache-Control</code>, <code>Expires</code> and <code>Last-Modified</code>. These tell web browsers and web proxies how often to request the latest version of the HTML document, in order to help you reduce the bandwidth used.</p>
<p>As you can see, for a site like this where you are the only person adding content, it’s really easy to implement caching with Django, and for a blog there’s very little reason not to do it. If you’re not using Heroku and are instead hosting your site on a VPS, then the configuration will be somewhat different - see <a href="https://docs.djangoproject.com/en/1.6/topics/cache/#memcached">here</a> for details. You can also find information on using other cache backends on the same page.</p>
<p>That isn’t all you can do to speed up your site. Heroku doesn’t seem to be very good for serving static files, and if your site is attracting a lot of traffic you might want to host your static files elsewhere, such as on Amazon’s S3 service. Doing so is outside the scope of this tutorial, but for that use case, you should check out <a href="http://django-storages.readthedocs.org/en/latest/index.html">django-storages</a>.</p>
<h1 id="clearing-the-cache-automatically">Clearing the cache automatically</h1>
<p>There is one issue with this implementation. As it is right now, if you view the home page, add a post, then reload the page, you may not see the new post immediately because the cache will continue serving the old version until it has expired. That behaviour is less than ideal - we would like the cache to be cleared automatically when a new post gets added so that users will see the new version immediately. That response will still be cached afterwards, so it only means one extra query.</p>
<p>This is the ideal place to introduce <a href="https://docs.djangoproject.com/en/dev/topics/signals/">signals</a>. Signals are a way to carry out a given action when an event takes place. In our case, we plan to clear the cache when a post is saved (either created or updated).</p>
<p>Note that as we’ll be testing the behaviour of the cache at this point, you’ll need to install Memcached on your local machine, and we’ll need to change the settings to fall back to our local Memcached instance:</p>
<pre><code class="hljs lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cache</span><span class="hljs-params">()</span>:</span>
  <span class="hljs-keyword">import</span> os
  <span class="hljs-keyword">try</span>:
    os.environ[<span class="hljs-string">'MEMCACHE_SERVERS'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_SERVERS'</span>].replace(<span class="hljs-string">','</span>, <span class="hljs-string">';'</span>)
    os.environ[<span class="hljs-string">'MEMCACHE_USERNAME'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_USERNAME'</span>]
    os.environ[<span class="hljs-string">'MEMCACHE_PASSWORD'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_PASSWORD'</span>]
    <span class="hljs-keyword">return</span> {
      <span class="hljs-string">'default'</span>: {
        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django_pylibmc.memcached.PyLibMCCache'</span>,
        <span class="hljs-string">'TIMEOUT'</span>: <span class="hljs-number">300</span>,
        <span class="hljs-string">'BINARY'</span>: <span class="hljs-keyword">True</span>,
        <span class="hljs-string">'OPTIONS'</span>: { <span class="hljs-string">'tcp_nodelay'</span>: <span class="hljs-keyword">True</span> }
      }
    }
  <span class="hljs-keyword">except</span>:
    <span class="hljs-keyword">return</span> {
      <span class="hljs-string">'default'</span>: {
        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django.core.cache.backends.memcached.PyLibMCCache'</span>,
        <span class="hljs-string">'LOCATION'</span>: <span class="hljs-string">'127.0.0.1:11211'</span>
      }
    }

CACHES = get_cache()
CACHE_MIDDLEWARE_ALIAS = <span class="hljs-string">'default'</span>
CACHE_MIDDLEWARE_SECONDS = <span class="hljs-number">300</span>
CACHE_MIDDLEWARE_KEY_PREFIX = <span class="hljs-string">''</span>
</code></pre>
<p>If you don’t want to install Memcached locally, you can skip this step, but be aware that the test we write for clearing the cache will always pass if you do skip it.</p>
<p>Then we’ll run our tests to make sure nothing has been broken:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.......................
----------------------------------------------------------------------
Ran <span class="hljs-number">23</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">6.164</span>s

OK
</code></pre>
<p>Let’s commit:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/settings.py
$ git commit -m <span class="hljs-string">'Now use Memcached in development'</span>
</code></pre>
<p>Now we’ll add a test for clearing the cache to <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_clear_cache</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'perl'</span>
        tag.description = <span class="hljs-string">'The Perl programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the first post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()
        post.tags.add(tag)

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the second post</span>
        post = Post()
        post.title = <span class="hljs-string">'My second post'</span>
        post.text = <span class="hljs-string">'This is [my second blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-second-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()
        post.tags.add(tag)

        <span class="hljs-comment"># Fetch the index again</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)

        <span class="hljs-comment"># Check second post present</span>
        self.assertTrue(<span class="hljs-string">'my second blog post'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>This should be fairly self-explanatory. We create one post, and request the index page. We then add a second post, request the index page again, and check for the second post. The test should fail because the cached version is returned, rather than the version in the database.</p>
<p>Now we have a test in place, we can implement a fix. First, add this to the top of your <code>models.py</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db.models.signals <span class="hljs-keyword">import</span> post_save
<span class="hljs-keyword">from</span> django.core.cache <span class="hljs-keyword">import</span> cache
</code></pre>
<p>Then add the following at the bottom of the file:</p>
<pre><code class="hljs lang-python">
<span class="hljs-comment"># Define signals</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_post</span><span class="hljs-params">(sender, instance, created, **kwargs)</span>:</span>
    cache.clear()

<span class="hljs-comment"># Set up signals</span>
post_save.connect(new_post, sender=Post)
</code></pre>
<p>This is fairly straightforward. What we’re doing is first defining a function called <code>new_post</code> that is called when a new post is created. We then connect it to the <code>post_save</code> signal. When a post is saved, it calls <code>new_post</code>, which clears the cache, making sure users are seeing the latest and greatest version of your site immediately.</p>
<p>Let’s test it:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">8.473</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>There are a number of signals available, and when you create one, you have access to the created object via the <code>instance</code> parameter. Using signals you can implement all kinds of functionality. For instance, you could implement the functionality to send an email when a new post is published.</p>
<p>If you’re using Travis CI, you’ll also need to update the config file:</p>
<pre><code class="hljs lang-yaml"><span class="hljs-label">language:</span> python
<span class="hljs-label">python:</span>
- <span class="hljs-string">"2.7"</span>
<span class="hljs-label">services:</span> memcached
<span class="hljs-label">before_install:</span>
    - sudo apt-get install -<span class="hljs-built_in">y</span> libmemcached-dev
<span class="hljs-preprocessor"># command to install dependencies</span>
<span class="hljs-label">install:</span> <span class="hljs-string">"pip install -r requirements.txt"</span>
<span class="hljs-preprocessor"># command to run tests</span>
<span class="hljs-label">script:</span> coverage run --include=<span class="hljs-string">"blogengine/*"</span> --omit=<span class="hljs-string">"blogengine/migrations/*"</span> manage.py test blogengine
<span class="hljs-label">after_success:</span>
    coveralls
</code></pre>
<p>Time to commit:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ .travis.yml
$ git commit -m <span class="hljs-string">'Now clear cache when post added'</span>
</code></pre>
<h1 id="formatting-for-rss-feeds">Formatting for RSS feeds</h1>
<p>Now, we want to offer more than one option for RSS feeds. For instance, if your blog is aggregated on a site such as <a href="http://planet.python.org/">Planet Python</a>, but you also blog about JavaScript, you may want to be able to provide a feed for posts in the <code>python</code> category only.</p>
<p>If you have written any posts that use any of Markdown’s custom formatting, you may notice that if you load your RSS feed in a reader, it isn’t formatted as Markdown. Let’s fix that. First we’ll amend our test:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeedTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_all_post_feed</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create a post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my *first* blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Add the tag</span>
        post.tags.add(tag)
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Fetch the feed</span>
        response = self.client.get(<span class="hljs-string">'/feeds/posts/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Parse the feed</span>
        feed = feedparser.parse(response.content)

        <span class="hljs-comment"># Check length</span>
        self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Check post retrieved is the correct one</span>
        feed_post = feed.entries[<span class="hljs-number">0</span>]
        self.assertEquals(feed_post.title, post.title)
        self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;first&lt;/em&gt; blog post'</span> <span class="hljs-keyword">in</span> feed_post.description)
</code></pre>
<p>Don’t forget to run the tests to make sure they fail. Now, let’s fix it:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag
<span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed
<span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode
<span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe
<span class="hljs-keyword">import</span> markdown2

<span class="hljs-comment"># Create your views here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            category = Category.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)
        <span class="hljs-keyword">except</span> Category.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            tag = Tag.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> tag.post_set.all()
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span>
    title = <span class="hljs-string">"RSS feed - posts"</span>
    link = <span class="hljs-string">"feeds/posts/"</span>
    description = <span class="hljs-string">"RSS feed - blog posts"</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span>
        <span class="hljs-keyword">return</span> item.title

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span>
        extras = [<span class="hljs-string">"fenced-code-blocks"</span>]
        content = mark_safe(markdown2.markdown(force_unicode(item.text),
                                               extras = extras))
        <span class="hljs-keyword">return</span> content
</code></pre>
<p>All we’re doing here is amending the <code>item_description</code> method of <code>PostsFeed</code> to render it as Markdown. Now let’s run our tests again:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">9.370</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>With that done, we’ll commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Fixed rendering for post feed'</span>
</code></pre>
<h1 id="refactoring-our-tests">Refactoring our tests</h1>
<p>Now, before we get into implementing the feed, our tests are a bit verbose. We create a lot of items over and over again - let’s sort that out. Factory Boy is a handy Python module that allows you to create easy-to-use factories for creating objects over and over again in tests. Let’s install it:</p>
<pre><code class="hljs lang-bash">$ pip install factory_boy
$ pip freeze &gt; requirements.txt
$ git add requirements.txt
$ git commit -m <span class="hljs-string">'Installed Factory Boy'</span>
</code></pre>
<p>Now let’s set up a factory for creating posts. Add this at the top of the test file:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> factory.django
</code></pre>
<p>Then, before your actual tests, insert the following:</p>
<pre><code class="hljs lang-python"><span class="hljs-comment"># Factories</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SiteFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        model = Site
        django_get_or_create = (
            <span class="hljs-string">'name'</span>,
            <span class="hljs-string">'domain'</span>
        )

    name = <span class="hljs-string">'example.com'</span>
    domain = <span class="hljs-string">'example.com'</span>
</code></pre>
<p>Now, wherever you call <code>Site()</code>, add its attributes, and save it, replace those lines with the following:</p>
<pre><code class="hljs lang-python">        site = SiteFactory()
</code></pre>
<p>Much simpler and more concise, I’m sure you’ll agree! Now, let’s run the tests to make sure they aren’t broken:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.482</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/tests.py
$ git commit -m <span class="hljs-string">'Now use Factory Boy for site objects'</span>
</code></pre>
<p>Let’s do the same thing with <code>Category</code> objects:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        model = Category
        django_get_or_create = (
            <span class="hljs-string">'name'</span>,
            <span class="hljs-string">'description'</span>,
            <span class="hljs-string">'slug'</span>
        )

    name = <span class="hljs-string">'python'</span>
    description = <span class="hljs-string">'The Python programming language'</span>
    slug = <span class="hljs-string">'python'</span>
</code></pre>
<p>Again, just find every time we call <code>Category()</code> and replace it with the following:</p>
<pre><code class="hljs lang-python">        category = CategoryFactory()
</code></pre>
<p>Now if we run our tests, we’ll notice a serious error:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
EE..EE.EE.EE...E.EEE..E.
======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_category (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">42</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_category
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">80</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">339</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post_without_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">378</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post_without_tag
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">245</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_delete_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">467</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_post
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">221</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">410</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_all_post_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">810</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_all_post_feed
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_category_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">640</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_category_page
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_clear_cache (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">753</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_clear_cache
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_index (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">518</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_index
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create
    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create


    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

======================================================================
ERROR: <span class="hljs-built_in">test</span>_post_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">576</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post_page
    category = CategoryFactory()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">82</span>, <span class="hljs-keyword">in</span> __call__
    <span class="hljs-built_in">return</span> cls.create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">585</span>, <span class="hljs-keyword">in</span> create
    <span class="hljs-built_in">return</span> cls._generate(True, attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">510</span>, <span class="hljs-keyword">in</span> _generate
    obj = cls._prepare(create, **attrs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line <span class="hljs-number">485</span>, <span class="hljs-keyword">in</span> _prepare
    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">151</span>, <span class="hljs-keyword">in</span> _create


    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> _get_or_create
    obj, _created = manager.get_or_create(*args, **key_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> get_or_create
    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">383</span>, <span class="hljs-keyword">in</span> get_or_create
    obj.save(force_insert=True, using=self.db)
TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.162</span>s

FAILED (errors=<span class="hljs-number">13</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Thankfully, this is easy to fix. We just need to amend the custom <code>save()</code> method of the <code>Category</code> model:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:
            self.slug = slugify(unicode(self.name))
        super(Category, self).save(*args, **kwargs)
</code></pre>
<p>That should resolve the issue:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.749</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Category now uses Factory Boy'</span>
</code></pre>
<p>Now let’s do the same thing for tags:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        model = Tag
        django_get_or_create = (
            <span class="hljs-string">'name'</span>,
            <span class="hljs-string">'description'</span>,
            <span class="hljs-string">'slug'</span>
        )

    name = <span class="hljs-string">'python'</span>
    description = <span class="hljs-string">'The Python programming language'</span>
    slug = <span class="hljs-string">'python'</span>
</code></pre>
<p>And replace the sections where we create new <code>Tag</code> objects:</p>
<pre><code class="hljs lang-python">        tag = TagFactory()
</code></pre>
<p>Note that some tags have different values. We can easily pass different values to our <code>TagFactory()</code> to override the default values:</p>
<pre><code class="hljs lang-python">        tag = TagFactory(name=<span class="hljs-string">'perl'</span>, description=<span class="hljs-string">'The Perl programming language'</span>)
</code></pre>
<p>The <code>Tag</code> model has the same issue as the <code>Category</code> one did, so let’s fix that:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:
            self.slug = slugify(unicode(self.name))
        super(Tag, self).save(*args, **kwargs)
</code></pre>
<p>We run our tests again:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine/
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.153</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Time to commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Now use Factory Boy for tags'</span>
</code></pre>
<p>Next we’ll create a factory for adding users. Note that the factory name doesn’t have to match the object name, so you can create factories for different types of users. Here we create a factory for authors - you could, for instance, create a separate factory for subscribers if you wanted:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        model = User
        django_get_or_create = (<span class="hljs-string">'username'</span>,<span class="hljs-string">'email'</span>, <span class="hljs-string">'password'</span>,)

    username = <span class="hljs-string">'testuser'</span>
    email = <span class="hljs-string">'user@example.com'</span>
    password = <span class="hljs-string">'password'</span>
</code></pre>
<p>And as before, replace those sections where we create users with the following:</p>
<pre><code class="hljs lang-python">        author = AuthorFactory()
</code></pre>
<p>Run the tests again:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.808</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>We commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Now use Factory Boy for creating authors'</span>
</code></pre>
<p>Now we’ll create a flat page factory:</p>
<pre><code class="hljs lang-python">

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        model = FlatPage
        django_get_or_create = (
            <span class="hljs-string">'url'</span>,
            <span class="hljs-string">'title'</span>,
            <span class="hljs-string">'content'</span>
        )

    url = <span class="hljs-string">'/about/'</span>
    title = <span class="hljs-string">'About me'</span>
    content = <span class="hljs-string">'All about me'</span>
</code></pre>
<p>And use it for our flat page test:</p>
<pre><code class="hljs lang-python">        page = FlatPageFactory()
</code></pre>
<p>Check the tests pass:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
........................
----------------------------------------------------------------------
Ran <span class="hljs-number">24</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.796</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>And commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Now use Factory Boy for flat page test'</span>
</code></pre>
<p>Now we’ll create a final factory for posts:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        model = Post
        django_get_or_create = (
            <span class="hljs-string">'title'</span>,
            <span class="hljs-string">'text'</span>,
            <span class="hljs-string">'slug'</span>,
            <span class="hljs-string">'pub_date'</span>
        )

    title = <span class="hljs-string">'My first post'</span>
    text = <span class="hljs-string">'This is my first blog post'</span>
    slug = <span class="hljs-string">'my-first-post'</span>
    pub_date = timezone.now()
    author = factory.SubFactory(AuthorFactory)
    site = factory.SubFactory(SiteFactory)
    category = factory.SubFactory(CategoryFactory)
</code></pre>
<p>This factory is a little bit different. Because our <code>Post</code> model depends on several others, we need to be able to create those additional objects on demand. By designating them as subfactories, we can easily create the associated objects for our <code>Post</code> object.</p>
<p>That means that not only can we get rid of our <code>Post()</code> calls, but we can also get rid of the factory calls to create the associated objects for <code>Post</code> models. Again, I’ll leave actually doing this as an exercise for the reader, but you can always refer to the GitHub repository if you’re not too sure.</p>
<p>Make sure your tests still pass, then commit the changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Now use Factory Boy for testing posts'</span>
</code></pre>
<p>Using Factory Boy made a big difference to the size of the test file - I was able to cut it down by over 200 lines of code. As your application gets bigger, it gets harder to maintain, so do what you can to keep the size down.</p>
<h1 id="additional-rss-feeds">Additional RSS feeds</h1>
<p>Now, let’s implement our additional RSS feeds. First, we’ll write a test for the category feed. Add this to the <code>FeedTest</code> class:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_category_feed</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create a post</span>
        post = PostFactory(text=<span class="hljs-string">'This is my *first* blog post'</span>)

        <span class="hljs-comment"># Create another post in a different category</span>
        category = CategoryFactory(name=<span class="hljs-string">'perl'</span>, description=<span class="hljs-string">'The Perl programming language'</span>, slug=<span class="hljs-string">'perl'</span>)
        post2 = PostFactory(text=<span class="hljs-string">'This is my *second* blog post'</span>, title=<span class="hljs-string">'My second post'</span>, slug=<span class="hljs-string">'my-second-post'</span>, category=category)

        <span class="hljs-comment"># Fetch the feed</span>
        response = self.client.get(<span class="hljs-string">'/feeds/posts/category/python/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Parse the feed</span>
        feed = feedparser.parse(response.content)

        <span class="hljs-comment"># Check length</span>
        self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Check post retrieved is the correct one</span>
        feed_post = feed.entries[<span class="hljs-number">0</span>]
        self.assertEquals(feed_post.title, post.title)
        self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;first&lt;/em&gt; blog post'</span> <span class="hljs-keyword">in</span> feed_post.description)

        <span class="hljs-comment"># Check other post is not in this feed</span>
        self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;second&lt;/em&gt; blog post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Here we create two posts in different categories (note that we create a new category and override the post category for it). We then fetch <code>/feeds/posts/category/python/</code> and assert that it contains only one post, with the content of the first post and not the content of the second.</p>
<p>Run the tests and they should fail:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
................F........
======================================================================
FAIL: <span class="hljs-built_in">test</span>_category_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">716</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_category_feed
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">25</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.804</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Because we haven’t yet implemented that route, we get a 404 error. So let’s create a route for this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag
<span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed, CategoryPostsFeed

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        )),

    <span class="hljs-comment"># Individual posts</span>
    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(
        model=Post,
        )),

    <span class="hljs-comment"># Categories</span>
    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Category,
        )),

    <span class="hljs-comment"># Tags</span>
    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Tag,
        )),

    <span class="hljs-comment"># Post RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),

    <span class="hljs-comment"># Category RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryPostsFeed()),
)
</code></pre>
<p>Note that the category RSS feed route is similar to the post RSS feed route, but accepts a <code>slug</code> parameter. We will use this to pass through the slug for the category in question. Also note we import the <code>CategoryPostsFeed</code> view. Now, we need to create that view. Fortunately, because it’s written as a Python class, we can extend the existing <code>PostsFeed</code> class. Open up your views file and amend it to look like this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> get_object_or_404
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag
<span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed
<span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode
<span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe
<span class="hljs-keyword">import</span> markdown2

<span class="hljs-comment"># Create your views here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            category = Category.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)
        <span class="hljs-keyword">except</span> Category.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            tag = Tag.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> tag.post_set.all()
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span>
    title = <span class="hljs-string">"RSS feed - posts"</span>
    description = <span class="hljs-string">"RSS feed - blog posts"</span>
    link = <span class="hljs-string">'/'</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span>
        <span class="hljs-keyword">return</span> item.title

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span>
        extras = [<span class="hljs-string">"fenced-code-blocks"</span>]
        content = mark_safe(markdown2.markdown(force_unicode(item.text),
                                               extras = extras))
        <span class="hljs-keyword">return</span> content


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span>
        <span class="hljs-keyword">return</span> get_object_or_404(Category, slug=slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts in category %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> obj.get_absolute_url()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts in category %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> Post.objects.filter(category=obj).order_by(<span class="hljs-string">'-pub_date'</span>)
</code></pre>
<p>Note that many of our fields don’t have to be explicitly defined as they are inherited from <code>PostsFeed</code>. We can’t hard-code the title, link or description because they depend on the category, so we instead define methods to return the appropriate text.</p>
<p>Also note <code>get_object()</code> - we define this so that we can ensure the category exists. If it doesn’t exist, then it returns a 404 error rather than showing an empty feed.</p>
<p>We also override <code>items()</code> to filter it to just those posts that are in the given category.</p>
<p>If you run the tests again, they should now pass:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.........................
----------------------------------------------------------------------
Ran <span class="hljs-number">25</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.867</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Implemented category RSS feed'</span>
</code></pre>
<p>Now, we can get our category RSS feed, but how do we navigate to it? Let’s add a link to each category page that directs a user to its RSS feed. To do so, we’ll need to create a new template for category pages. First, let’s add some code to our tests to ensure that the right template is used at all times. Add the following to the end of the <code>test_index</code> method of <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python">        <span class="hljs-comment"># Check the correct template was used</span>
        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/post_list.html'</span>)
</code></pre>
<p>Then, add this to the end of <code>test_post_page</code>:</p>
<pre><code class="hljs lang-python">
        <span class="hljs-comment"># Check the correct template was used</span>
        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/post_detail.html'</span>)
</code></pre>
<p>Finally, add this to the end of <code>test_category_page</code>:</p>
<pre><code class="hljs lang-python">        <span class="hljs-comment"># Check the correct template was used</span>
        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/category_post_list.html'</span>)
</code></pre>
<p>These assertions confirm which template was used to generate which request.</p>
<p>Next, we head into our views file:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span>
    template_name = <span class="hljs-string">'blogengine/category_post_list.html'</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            category = Category.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)
        <span class="hljs-keyword">except</span> Category.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_context_data</span><span class="hljs-params">(self, **kwargs)</span>:</span>
        context = super(CategoryListView, self).get_context_data(**kwargs)
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            context[<span class="hljs-string">'category'</span>] = Category.objects.get(slug=slug)
        <span class="hljs-keyword">except</span> Category.DoesNotExist:
            context[<span class="hljs-string">'category'</span>] = <span class="hljs-keyword">None</span>
        <span class="hljs-keyword">return</span> context
</code></pre>
<p>Note that we first of all change the template used by this view. Then, we override <code>get_context_data</code> to add in additional data. What we’re doing is getting the slug that was passed through, looking up any category for which it is the slug, and returning it as additional context data. Using this method, you can easily add additional data that you may wish to render in your Django templates.</p>
<p>Finally, we create our new template:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object_list %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
            </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.category %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-primary"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.tags %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">else</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pager"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/category/</span></span></span><span class="hljs-variable">{{ category.slug }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>RSS feed for category </span><span class="hljs-variable">{{ category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Note that the category has been passed through to the template and is now accessible. If you run the tests, they should now pass:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.........................
----------------------------------------------------------------------
Ran <span class="hljs-number">25</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.232</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>With that done. we can commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add templates/ blogengine/
$ git commit -m <span class="hljs-string">'Added link to RSS feed from category page'</span>
</code></pre>
<p>Next up, let’s implement another RSS feed for tags. First, we’ll implement our test:</p>
<pre><code class="hljs lang-python">      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_tag_feed</span><span class="hljs-params">(self)</span>:</span>
          <span class="hljs-comment"># Create a post</span>
          post = PostFactory(text=<span class="hljs-string">'This is my *first* blog post'</span>)
          tag = TagFactory()
          post.tags.add(tag)
          post.save()

          <span class="hljs-comment"># Create another post with a different tag</span>
          tag2 = TagFactory(name=<span class="hljs-string">'perl'</span>, description=<span class="hljs-string">'The Perl programming language'</span>, slug=<span class="hljs-string">'perl'</span>)
          post2 = PostFactory(text=<span class="hljs-string">'This is my *second* blog post'</span>, title=<span class="hljs-string">'My second post'</span>, slug=<span class="hljs-string">'my-second-post'</span>)
          post2.tags.add(tag2)
          post2.save()

          <span class="hljs-comment"># Fetch the feed</span>
          response = self.client.get(<span class="hljs-string">'/feeds/posts/tag/python/'</span>)
          self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

          <span class="hljs-comment"># Parse the feed</span>
          feed = feedparser.parse(response.content)

          <span class="hljs-comment"># Check length</span>
          self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)

          <span class="hljs-comment"># Check post retrieved is the correct one</span>
          feed_post = feed.entries[<span class="hljs-number">0</span>]
          self.assertEquals(feed_post.title, post.title)
          self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;first&lt;/em&gt; blog post'</span> <span class="hljs-keyword">in</span> feed_post.description)

          <span class="hljs-comment"># Check other post is not in this feed</span>
          self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;second&lt;/em&gt; blog post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>This is virtually identical to the test for the categroy feed, but we adjust it to work with the <code>Tag</code> attribute and change the URL. Let’s check that our test fails:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.................F........
======================================================================
FAIL: <span class="hljs-built_in">test</span>_tag_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">757</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_tag_feed
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">26</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.760</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>As before, we create a route for this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag
<span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed, CategoryPostsFeed, TagPostsFeed

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        )),

    <span class="hljs-comment"># Individual posts</span>
    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(
        model=Post,
        )),

    <span class="hljs-comment"># Categories</span>
    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Category,
        )),

    <span class="hljs-comment"># Tags</span>
    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Tag,
        )),

    <span class="hljs-comment"># Post RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),

    <span class="hljs-comment"># Category RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryPostsFeed()),

    <span class="hljs-comment"># Tag RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagPostsFeed()),
)
</code></pre>
<p>Next, we create our view:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span>
        <span class="hljs-keyword">return</span> get_object_or_404(Tag, slug=slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged  %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> obj.get_absolute_url()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged %s"</span> % obj.name

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span>
        <span class="hljs-keyword">try</span>:
            tag = Tag.objects.get(slug=obj.slug)
            <span class="hljs-keyword">return</span> tag.post_set.all()
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()
</code></pre>
<p>Again, this inherits from <code>PostsFeed</code>, but the syntax for getting posts matching a tag is slightly different because they use a many-to-many relationship.</p>
<p>We also need a template for the tag pages. Add this to the end of the <code>test_tag_page</code> method:</p>
<pre><code class="hljs lang-python">
        <span class="hljs-comment"># Check the correct template was used</span>
        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/tag_post_list.html'</span>)
</code></pre>
<p>Let’s create that template:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object_list %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
            </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.category %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-primary"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.tags %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">else</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pager"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/tag/</span></span></span><span class="hljs-variable">{{ tag.slug }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>RSS feed for tag </span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>This is virtually identical to the category template. You’ll also need to apply this template in the view for the tag list, and pass the tag name through as context data:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span>
    template_name = <span class="hljs-string">'blogengine/tag_post_list.html'</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            tag = Tag.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> tag.post_set.all()
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_context_data</span><span class="hljs-params">(self, **kwargs)</span>:</span>
        context = super(TagListView, self).get_context_data(**kwargs)
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            context[<span class="hljs-string">'tag'</span>] = Tag.objects.get(slug=slug)
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            context[<span class="hljs-string">'tag'</span>] = <span class="hljs-keyword">None</span>
        <span class="hljs-keyword">return</span> context
</code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..........................
----------------------------------------------------------------------
Ran <span class="hljs-number">26</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.770</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>You may want to do a quick check to ensure your tag feed link works as expected. Time to commit:</p>
<pre><code class="hljs lang-bash">$ git add blogengine templates
$ git commit -m <span class="hljs-string">'Implemented tag feeds'</span>
</code></pre>
<h1 id="moving-our-templates">Moving our templates</h1>
<p>Before we crack on with implementing search, there’s one more piece of housekeeping. In Django, templates can be applied at project level or at app level. So far, we’ve been storing them in the project, but we would like our app to be as self-contained as possible so it can just be dropped into future projects where we need a blog. That way, it can be easily overridden for specific projects. You can move the folders and update the Git repository at the same time with this command:</p>
<pre><code class="hljs lang-bash">$ git mv templates/ blogengine/
</code></pre>
<p>We run the tests to make sure nothing untoward has happened:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..........................
----------------------------------------------------------------------
Ran <span class="hljs-number">26</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.847</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>And we commit:</p>
<pre><code class="hljs lang-bash">$ git commit -m <span class="hljs-string">'Moved templates'</span>
</code></pre>
<p>Note that <code>git mv</code> updates Git and moves the files, so you don’t need to call <code>git add</code>.</p>
<h1 id="implementing-search">Implementing search</h1>
<p>For our final task today, we will be implementing a very simple search engine. Our requirements are:</p>
<ul>
<li>It should be in the header, to allow for easy access from anywhere in the front end.</li>
<li>It should search the title and text of posts.</li>
</ul>
<p>First, we’ll write our tests:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_search</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create a post</span>
        post = PostFactory()

        <span class="hljs-comment"># Create another post</span>
        post2 = PostFactory(text=<span class="hljs-string">'This is my *second* blog post'</span>, title=<span class="hljs-string">'My second post'</span>, slug=<span class="hljs-string">'my-second-post'</span>)

        <span class="hljs-comment"># Search for first post</span>
        response = self.client.get(<span class="hljs-string">'/search?q=first'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the first post is contained in the results</span>
        self.assertTrue(<span class="hljs-string">'My first post'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the second post is not contained in the results</span>
        self.assertTrue(<span class="hljs-string">'My second post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Search for second post</span>
        response = self.client.get(<span class="hljs-string">'/search?q=second'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the first post is not contained in the results</span>
        self.assertTrue(<span class="hljs-string">'My first post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the second post is contained in the results</span>
        self.assertTrue(<span class="hljs-string">'My second post'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Don’t forget to run the tests to make sure they fail:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..........................F
======================================================================
FAIL: <span class="hljs-built_in">test</span>_search (blogengine.tests.SearchViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">819</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_search
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">27</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">6.919</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>With that done, we can add the search form to the header:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"alternate"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/rss+xml"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Blog posts"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span> &gt;</span>

        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span>

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> staticfiles %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;
            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;</span>

        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s, id)</span> </span>{
            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;
                js = d.createElement(s); js.id = id;
                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;
                fjs.parentNode.insertBefore(js, fjs);
            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container-fluid"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-toggle"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">"#header-nav"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"collapse navbar-collapse"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"header-nav"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav navbar-nav"</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% get_flatpages <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>

                        <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"/search"</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">"GET"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-form navbar-left"</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-group"</span>&gt;</span>
                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"q"</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">"Search..."</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">input</span>&gt;</span>
                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-default"</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> header %}</span><span class="xml">
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"page-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container footer"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"span12"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template_tag">{% <span class="hljs-keyword">now</span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="javascript"><span class="hljs-string">"&gt;&lt;\/script&gt;')</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
            (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b,o,i,l,e,r)</span></span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;
            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];
            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;
            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));
            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);
        </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<p>Now we’ll actually implement our search. Implementing search using Django’s generic views can be fiddly, so we’ll write our search view as a function instead. First, amend the imports at the top of your view file to look like this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> get_object_or_404, render_to_response
<span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator, EmptyPage
<span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Q
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag
<span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed
<span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode
<span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe
<span class="hljs-keyword">import</span> markdown2
</code></pre>
<p>Next, add the following code to the end of the file:</p>
<pre><code class="hljs lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSearchResults</span><span class="hljs-params">(request)</span>:</span>
    <span class="hljs-string">"""
    Search for a post by title or text
    """</span>
    <span class="hljs-comment"># Get the query data</span>
    query = request.GET.get(<span class="hljs-string">'q'</span>, <span class="hljs-string">''</span>)
    page = request.GET.get(<span class="hljs-string">'page'</span>, <span class="hljs-number">1</span>)

    <span class="hljs-comment"># Query the database</span>
    <span class="hljs-keyword">if</span> query:
        results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))
    <span class="hljs-keyword">else</span>:
        results = <span class="hljs-keyword">None</span>

    <span class="hljs-comment"># Add pagination</span>
    pages = Paginator(results, <span class="hljs-number">5</span>)

    <span class="hljs-comment"># Get specified page</span>
    <span class="hljs-keyword">try</span>:
        returned_page = pages.page(page)
    <span class="hljs-keyword">except</span> EmptyPage:
        returned_page = pages.page(pages.num_pages)

    <span class="hljs-comment"># Display the search results</span>
    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'blogengine/search_post_list.html'</span>,
                              {<span class="hljs-string">'page_obj'</span>: returned_page,
                               <span class="hljs-string">'object_list'</span>: returned_page.object_list,
                               <span class="hljs-string">'search'</span>: query})
</code></pre>
<p>As this is the first time we’ve written a view without using generic views, a little explanation is called for. First we get the values of the <code>q</code> and <code>page</code> parameters passed to the view. <code>q</code> contains the query text and <code>page</code> contains the page number. Note also that our page defaults to 1 if not set.</p>
<p>We then use the Q object to perform a query. The Django ORM will <code>AND</code> together keyword argument queries, but that’s not the behaviour we want here. Instead we want to be able to search for content in the title or text, so we need to use a query with an <code>OR</code> statement, which necessitates using the <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects">Q</a> object.</p>
<p>Next, we use the <code>Paginator</code> object to manually paginate the results, and if it raises an <code>EmptyPage</code> exception, to just show the last page instead. Finally we render the template <code>blogengine/search_post_list.html</code>, and pass through the parameters <code>page_obj</code> for the returned page, <code>object_list</code> for the objects, and <code>search</code> for the query.</p>
<p>We also need to add a route for our new view:</p>
<pre><code class="hljs lang-python">
    <span class="hljs-comment"># Search posts</span>
    url(<span class="hljs-string">r'^search'</span>, <span class="hljs-string">'blogengine.views.getSearchResults'</span>),
</code></pre>
<p>Finally, let’s create a new template to show our results:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object_list %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
            </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.category %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-primary"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.tags %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">else</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pager"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/search?page=</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">&amp;q=</span></span></span><span class="hljs-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/search?page=</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">&amp;q=</span></span></span><span class="hljs-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
...........................
----------------------------------------------------------------------
Ran <span class="hljs-number">27</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">6.421</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Don’t forget to do a quick sense check to make sure it’s all working as expected. Then it’s time to commit:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Implemented search'</span>
</code></pre>
<p>And push up your changes:</p>
<pre><code class="hljs lang-bash">$ git push origin master
$ git push heroku master
</code></pre>
<p>And that’s the end of this instalment. Please note this particular search solution is quite basic, and if you want something more powerful, you may want to look at <a href="http://haystacksearch.org/">Haystack</a>.</p>
<p>As usual, you can get this lesson with <code>git checkout lesson-7</code> - if you have any problems, the <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">repository</a> should be the first place you look for answers as this is the working code base for the application, and with judicious use of a tool like <code>diff</code>, it’s generally pretty easy to track down most issues.</p>
<p>In our next, and final instalment, we’ll cover:</p>
<ul>
<li>Tidying everything up</li>
<li>Implementing an XML sitemap for search engines</li>
<li>Optimising our site</li>
<li>Using Fabric to make deployment easier</li>
</ul>
<p>Hope to see you then!</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/</guid>
            <pubDate>Mon, 25 Aug 2014 16:15:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 6]]></title>
            <description><![CDATA[<p>Welcome back! In this tutorial we’ll cover the following:</p>
<ul>
<li>Fixing bugs the TDD way</li>
<li>Setting up syntax highlighting for code snippets</li>
<li>Tidying up the front end</li>
</ul>
<p>Apologies, but I’m holding over implementing the search and additional feeds for a future instalment - in the past I’ve tried to cover too much in one post and that has led to me putting them off for much too long. So this instalment and future ones are going to be shorter so I can get them out the door quicker.</p>
<p>Ready? Let’s get started!</p>
<h1 id="fixing-bugs">Fixing bugs</h1>
<p>When someone reports a bug, it’s tempting to just dive straight in and start fixing it. But TDD cautions us against this practice. If we have a bug, then our tests should have caught it. If they don’t, then before we fix the bug, we have to make sure we can catch it if it crops up in future by implementing a test for it, and ensuring that it fails. Once that test is in place, we can then go ahead and fix the bug, safe in the knowledge that if it should reappear in future, we will be warned when our tests run.</p>
<p>As it happens, we have a bug in our web app. If you activate your virtualenv in the usual way and run the development server, and then try to create a new post without adding a tag, you’ll see that it fails as the tag is empty. Now, it’s pretty obvious that this is because the <code>tags</code> attribute of the <code>Post</code> model cannot be blank, so we have a good idea of what we need to do to fix this. But to make sure it never occurs again, we need to implement a test first.</p>
<p>Add the following method to <code>AdminTest</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post_without_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
</code></pre>
<p>This is virtually identical to our previous method for adding a post, but doesn’t add a tag to the post. If you run <code>python manage.py jenkins</code>, the test should fail. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/tests.py
$ git commit -m <span class="hljs-string">'Added failing test for posts without tags'</span>
</code></pre>
<p>Now we’re in a position to fix our bug. Let’s take a look at our models:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)
    tags = models.ManyToManyField(Tag)
</code></pre>
<p>If you compare <code>category</code> and <code>tags</code>, you’ll immediately see that <code>category</code> has the additional parameters <code>blank</code> and <code>null</code> both set to <code>True</code>. So that’s what we need to do for <code>tags</code> as well. Amend the model to look like this:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)
    tags = models.ManyToManyField(Tag, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)
</code></pre>
<p>You shouldn’t have to create a migration for this. Let’s run our tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins --coverage-html-report=htmlcov
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.......................
----------------------------------------------------------------------
Ran <span class="hljs-number">23</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">7.634</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Our tests pass! So we’ve fixed our bug, and we’ve ensured that if it happens again, we’ll catch it. With that done, it’s time to commit:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/models.py
$ git commit -m <span class="hljs-string">'Fixed a bug with the Post model'</span>
</code></pre>
<p><strong>Remember</strong>: Always make the effort to create a test to reproduce your bug before fixing it. That way, you know you can catch it in future.</p>
<h1 id="syntax-highlighting">Syntax highlighting</h1>
<p>This is one feature that not everyone will want to implement. If you want to be able to show code snippets on your blog, then implementing syntax highlighting is well worth your time. However, if that’s not what you want to use your blog for, feel free to skip over this section.</p>
<p>Now, earlier in the series we implemented Markdown support. In Markdown there are two main ways to denote a code block. One is to indent the code by four spaces, while the other is to use <a href="https://help.github.com/articles/github-flavored-markdown#syntax-highlighting">fenced code blocks with syntax highlighting</a>. There are many flavours of Markdown available for Python, and unfortunately the one we’ve been using so far doesn’t support fenced code blocks, so we’ll be switching to one that does.</p>
<p>We also need to be able to generate a suitable stylesheet to highlight the code appropriately. For that, we’ll be using <a href="http://pygments.org/">Pygments</a>. So let’s first uninstall our existing implementation of Markdown:</p>
<pre><code class="hljs lang-bash">$ pip uninstall Markdown
</code></pre>
<p>And install the new modules:</p>
<pre><code class="hljs lang-bash">$ pip install markdown2 Pygments
</code></pre>
<p>Don’t forget to record the changes:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
</code></pre>
<p>Now, we need to amend our Markdown template tags to use the new version of Markdown:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> markdown2

<span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template
<span class="hljs-keyword">from</span> django.template.defaultfilters <span class="hljs-keyword">import</span> stringfilter
<span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode
<span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe

register = template.Library()

<span class="hljs-decorator">@register.filter(is_safe=True)</span>
<span class="hljs-decorator">@stringfilter</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">custom_markdown</span><span class="hljs-params">(value)</span>:</span>
    extras = [<span class="hljs-string">"fenced-code-blocks"</span>]

    <span class="hljs-keyword">return</span> mark_safe(markdown2.markdown(force_unicode(value),
                                       extras = extras))
</code></pre>
<p>All we do here is change the Markdown module that gets imported, and amend how it is called. Note that we pass through the parameter <code>fenced-code-blocks</code> to enable this functionality.</p>
<p>If you now run the development server and create a post with some code in it (just copy the Ruby example from <a href="https://help.github.com/articles/github-flavored-markdown#syntax-highlighting">here</a>), then view it on the site, you should be able to see that it’s in a <code>&lt;code&gt;</code> block. However, it’s not highlighted yet. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add requirements/txt blogengine/templatetags/custom_markdown.py
$ git commit -m <span class="hljs-string">'Now use Markdown2 to allow for syntax highlighting'</span>
</code></pre>
<p>Now, if you examine the markup for your code blocks using your browser’s developer tools, you’ll notice that the code is wrapped in many different spans with various classes. Pygments can generate a CSS file that uses those classes to highlight your code.</p>
<p>First, let’s create a folder to store our CSS files in:</p>
<pre><code class="hljs lang-bash">$ mkdir blogengine/static/css
</code></pre>
<p>Next, we’ll add a blank CSS file for any other styling we may want to apply:</p>
<pre><code class="hljs lang-bash">$ touch blogengine/static/css/main.css
</code></pre>
<p>Then, we generate our CSS file:</p>
<pre><code class="hljs lang-bash">$ pygmentize -S default <span class="hljs-operator">-f</span> html &gt; blogengine/static/css/code.css
</code></pre>
<p>We need to include our CSS files in our HTML template:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span>

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> staticfiles %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;
            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;</span>

        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s, id)</span> </span>{
            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;
                js = d.createElement(s); js.id = id;
                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;
                fjs.parentNode.insertBefore(js, fjs);
            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-inner"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-navbar"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">".nav-collapse"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav-collapse collapse"</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> header %}</span><span class="xml">
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"page-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container footer"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"span12"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template_tag">{% <span class="hljs-keyword">now</span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="javascript"><span class="hljs-string">"&gt;&lt;\/script&gt;')</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
            (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b,o,i,l,e,r)</span></span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;
            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];
            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;
            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));
            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);
        </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<p>Now, if you run the development server and reload the page, your code will be highlighted using the default Pygments style. If you don’t like it, there are plenty to choose from. Run the following command:</p>
<pre><code class="hljs lang-bash">$ pygmentize -L styles
</code></pre>
<p>That will list the various styles available. For instance, let’s say we want to try the Tango style:</p>
<pre><code class="hljs lang-bash">$ pygmentize -S tango <span class="hljs-operator">-f</span> html &gt; blogengine/static/css/code.css
</code></pre>
<p>If you like the Monokai theme in Sublime Text, there’s a Pygments version of that:</p>
<pre><code class="hljs lang-bash">$ pygmentize -S monokai <span class="hljs-operator">-f</span> html &gt; blogengine/static/css/code.css
</code></pre>
<p>If you like the Solarized theme, that’s not bundled with Pygments, but can be installed separately:</p>
<pre><code class="hljs lang-bash">$ pip install pygments-style-solarized
</code></pre>
<p>Then run this for the light version:</p>
<pre><code class="hljs lang-bash">$ pygmentize -S solarizedlight <span class="hljs-operator">-f</span> html &gt; blogengine/static/css/code.css
</code></pre>
<p>And this for the dark version:</p>
<pre><code class="hljs lang-bash">$ pygmentize -S solarizeddark <span class="hljs-operator">-f</span> html &gt; blogengine/static/css/code.css
</code></pre>
<p>Pick one that you like - I’m going to go for the dark version of Solarized.</p>
<p>Note that this doesn’t actually change the background colour of the code blocks. You will therefore need to set this manually using the CSS file we created earlier. If you’re using Solarized Dark like I am, then this should set it correctly:</p>
<pre><code class="hljs lang-css"><span class="hljs-tag">div</span><span class="hljs-class">.codehilite</span> <span class="hljs-tag">pre</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#002b36</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>If you’re using Solarized Light, then this should be more appropriate:</p>
<pre><code class="hljs lang-css"><span class="hljs-tag">div</span><span class="hljs-class">.codehilite</span> <span class="hljs-tag">pre</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#fdf6e3</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>Or, if you’re using Monokai, black will do:</p>
<pre><code class="hljs lang-css"><span class="hljs-tag">div</span><span class="hljs-class">.codehilite</span> <span class="hljs-tag">pre</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#000000</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>
<p>With that done, let’s record the additional Pygments style:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
</code></pre>
<p>And commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add requirements.txt blogengine/static/css/ templates/blogengine/includes/base.html
$ git commit -m <span class="hljs-string">'Styled code with Solarized Dark'</span>
</code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
E
======================================================================
ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)
----------------------------------------------------------------------
ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests
Traceback (most recent call last):
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">254</span>, <span class="hljs-keyword">in</span> _find_tests
    module = self._get_module_from_name(name)
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _get_module_from_name
    __import__(name)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    import markdown
ImportError: No module named markdown


----------------------------------------------------------------------
Ran <span class="hljs-number">1</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.001</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Whoops! We introduced an error here. If we take a look, we can see that the problem is on line 7, where we import the Markdown module. That makes sense, as we now use a different implementation of Markdown. Fortunately, in Python you can import modules with a different name, which makes this a breeze to fix. Change the line to:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> markdown2 <span class="hljs-keyword">as</span> markdown
</code></pre>
<p>Now, if you run your tests, they should pass. It’s important that if a test breaks, you fix it as soon as possible and don’t put it off. Let’s commit these changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/tests.py
$ git commit -m <span class="hljs-string">'Fixed a broken test'</span>
</code></pre>
<p>Our syntax highlighting is now done! If you want to see it in action using the Solarized Dark theme, check out the copy of this blogging engine hosted <a href="http://blog.shellshocked.info/">here</a>.</p>
<h1 id="tidying-up">Tidying up</h1>
<p>Now that our blog is up and running on Heroku, it could do with a bit of work on the front end to make it look a bit nicer. If you recall, we’re using Bootstrap for our front end, so you may want to refer to the documentation for that to give you some ideas on how you want to style your blog.</p>
<p>Bootstrap has a nifty pager class for Next and Previous links, so let’s apply that to our post list template:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pager"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span></span>
</code></pre>
<p>Let’s also add labels to our categories and tags. We’ll also place our posts and other content inside proper columns:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object_list %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
            </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.category %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-primary"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> post.tags %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">else</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pager"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>We’ll also want to tidy up the layout for our individual post pages:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post col-md-12"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ object.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object.category %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ object.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-primary"</span>&gt;</span></span><span class="hljs-variable">{{ object.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object.tags %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> object.tags.all %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-12"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"fb-comments"</span> <span class="hljs-attribute">data-href</span>=<span class="hljs-value">"http://</span></span></span><span class="hljs-variable">{{ object.site }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value"></span></span></span><span class="hljs-variable">{{ object.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span> <span class="hljs-attribute">data-width</span>=<span class="hljs-value">"470"</span> <span class="hljs-attribute">data-num-posts</span>=<span class="hljs-value">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add templates/blogengine/
$ git commit -m <span class="hljs-string">'Tidied up post templates'</span>
</code></pre>
<p>With that done, let’s turn our attention to our base template. We’ll amend the header to collapse down at smaller screen widths. This is easy to do with Bootstrap:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"alternate"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/rss+xml"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Blog posts"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span> &gt;</span>

        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span>

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> staticfiles %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;
            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;</span>

        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s, id)</span> </span>{
            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;
                js = d.createElement(s); js.id = id;
                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;
                fjs.parentNode.insertBefore(js, fjs);
            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container-fluid"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-toggle"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">"#header-nav"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"collapse navbar-collapse"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"header-nav"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav navbar-nav"</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% get_flatpages <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml">
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
                        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
                        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> header %}</span><span class="xml">
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"page-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container footer"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"span12"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template_tag">{% <span class="hljs-keyword">now</span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="javascript"><span class="hljs-string">"&gt;&lt;\/script&gt;')</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
            (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b,o,i,l,e,r)</span></span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;
            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];
            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;
            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));
            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);
        </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<p>Here we’ve also added a link to our RSS feed in the header, and another in the page head to facilitate working with browsers that support RSS better.</p>
<p>Our blog’s now looking much more presentable. All that remains is to commit it:</p>
<pre><code class="hljs lang-bash">$ git add templates/blogengine/includes/base.html
$ git commit -m <span class="hljs-string">'Amended base template'</span>
</code></pre>
<p>Now we can push it to GitHub and deploy it on Heroku:</p>
<pre><code class="hljs lang-bash">$ git push origin master
$ git push heroku master
</code></pre>
<p>And we’re done! Don’t forget, you can grab this lesson with <code>git checkout lesson-6</code>.</p>
<p>Next time, we’ll cover search (I promise!).</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/</guid>
            <pubDate>Sun, 25 May 2014 16:23:28 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 5]]></title>
            <description><![CDATA[<p>Hello again! I was originally planning to cover implementing a search system, adding more feeds, and tidying up the front end in this instalment. However, I felt it was time for a change of pace, so instead, we’re going to look at:</p>
<ul>
<li>Checking code coverage and getting it to 100%</li>
<li>Using continuous integration</li>
<li>Deploying to Heroku</li>
</ul>
<p>Don’t worry, the original lesson isn’t going anywhere. We’ll still be implementing all of that later on, but today is the day we get your Django blog up and running on the web. That way, you can get a better idea of how Django works in the wild, and you have something concrete to show for your efforts.</p>
<h1 id="continuous-integration">Continuous integration</h1>
<p>If you’re not familiar with continuous integration, it’s basically a process that carries out some tasks automatically when you push a new commit to the repository. These tasks may include running unit tests, linting your code, and checking it to see what percentage of the code base is covered by the tests (after all, if your tests don’t actually cover every scenario, then there’s more of a chance that something might slip through the net. It’s also possible to implement hooks to automatically deploy your application only if the tests pass.</p>
<p>Typically, you will have a continuous integration server running somewhere that regularly polls your Git repository for changes, and when it finds a new commit, will check it out and run the tests (or whatever other task you configure it to). One of the most popular continuous integration servers around is <a href="http://jenkins-ci.org/">Jenkins</a> - I use it at work and can highly recommend it. However, we aren’t going to cover using Jenkins here because setting it up is quite a big deal and it really is best kept on a server of its own (although feel free to use it if you prefer). Instead, we’re going to use <a href="https://travis-ci.org/">Travis CI</a>, which integrates nicely with GitHub and is free for open source projects. If you don’t mind your code being publicly available on GitHub, then Travis is a really great way to dip your toe into continuous integration.</p>
<p>NB: You don’t have to use continuous integration at all if you don’t want to - this isn’t a big project so you don’t really need it. If you don’t want to put your code on GitHub, then feel free to just follow along and not bother pushing your code to GitHub and configuring Travis.</p>
<h1 id="code-coverage">Code coverage</h1>
<p>As mentioned above, code coverage is a measure of the percentage of the code that is covered by tests. While not infallible, it’s a fairly good guide to how comprehensive your tests are. If you have 100% code coverage, you can be fairly confident that your tests are comprehensive enough to catch most errors, so it’s a good rule of thumb to aim for 100% test coverage on a project.</p>
<p>So how do we check our test coverage? The <code>coverage</code> Python module is the most common tool for this. There’s also a handy Django module called <code>django-jenkins</code>, which is designed to work with Jenkins, but can be used with any continuous integration server, that can not only run your tests, but also check code coverage at the same time. So, make sure your virtualenv is up and running:</p>
<pre><code class="hljs lang-bash">$ <span class="hljs-built_in">source</span> venv/bin/activate
</code></pre>
<p>Then, run the following command:</p>
<pre><code class="hljs lang-bash">$ pip install coverage django-jenkins
</code></pre>
<p>Once that’s done, add these to our requirements file:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
</code></pre>
<p>We now need to configure our Django project to use <code>django-jenkins</code>. Add the following to the bottom of the settings file:</p>
<pre><code class="hljs lang-python">INSTALLED_APPS += (<span class="hljs-string">'django_jenkins'</span>,)
JENKINS_TASKS = (
    <span class="hljs-string">'django_jenkins.tasks.run_pylint'</span>,
    <span class="hljs-string">'django_jenkins.tasks.with_coverage'</span>,
)
PROJECT_APPS = [<span class="hljs-string">'blogengine'</span>]
</code></pre>
<p>This adds <code>django-jenkins</code> to our installed apps and tells it to include two additional tasks, besides running the tests. The first task runs Pylint to check our code quality (but we aren’t really concerned about that at this point). The second checks the coverage. Finally, we tell <code>django-jenkins</code> that the <code>blogengine</code> app is the only one to be tested.</p>
<p>You’ll also want to add the following lines to your <code>.gitignore</code>:</p>
<pre><code class="hljs lang-bash">reports/
htmlcov/
</code></pre>
<p>These are the reports generated by <code>django-jenkins</code>, and should not be kept under version control. With that done, it’s time to commit:</p>
<pre><code class="hljs lang-bash">$ git add .gitignore django_tutorial_blog_ng/ requirements.txt
$ git commit -m <span class="hljs-string">'Added coverage checking using django-jenkins'</span>
</code></pre>
<p>Now, let’s run our tests. From now on, you’ll use the following command to run your tests:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins
</code></pre>
<p>This ensures we check the coverage at the same time. Now, you’ll notice that the <code>reports</code> folder has been created, and it will contain three files, including one called <code>coverage.xml</code>. However, XML isn’t a very friendly format. Happily, we can easily generate reports in HTML instead:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins --coverage-html-report=htmlcov
</code></pre>
<p>Running this command will create another folder called <code>htmlcov/</code>, and in here you will find your report, nicely formatted as HTML. Open up <code>index.html</code> in your web browser and you should see a file-by-file breakdown of your code coverage. Nice, huh?</p>
<p>Now, if your code so far is largely identical to mine, you’ll notice that the model and view files don’t have 100% coverage yet. If you click on each one, you’ll see a handy line-by-line breakdown of the test coverage for each file. You’ll notice that in the views file, the areas of the code for when tags and categories don’t exist are highlighted in pink - this tells you that these lines of code are never executed during the tests. So let’s fix that.</p>
<p>First, our template needs to be able to handle empty lists.</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> object_list %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
            </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">else</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Let’s commit the changes:</p>
<pre><code class="hljs lang-bash">$ git add templates/blogengine/post_list.html
$ git commit -m <span class="hljs-string">'Added a "No posts found" message to post list template'</span>
</code></pre>
<p>Next, we need to write tests to check that we get a “No posts found” message when we view a tag or category that does not exist. Add the following methods to the class <code>PostViewTest()</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_nonexistent_category_page</span><span class="hljs-params">(self)</span>:</span>
        category_url = <span class="hljs-string">'/category/blah/'</span>
        response = self.client.get(category_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_nonexistent_tag_page</span><span class="hljs-params">(self)</span>:</span>
        tag_url = <span class="hljs-string">'/tag/blah/'</span>
        response = self.client.get(tag_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Now, let’s run our tests again:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins --coverage-html-report=htmlcov
</code></pre>
<p>Assuming they all pass as expected, then your coverage reports will be regenerated. If you reload the coverage report, you should see that your views now have 100% test coverage. Let’s commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/tests.py
$ git commit -m <span class="hljs-string">'Views file now has 100% coverage'</span>
</code></pre>
<p>Now, our models still don’t have 100% coverage yet. If you look at the breakdown for <code>models.py</code>, you’ll see that the line <code>if not self.slug:</code> has only partial coverage, because we missed out setting a slug for the categories and tags in our test. So, let’s fix that. In <code>PostTest()</code>, amend the <code>test_create_category()</code> and <code>test_create_tag()</code> methods as follows:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()

        <span class="hljs-comment"># Add attributes</span>
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.slug = <span class="hljs-string">'python'</span>

        <span class="hljs-comment"># Save it</span>
        category.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)
        only_category = all_categories[<span class="hljs-number">0</span>]
        self.assertEquals(only_category, category)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_category.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_category.description, <span class="hljs-string">'The Python programming language'</span>)
        self.assertEquals(only_category.slug, <span class="hljs-string">'python'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()

        <span class="hljs-comment"># Add attributes</span>
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.slug = <span class="hljs-string">'python'</span>

        <span class="hljs-comment"># Save it</span>
        tag.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)
        only_tag = all_tags[<span class="hljs-number">0</span>]
        self.assertEquals(only_tag, tag)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_tag.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_tag.description, <span class="hljs-string">'The Python programming language'</span>)
        self.assertEquals(only_tag.slug, <span class="hljs-string">'python'</span>)
</code></pre>
<p>Run the tests again:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins --coverage-html-report=htmlcov
</code></pre>
<p>Then refresh your coverage page, and we should have hit 100% coverage. Excellent news! This means that we can be confident that if any problems get introduced in future, we can pick them up easily. To demonstrate this, let’s upgrade our Django install to the latest version and check everything still works as expected:</p>
<pre><code class="hljs lang-bash">$ pip install Django --upgrade
</code></pre>
<p>This will upgrade the copy of Django in our virtualenv to the latest version. Then we can run our tests again:</p>
<pre><code class="hljs lang-bash">$ python manage.py jenkins --coverage-html-report=htmlcov
</code></pre>
<p>Our tests should still pass, indicating that the upgrade to our Django version does not appear to have broken any functionality. Let’s update our <code>requirements.txt</code>:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
$ git add requirements.txt
$ git commit -m <span class="hljs-string">'Upgraded Django version'</span>
</code></pre>
<h1 id="preparing-our-web-app-for-deployment-to-heroku">Preparing our web app for deployment to Heroku</h1>
<p>As mentioned previously, I’m going to assume you plan to deploy your site on <a href="https://www.heroku.com/">Heroku</a>. It has good Django support, and you can quite happily host a blog there using their free tariff. If you’d prefer to use another hosting provider, then you should be able to adapt these instructions accordingly.</p>
<p>Now, so far we’ve used SQLite as our database for development purposes. However, SQLite isn’t really suitable for production purposes. Heroku provide a Postgresql database for each web app, so we will use that. To configure it, open up <code>settings.py</code> and amend the database configuration section to look like this:</p>
<pre><code class="hljs lang-python">DATABASES = {
    <span class="hljs-string">'default'</span>: {
        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.'</span>,
        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">''</span>,
    }
}
</code></pre>
<p>Then, add the following at the end of the file:</p>
<pre><code class="hljs lang-python">
<span class="hljs-comment"># Heroku config</span>
<span class="hljs-comment"># Parse database configuration from $DATABASE_URL</span>
<span class="hljs-keyword">import</span> dj_database_url
DATABASES[<span class="hljs-string">'default'</span>] =  dj_database_url.config(default=<span class="hljs-string">"sqlite:///db.sqlite3"</span>)

<span class="hljs-comment"># Honor the 'X-Forwarded-Proto' header for request.is_secure()</span>
SECURE_PROXY_SSL_HEADER = (<span class="hljs-string">'HTTP_X_FORWARDED_PROTO'</span>, <span class="hljs-string">'https'</span>)

<span class="hljs-comment"># Allow all host headers</span>
ALLOWED_HOSTS = [<span class="hljs-string">'*'</span>]

<span class="hljs-comment"># Static asset configuration</span>
STATIC_ROOT = <span class="hljs-string">'staticfiles'</span>

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, <span class="hljs-string">'static'</span>),
)
</code></pre>
<p>A little explanation is called for. Remember when we first started out, we installed the <code>django-toolbelt</code> package, which included <code>dj-database-url</code>? Well, here we use the <code>dj_database_url</code> module to get the database from an environment variable set on Heroku. We set a default value so as to fall back to SQLite when that variable is not set. The other settings are required by Heroku.</p>
<p>You may want to run your tests again to ensure everything is still working before committing:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/settings.py
$ git commit -m <span class="hljs-string">'Amended settings to work on desktop and Heroku'</span>
</code></pre>
<h1 id="setting-up-continuous-integration-and-coverage">Setting up Continuous Integration and coverage</h1>
<p>Now, as mentioned previously, I’ll be demonstrating how to set up Travis CI for our project. Travis CI is only free for open-source projects, so if you don’t want to make your code publicly accessible, you may want to use Jenkins instead. I’ll leave setting that up and running it as an exercise for the reader, but I recommend a plugin called Cobertura which allows you to publish details of your code’s test coverage.</p>
<p>Unfortunately, Travis CI doesn’t have the capability to publish your coverage results. Fortunately, you can use <a href="https://coveralls.io/">Coveralls.io</a> to pick up the slack. Like Travis, it’s free for open-source projects, and if you host your code on GitHub, it’s pretty easy to use.</p>
<p>You can find instructions on setting up a project on Travis CI <a href="http://docs.travis-ci.com/user/getting-started/">here</a>. Once you’ve configured it, you’ll need to set up your <code>.travis.yml</code> file. This is a simple text file that tells Travis CI how to run your tests. Put the following content in the file:</p>
<pre><code class="hljs lang-yml"><span class="hljs-label">language:</span> python
<span class="hljs-label">python:</span>
- <span class="hljs-string">"2.7"</span>
<span class="hljs-preprocessor"># command to install dependencies</span>
<span class="hljs-label">install:</span> <span class="hljs-string">"pip install -r requirements.txt"</span>
<span class="hljs-preprocessor"># command to run tests</span>
<span class="hljs-label">script:</span> coverage run --include=<span class="hljs-string">"blogengine/*"</span> --omit=<span class="hljs-string">"blogengine/migrations/*"</span> manage.py test blogengine
<span class="hljs-label">after_success:</span>
    coveralls
</code></pre>
<p>Now, this tells Travis that this is a Python application, and we should be using Python 2.7. Please note you can test against multiple versions of Python if you wish - just add another line with the Python version you want to test against.</p>
<p>Then, we see that we use Pip to install our requirements. Finally we run our tests with Coverage, in order to generate coverage data, and afterwards call <code>coveralls</code> to pass the coverage data to Coveralls.io.</p>
<p>We also need to install the <code>coveralls</code> module:</p>
<pre><code class="hljs lang-bash">$ pip install coveralls
$ pip freeze &gt; requirements.txt
</code></pre>
<p>And we need to keep our coverage data out of version control:</p>
<pre><code class="hljs lang-bash">env/
*.pyc
db.sqlite3
blogengine/static/bower_components/
reports/
htmlcov/
.coverage
</code></pre>
<p>You’ll also want to set up your project on Coveralls, as described <a href="https://coveralls.io/docs">here</a> - please note that this requires your project be in a public GitHub repository.</p>
<p>With that done, let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add .gitignore .travis.yml requirements.txt
$ git commit -m <span class="hljs-string">'Added Travis config file and Coveralls support'</span>
</code></pre>
<p>With that done, assuming you have Travis CI and Coveralls configured, and your code is already hosted on GitHub, then you should be able to just push your code up to trigger the build:</p>
<pre><code class="hljs lang-bash">$ git push origin master
</code></pre>
<p>If you keep an eye on Travis in your browser, you can watch what happens as your tests are run. If for any reason the build fails, then it shouldn’t be too hard to figure out what has gone wrong using the documentation for Travis and Coveralls - both services are pretty easy to use.</p>
<p>Congratulations - you’re now using Continuous Integration! That wasn’t so hard, was it? Now, every time you push to GitHub, Travis will run your tests, and you’ll get an email if they fail, giving you early warning of any problems, and you can check your coverage at the same time. Both Travis and Coveralls offer badges that you can place in your README file on GitHub to show off your coverage and build status - feel free to add these to your repo.</p>
<p>You may want to try making a change that breaks your tests and committing it, then pushing it up, so that you can see what happens when the build breaks.</p>
<h1 id="deploying-to-heroku">Deploying to Heroku</h1>
<p>Our final task today is deploying our blog to Heroku so we can see it in action. First of all, if you don’t already have an account with Heroku, you’ll need to sign up <a href="https://www.heroku.com/">here</a>. You should also be prompted to install the Heroku toolbelt. Once that’s done, run the following command:</p>
<pre><code class="hljs lang-bash">$ heroku login
</code></pre>
<p>You’ll be prompted for your credentials - enter these and you should be able to log in successfully.</p>
<p>Now, in order to run our Django app on Heroku, we’ll need to add a <code>Procfile</code> to tell Heroku what command to run in order to start your app. In this case, we will be using Gunicorn as our web server. Assuming our project is called <code>django_tutorial_blog_ng</code>, this is what you need to put in this file:</p>
<pre><code class="hljs lang-bash">web: gunicorn django_tutorial_blog_ng.wsgi
</code></pre>
<p>That tells Heroku that the file we need to run for this application is <code>django_tutorial_blog_ng/wsgi.py</code>. To test it, run the following command:</p>
<pre><code class="hljs lang-bash">$ foreman start
</code></pre>
<p>That will start our web server on port 5000, using Gunicorn rather than the Django development server. You should be able to see it in action <a href="http://127.0.0.1:5000/">here</a>, but you’ll notice a very serious issue - namely that the static files aren’t being served. Now, Django has a command called <code>collectstatic</code> that collects all the static files and drops them into one convenient folder. Heroku will run this command automatically, so we need to ensure our static files are available. Amend your <code>.gitignore</code> file so it no longer excludes our static files:</p>
<pre><code class="hljs lang-bash">venv/
*.pyc
db.sqlite3
reports/
htmlcov/
.coverage
</code></pre>
<p>We also need to amend our wsgi.py to serve static files:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> os
os.environ.setdefault(<span class="hljs-string">"DJANGO_SETTINGS_MODULE"</span>, <span class="hljs-string">"django_tutorial_blog_ng.settings"</span>)

<span class="hljs-keyword">from</span> django.core.wsgi <span class="hljs-keyword">import</span> get_wsgi_application
<span class="hljs-keyword">from</span> dj_static <span class="hljs-keyword">import</span> Cling

application = Cling(get_wsgi_application())
</code></pre>
<p>This should solve our problem. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/wsgi.py Procfile blogengine/static/ .gitignore
$ git commit -m <span class="hljs-string">'Configured app for deployment on Heroku'</span>
</code></pre>
<p>Now we’re ready to deploy our app!</p>
<h1 id="deployment">Deployment</h1>
<p>Every Heroku app needs a unique name. If you don’t specify one, then Heroku will generate one for you. Your app will have the domain name <code>appname.herokuapp.com</code> - however, if you already have a domain name lined up for your blog, you can point that domain name at the Heroku app if you wish. I’m going to deploy mine with the name <code>blog-shellshocked-info</code>.</p>
<p>You also need to consider where you want to deploy it. Heroku has two regions - North America and EU. By default it will deploy to North America, but as I’m in the EU, that’s where I want to deploy my app to - obviously if you’re in the Americas, you may be better off sticking with North America.</p>
<p>So, let’s create our app. Here’s the command you need to run:</p>
<pre><code class="hljs lang-bash">$ heroku apps:create blog-shellshocked-info --region eu
</code></pre>
<p>You will want to change the app name, or remove it entirely if you’re happy for Heroku to generate one for you. If you want to host it in North America, drop the <code>--region eu</code> section.</p>
<p>Once completed, this will have created your new app, and added a Git remote for it, but will not have deployed it. To deploy your app, run this command:</p>
<pre><code class="hljs lang-bash">$ git push heroku master
</code></pre>
<p>That will push your code up to Heroku. Please note that building the app may take a little while. Once it’s done, you can run <code>heroku open</code> to open it in your web browser. You should see an error message stating that the relation <code>blogengine_post</code> does not exist. That’s because we need to create our database structure. Heroku allows you to easily run commands on your app with <code>heroku run</code>, so let’s create our database and run our migrations:</p>
<pre><code class="hljs lang-bash">$ heroku run python manage.py syncdb
$ heroku run python manage.py migrate
</code></pre>
<p>These are exactly the same commands you would run locally to create your database, but prefaced with <code>heroku run</code> so that they get run by Heroku. As usual, you will be prompted to create a superuser - you’ll want to do this so you can log into the admin.</p>
<p>That’s all for today! We’ve finally got our site up and running on Heroku, and set up continuous integration so our tests will get run for us. You can see an example of the site working <a href="http://blog.shellshocked.info/">here</a>. As usual, you can check out the latest version of the code with <code>git checkout lesson-5</code>. If you’d like a homework assignment, then take a look at <a href="http://docs.travis-ci.com/user/deployment/heroku/">automating deployment to Heroku on successful builds</a> and see if you can get it set up successfully.</p>
<p>Next time around, we’ll get back to implementing our search and tidying up the front end. See you then!</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/</guid>
            <pubDate>Sat, 24 May 2014 19:15:54 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 4]]></title>
            <description><![CDATA[<p>Hello again! As promised, in this instalment we’ll implement categories and tags, as well as an RSS feed.</p>
<p>As usual, we need to switch into our virtualenv:</p>
<pre><code class="hljs lang-bash">$ <span class="hljs-built_in">source</span> venv/bin/activate
</code></pre>
<h2 id="categories">Categories</h2>
<p>It’s worth taking a little time at this point to set out what we mean by categories and tags in this case, as the two can be very similar. In this case, we’ll use the following criteria:</p>
<ul>
<li>A post can have only one category, or none, but a category can be applied to any number of posts</li>
<li>A post can have any number of tags, and a tag can be applied to any number of posts</li>
</ul>
<p>If you’re not too familiar with relational database theory, the significance of this may not be apparent, so here’s a quick explanation. Because the categories are limited to one per post, the relationship between a post and a category is known as <em>one-to-many</em>. In other words, one post can only have one category, but one category can have many posts. You can therefore define the categories in one table in your database, and refer to them by their ID (the reference to the category in the post table is referred to as a <em>foreign key</em>).</p>
<p>As usual, we will write a test first. Open up <code>blogengine/tests.py</code> and edit the line importing the <code>Post</code> model as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category
</code></pre>
<p>Also, add the following method before <code>test_create_post</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()

        <span class="hljs-comment"># Add attributes</span>
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>

        <span class="hljs-comment"># Save it</span>
        category.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)
        only_category = all_categories[<span class="hljs-number">0</span>]
        self.assertEquals(only_category, category)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_category.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_category.description, <span class="hljs-string">'The Python programming language'</span>)
</code></pre>
<p>This test checks that we can create categories. But categories aren’t much use unless we can actually apply them to our posts. So we need to edit our <code>Post</code> model as well, and to do so we need to have a test in place first. Edit the <code>test_create_post</code> method as follows:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)
        self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)
        self.assertEquals(only_post.site.domain, <span class="hljs-string">'example.com'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)
        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)
        self.assertEquals(only_post.category.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_post.category.description, <span class="hljs-string">'The Python programming language'</span>)
</code></pre>
<p>What we’re doing here is adding a <code>category</code> attribute to the posts. This attribute contains a reference to a <code>Category</code> object.</p>
<p>Now, we also want to test adding, editing, and deleting a category from the admin interface. Add this code to the <code>AdminTest</code> class:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/category/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new category</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/add/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span>
            },
            follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new category now in database</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the category</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/1/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span>
            }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check category amended</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)
        only_category = all_categories[<span class="hljs-number">0</span>]
        self.assertEquals(only_category.name, <span class="hljs-string">'perl'</span>)
        self.assertEquals(only_category.description, <span class="hljs-string">'The Perl programming language'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_category</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the category</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check category deleted</span>
        all_categories = Category.objects.all()
        self.assertEquals(len(all_categories), <span class="hljs-number">0</span>)
</code></pre>
<p>This is very similar to the prior code for the posts, and just checks we can create categories via the admin. We also need to check we can apply these categories to posts, and that they don’t break the existing tests:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.site = site
        post.author = author
        post.category = category
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post deleted</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)
</code></pre>
<p>Here we basically take our existing post tests in the admin interface and add the category to them. Finally, we edit the <code>PostViewTest</code> class to include categories:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Now it’s time to run our tests:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
E
======================================================================
ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)
----------------------------------------------------------------------
ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests
Traceback (most recent call last):
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">254</span>, <span class="hljs-keyword">in</span> _find_tests
    module = self._get_module_from_name(name)
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _get_module_from_name
    __import__(name)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    from blogengine.models import Post, Category
ImportError: cannot import name Category


----------------------------------------------------------------------
Ran <span class="hljs-number">1</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>This is the expected result. We need to create our Category model. So let’s do that:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span>
    name = models.CharField(max_length=<span class="hljs-number">200</span>)
    description = models.TextField()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>Note that we add <code>Category</code> before <code>Post</code> - this is because <code>Category</code> is a foreign key in <code>Post</code>, and must be defined in order to be used. Also, note that we add the <code>category</code> attribute as a <code>ForeignKey</code> field, like <code>User</code> and <code>Site</code>, indicating that it is an item in another table being references.</p>
<p>We also allow for <code>category</code> to be blank or null, so the user does not have to apply a category if they don’t wish to.</p>
<p>If we run our tests, they should still fail:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
EEFEEEEE...EE
======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_category (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">20</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_category
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">37</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">215</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">192</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_delete_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">304</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_post
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">165</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">250</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_index (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">353</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_index
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
ERROR: <span class="hljs-built_in">test</span>_post_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">403</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post_page
    category.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_category

======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">13</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.393</span>s

FAILED (failures=<span class="hljs-number">1</span>, errors=<span class="hljs-number">9</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>The category table hasn’t yet been created, so we need to use South to create and run the migrations:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --auto blogengine
$ python manage.py migrate
</code></pre>
<p>If we then run our tests again, some of them will still fail:</p>
<pre><code class="hljs lang-bash">Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..F.F.F......
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">142</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_delete_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">201</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_category (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">175</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_category
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">13</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">4.047</span>s

FAILED (failures=<span class="hljs-number">3</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>That’s because we haven’t registered the categories in the admin. So, that’s our next job:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span>
    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}
    exclude = (<span class="hljs-string">'author'</span>,)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span>
        obj.author = request.user
        obj.save()

admin.site.register(models.Category)
admin.site.register(models.Post, PostAdmin)
</code></pre>
<p>Now we try again:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.............
----------------------------------------------------------------------
Ran <span class="hljs-number">13</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">4.092</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>It passes! Let’s do a quick sense check before committing. Run the server:</p>
<pre><code class="hljs lang-bash">$ python manage.py runserver
</code></pre>
<p>If you visit the <a href="http://127.0.0.1:8000/admin/">admin</a>, you’ll see the text for category is <code>Categorys</code>, which is incorrect. We also don’t have a good representation of the category in the admin. Let’s fix that:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span>
    name = models.CharField(max_length=<span class="hljs-number">200</span>)
    description = models.TextField()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.name

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        verbose_name_plural = <span class="hljs-string">'categories'</span>


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Implemented categories'</span>
</code></pre>
<p>Now, as yet our categories don’t actually do all that much. We would like to be able to:</p>
<ul>
<li>List all posts under a category</li>
<li>Show the post category at the base of the post</li>
</ul>
<p>So, let’s implement that. First, as usual, we implement tests first:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post category is in the response</span>
        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post category is in the response</span>
        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>All we do here is assert that for both the post pages and the index, the text from the category name is shown in the response. We also need to check the category-specific route works. Add this method to <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_category_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the category URL</span>
        category_url = post.category.get_absolute_url()

        <span class="hljs-comment"># Fetch the category</span>
        response = self.client.get(category_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the category name is in the response</span>
        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>This is very similar to the previous tests, but fetches the absolute URL for the category, and ensures the category name and post content are shown. Now, let’s run our new tests:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
...........EFF
======================================================================
ERROR: <span class="hljs-built_in">test</span>_category_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">494</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_category_page
    category_url = post.category.get_absolute_url()
AttributeError: <span class="hljs-string">'Category'</span> object has no attribute <span class="hljs-string">'get_absolute_url'</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_index (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">391</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_index
    self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_post_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">446</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post_page
    self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">14</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.017</span>s

FAILED (failures=<span class="hljs-number">2</span>, errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s take a look at why they failed. <code>test_category_page</code> failed because the <code>Category</code> object had no method <code>get_absolute_url</code>. So we need to implement one. To do so, we really need to add a slug field, like the posts already have. Ideally, we want this to be populated automatically, but with the option to create one manually. So, edit the models as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site
<span class="hljs-keyword">from</span> django.utils.text <span class="hljs-keyword">import</span> slugify

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span>
    name = models.CharField(max_length=<span class="hljs-number">200</span>)
    description = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:
            self.slug = slugify(unicode(self.name))
        super(Category, self).save()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/category/%s/"</span> % (self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.name

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        verbose_name_plural = <span class="hljs-string">'categories'</span>


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>We’re adding the <code>slug</code> attribute to the <code>Category</code> model here. However, we’re also overriding the <code>save</code> method to detect if the slug is set, and if not, to create a slug using the <code>slugify</code> function, and set it as the category’s slug. We also define an absolute URL for the category.</p>
<p>Now, if you run the tests, they will fail because we haven’t made the changes to the database. So, we use South again:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --auto blogengine
</code></pre>
<p>Then run the migration:</p>
<pre><code class="hljs lang-bash">$ python manage.py migrate
</code></pre>
<p>Now, running our tests will show that the tables are in place, but we still have some work to do. The index and post pages don’t show our categories, so we’ll fix that. First, we’ll fix our post list:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Next, we’ll take care of our post detail page:</p>
<pre><code class="hljs lang-html"><span class="xml">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.title</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.pub</span>_<span class="hljs-variable">date</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-expression">{{ <span class="hljs-variable">object.text</span>|<span class="hljs-variable">custom</span>_<span class="hljs-variable">markdown</span> }}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.category.get</span>_<span class="hljs-variable">absolute</span>_<span class="hljs-variable">url</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.category.name</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"fb-comments"</span> <span class="hljs-attribute">data-href</span>=<span class="hljs-value">"http://</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">post.site</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value"></span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">post.get</span>_<span class="hljs-variable">absolute</span>_<span class="hljs-variable">url</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span> <span class="hljs-attribute">data-width</span>=<span class="hljs-value">"470"</span> <span class="hljs-attribute">data-num-posts</span>=<span class="hljs-value">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    {% endblock %}</span>
</code></pre>
<p>Note that in both cases we include a link to the category URL.</p>
<p>Now, we should only have one failing test outstanding - the category page. For this, generic views aren’t sufficient as we need to limit the queryset to only show those posts with a specific category. Fortunately, we can extend Django’s generic views to add this functionality. First, we edit our URLconfs:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category
<span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        )),

    <span class="hljs-comment"># Individual posts</span>
    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(
        model=Post,
        )),

    <span class="hljs-comment"># Categories</span>
    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Category,
        )),
)
</code></pre>
<p>Note we import a new view from <code>blogengine.views</code> called <code>CategoryListView</code>. Next, we create that listview:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post

<span class="hljs-comment"># Create your views here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            category = Category.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)
        <span class="hljs-keyword">except</span> Category.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()
</code></pre>
<p>This is quite simple. We import the <code>ListView</code>, as well as our models. Then we extend <code>ListView</code> by getting the slug from the request, fetching the appropriate category, and returning only those posts that have that category. If the category does not exist, we return the empty <code>Post</code> object list. We haven’t had to set the template manually as it is inherited from <code>ListView</code>.</p>
<p>If you run the tests, they should now pass:</p>
<pre><code class="hljs lang-bash">Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..............
----------------------------------------------------------------------
Ran <span class="hljs-number">14</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.083</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>So let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ templates/
$ git commit -m <span class="hljs-string">'Categories are now shown'</span>
</code></pre>
<h2 id="tags">Tags</h2>
<p>Tags are fairly similar to categories, but more complex. The relationship they have is called <em>many-to-many</em> - in other words, a tag can be applied to many posts, and one post can have many tags. This is more difficult to model with a relational database. The usual way to do so is to create an intermediate table between the posts and tags, to identify mappings between the two. Fortunately, Django makes this quite easy.</p>
<p>Let’s write the tests for our tagging system. As with the categories, we’ll write the tests for creating and editing them first, and add in tests for them being visible later. First we’ll create a test for creating a new tag object:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()

        <span class="hljs-comment"># Add attributes</span>
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>

        <span class="hljs-comment"># Save it</span>
        tag.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)
        only_tag = all_tags[<span class="hljs-number">0</span>]
        self.assertEquals(only_tag, tag)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_tag.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_tag.description, <span class="hljs-string">'The Python programming language'</span>)
</code></pre>
<p>Next, we’ll amend the test for creating a post to include tags:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Add the tag</span>
        post.tags.add(tag)
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)
        self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)
        self.assertEquals(only_post.site.domain, <span class="hljs-string">'example.com'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)
        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)
        self.assertEquals(only_post.category.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_post.category.description, <span class="hljs-string">'The Python programming language'</span>)

        <span class="hljs-comment"># Check tags</span>
        post_tags = only_post.tags.all()
        self.assertEquals(len(post_tags), <span class="hljs-number">1</span>)
        only_post_tag = post_tags[<span class="hljs-number">0</span>]
        self.assertEquals(only_post_tag, tag)
        self.assertEquals(only_post_tag.name, <span class="hljs-string">'python'</span>)
        self.assertEquals(only_post_tag.description, <span class="hljs-string">'The Python programming language'</span>)
</code></pre>
<p>Note the difference in how we apply the tags. Because a post can have more than one tag, we can’t just define <code>post.tag</code> in the same way. Instead, we have <code>post.tags</code>, which you can think of as a list, and we use the <code>add</code> method to add a new tag. Note also that the post must already exist before we can add a tag.</p>
<p>We also need to create acceptance tests for creating, editing and deleting tags:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new tag</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span>
            },
            follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new tag now in database</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the tag</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/1/'</span>, {
            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,
            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span>
            }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check tag amended</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)
        only_tag = all_tags[<span class="hljs-number">0</span>]
        self.assertEquals(only_tag.name, <span class="hljs-string">'perl'</span>)
        self.assertEquals(only_tag.description, <span class="hljs-string">'The Perl programming language'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_tag</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the tag</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check tag deleted</span>
        all_tags = Tag.objects.all()
        self.assertEquals(len(all_tags), <span class="hljs-number">0</span>)
</code></pre>
<p>These tests are virtually identical to those for the <code>Category</code> objects, as we plan for our <code>Tag</code> objects to be very similar. Finally, we need to amend the acceptance tests for <code>Post</code> objects to include a tag:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'tags'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.save()
        post.tags.add(tag)
        post.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>,
            <span class="hljs-string">'tags'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.site = site
        post.author = author
        post.category = category
        post.save()
        post.tags.add(tag)
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post deleted</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)
</code></pre>
<p>Here we’re just adding tags to our <code>Post</code> objects.</p>
<p>Now it’s time to run our tests to make sure they fail as expected:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
E
======================================================================
ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)
----------------------------------------------------------------------
ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests
Traceback (most recent call last):
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">254</span>, <span class="hljs-keyword">in</span> _find_tests
    module = self._get_module_from_name(name)
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _get_module_from_name
    __import__(name)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    from blogengine.models import Post, Category, Tag
ImportError: cannot import name Tag


----------------------------------------------------------------------
Ran <span class="hljs-number">1</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>So here we can’t import our <code>Tag</code> model, because we haven’t created it. So, we’ll do that:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tag</span><span class="hljs-params">(models.Model)</span>:</span>
    name = models.CharField(max_length=<span class="hljs-number">200</span>)
    description = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:
            self.slug = slugify(unicode(self.name))
        super(Tag, self).save()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/tag/%s/"</span> % (self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.name
</code></pre>
<p>Our <code>Tag</code> model is very much like our <code>Category</code> model, but we don’t need to change the <code>verbose_name_plural</code> value, and we amend the absolute URL to show it as a tag rather than a category.</p>
<p>We also need to amend our <code>Post</code> model to include a <code>tags</code> field:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)
    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)
    tags = models.ManyToManyField(Tag)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>Note that <code>tags</code> is a <code>ManyToManyField</code>, and we pass through the model we wish to use, much like we did with the categories. The difference is that one tag can be applied to many posts and a post can have many tags, so we need an intermediate database table to handle the relationship between the two. With Django’s ORM we can handle this quickly and easily.</p>
<p>Run our tests and they should still fail:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.EE.EF.EE.EE......
======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">64</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_tag (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">41</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_tag
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">335</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
ERROR: <span class="hljs-built_in">test</span>_delete_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">440</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_post
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
ERROR: <span class="hljs-built_in">test</span>_delete_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">306</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_tag
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
ERROR: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">377</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
ERROR: <span class="hljs-built_in">test</span>_edit_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">279</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_tag
    tag.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> save
    super(Tag, self).save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_tag

======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">256</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">18</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.981</span>s

FAILED (failures=<span class="hljs-number">1</span>, errors=<span class="hljs-number">7</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Again, we can easily see why they failed - the <code>blogengine_tag</code> table is not in place. So let’s create and run our migrations to fix that:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --auto blogengine
$ python manage.py migrate
</code></pre>
<p>Now, we run our tests again:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.....F..F..F......
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">256</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_delete_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">315</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_delete_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_tag (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">289</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_tag
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">18</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.124</span>s

FAILED (failures=<span class="hljs-number">3</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>We can’t yet amend our tags in the admin, because we haven’t registered them. So we do that next:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span>
    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}
    exclude = (<span class="hljs-string">'author'</span>,)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span>
        obj.author = request.user
        obj.save()

admin.site.register(models.Category)
admin.site.register(models.Tag)
admin.site.register(models.Post, PostAdmin)
</code></pre>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..................
----------------------------------------------------------------------
Ran <span class="hljs-number">18</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.444</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Implemented tags'</span>
</code></pre>
<p>Now, like with the categories beforehand, we want to be able to show the tags applied to a post at the base of it, and list all posts for a specific tag. So, first of all, we’ll amend our <code>PostViewTest</code> class to check for the tags:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'perl'</span>
        tag.description = <span class="hljs-string">'The Perl programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()
        post.tags.add(tag)

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post category is in the response</span>
        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post tag is in the response</span>
        post_tag = all_posts[<span class="hljs-number">0</span>].tags.all()[<span class="hljs-number">0</span>]
        self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'perl'</span>
        tag.description = <span class="hljs-string">'The Perl programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category
        post.save()
        post.tags.add(tag)
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post category is in the response</span>
        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post tag is in the response</span>
        post_tag = all_posts[<span class="hljs-number">0</span>].tags.all()[<span class="hljs-number">0</span>]
        self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>We create a tag near the top, and check for the text in the page (note that to avoid false positives from the categories, we set the name of the tags to something different). We do this on both the index and post pages.</p>
<p>We also need to put a test in place for the tag-specific page:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_tag_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.save()
        post.tags.add(tag)

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the tag URL</span>
        tag_url = post.tags.all()[<span class="hljs-number">0</span>].get_absolute_url()

        <span class="hljs-comment"># Fetch the tag</span>
        response = self.client.get(tag_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the tag name is in the response</span>
        self.assertTrue(post.tags.all()[<span class="hljs-number">0</span>].name <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Again, this is virtually identical to the category page, adjusted to allow for the fact that we need to get a specific tag. If we now run our tests, they should fail as expected:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
................FFF
======================================================================
FAIL: <span class="hljs-built_in">test</span>_index (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">540</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_index
    self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_post_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">607</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post_page
    self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_tag_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">714</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_tag_page
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">19</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.375</span>s

FAILED (failures=<span class="hljs-number">3</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>So, we need to implement the following things:</p>
<ul>
<li>Show tags on the index page</li>
<li>Show tags on the post pages</li>
<li>Create a page listing the posts with a specific tag</li>
</ul>
<p>As we have seen already with the categories, this is actually quite simple. First, we’ll sort out the tags on the index page:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>This is quite simple. We retrieve all the tags with <code>post.tags.all</code> and loop through them. We then do basically the same for the individual post pages:</p>
<pre><code class="hljs lang-html"><span class="xml">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.title</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.pub</span>_<span class="hljs-variable">date</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-expression">{{ <span class="hljs-variable">object.text</span>|<span class="hljs-variable">custom</span>_<span class="hljs-variable">markdown</span> }}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.category.get</span>_<span class="hljs-variable">absolute</span>_<span class="hljs-variable">url</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.category.name</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        {% for tag in post.tags.all %}
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">tag.get</span>_<span class="hljs-variable">absolute</span>_<span class="hljs-variable">url</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">tag.name</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        {% endfor %}

        <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"fb-comments"</span> <span class="hljs-attribute">data-href</span>=<span class="hljs-value">"http://</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">post.site</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value"></span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">post.get</span>_<span class="hljs-variable">absolute</span>_<span class="hljs-variable">url</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span> <span class="hljs-attribute">data-width</span>=<span class="hljs-value">"470"</span> <span class="hljs-attribute">data-num-posts</span>=<span class="hljs-value">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    {% endblock %}</span>
</code></pre>
<p>This should resolve two of our outstanding tests:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..................F
======================================================================
FAIL: <span class="hljs-built_in">test</span>_tag_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">714</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_tag_page
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">19</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.440</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>The final test is for the tag pages. As we saw with the categories, we can limit our querysets on specific pages. So we’ll extend the <code>ListView</code> generic view again to handle tags:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag

<span class="hljs-comment"># Create your views here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            category = Category.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)
        <span class="hljs-keyword">except</span> Category.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span>
        slug = self.kwargs[<span class="hljs-string">'slug'</span>]
        <span class="hljs-keyword">try</span>:
            tag = Tag.objects.get(slug=slug)
            <span class="hljs-keyword">return</span> tag.post_set.all()
        <span class="hljs-keyword">except</span> Tag.DoesNotExist:
            <span class="hljs-keyword">return</span> Post.objects.none()
</code></pre>
<p>Note that here, <code>Tag</code> objects have access to their assigned <code>Post</code> objects - we just use <code>post_set</code> to refer to them and get all of the posts associated with that tag. Next we’ll add the URLconfs:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag
<span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        )),

    <span class="hljs-comment"># Individual posts</span>
    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(
        model=Post,
        )),

    <span class="hljs-comment"># Categories</span>
    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Category,
        )),

    <span class="hljs-comment"># Tags</span>
    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(
        paginate_by=<span class="hljs-number">5</span>,
        model=Tag,
        )),
)
</code></pre>
<p>We import the <code>Tag</code> model and the <code>TagListView</code> view, and use them to set up the tag page.</p>
<p>If we now run our tests again, they should pass:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
...................
----------------------------------------------------------------------
Ran <span class="hljs-number">19</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.473</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Well done! Time to commit:</p>
<pre><code class="hljs lang-bash">$ git add templates/ blogengine/
$ git commit -m <span class="hljs-string">'Tags are now shown'</span>
</code></pre>
<h2 id="rss-feed">RSS Feed</h2>
<p>For the final task today, we’ll implement an RSS feed for our posts. Django ships with a handy syndication framework that makes it easy to implement this kind of functionality.</p>
<p>As usual, we’ll create some tests first. In this case, we won’t be adding any new models, so we don’t need to test them. Instead we can jump straight into creating acceptance tests for our feed. For now we’ll just create one type of feed: a feed of all the blog posts. In a later instalment we’ll add feeds for categories and tags.</p>
<p>First of all, we’ll implement our test. Now, in order to test our feed, we need to have a solution in place for parsing an RSS feed. Django won’t do this natively, so we’ll install the <code>feedparser</code> Python module. Run the following commands:</p>
<pre><code class="hljs lang-bash">$ pip install feedparser
$ pip freeze &gt; requirements.txt
</code></pre>
<p>Once that’s done, feedparser should be available. You may wish to refer to the <a href="http://pythonhosted.org/feedparser/">documentation</a> as we go to help.</p>
<p>Let’s write our test for the RSS feed. First, we import feedparser near the top of the file:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> feedparser
</code></pre>
<p>Then we define a new class for our feed tests. Put this towards the end of the file - I put it just before the flat page tests:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeedTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_all_post_feed</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the category</span>
        category = Category()
        category.name = <span class="hljs-string">'python'</span>
        category.description = <span class="hljs-string">'The Python programming language'</span>
        category.save()

        <span class="hljs-comment"># Create the tag</span>
        tag = Tag()
        tag.name = <span class="hljs-string">'python'</span>
        tag.description = <span class="hljs-string">'The Python programming language'</span>
        tag.save()

        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create a post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.category = category

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Add the tag</span>
        post.tags.add(tag)
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Fetch the feed</span>
        response = self.client.get(<span class="hljs-string">'/feeds/posts/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Parse the feed</span>
        feed = feedparser.parse(response.content)

        <span class="hljs-comment"># Check length</span>
        self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Check post retrieved is the correct one</span>
        feed_post = feed.entries[<span class="hljs-number">0</span>]
        self.assertEquals(feed_post.title, post.title)
        self.assertEquals(feed_post.description, post.text)
</code></pre>
<p>Run the tests and you’ll see something like this:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
..............F.....
======================================================================
FAIL: <span class="hljs-built_in">test</span>_all_post_feed (blogengine.tests.FeedTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">781</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_all_post_feed
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">20</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">6.743</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>We’re getting a 404 error because the post feed isn’t implemented. So let’s implement it. We’re going to use Django’s syndication framework, which will make it easy, but we need to enable it. Open up <code>django_tutorial_blog_ng/settings/py</code> and add the following under <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python">    <span class="hljs-string">'django.contrib.syndication'</span>,
</code></pre>
<p>Next, we need to enable the URLconf for this RSS feed. Open up <code>blogengine/urls.py and amend the import from</code>blogengine.views` near the top:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed
</code></pre>
<p>Further down, add in the following code to define the URL for the feed:</p>
<pre><code class="hljs lang-python">    <span class="hljs-comment"># Post RSS feed</span>
    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),
</code></pre>
<p>Note that we imported the PostsFeed class, but that hasn’t yet been defined. So we need to do that. First of all, add this line near the top:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed
</code></pre>
<p>This imports the syndication views - yes, they’re another generic view! Our <code>PostsFeed</code> class is going to inherit from <code>Feed</code>. Next, we define the class:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span>
    title = <span class="hljs-string">"RSS feed - posts"</span>
    link = <span class="hljs-string">"feeds/posts/"</span>
    description = <span class="hljs-string">"RSS feed - blog posts"</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span>
        <span class="hljs-keyword">return</span> item.title

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span>
        <span class="hljs-keyword">return</span> item.text
</code></pre>
<p>This is fairly straightforward. We define our title, link, and description for the feed inside the class definition. We define the <code>items</code> method which sets what items are returned by the RSS feed. We also define the <code>item_title</code> and <code>item_description</code> methods.</p>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
....................
----------------------------------------------------------------------
Ran <span class="hljs-number">20</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">5.933</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ django_tutorial_blog_ng/ requirements.txt
$ git commit -m <span class="hljs-string">'RSS feed implemented'</span>
</code></pre>
<p>And that’s enough for now. Don’t forget, you can get the code for this lesson by cloning the repository from <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">Github</a> and running <code>git checkout lesson-4</code> to switch to this lesson.</p>
<p>Next time we’ll:</p>
<ul>
<li>Implement a search system</li>
<li>Add feeds for categories and posts</li>
<li>Tidy up the user interface</li>
</ul>
<p>Hope to see you then!</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/</guid>
            <pubDate>Sat, 15 Feb 2014 17:45:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 3]]></title>
            <description><![CDATA[<p>Hello again! In this instalment, we’re going to do the following:</p>
<ul>
<li>Add support for flat pages</li>
<li>Add support for multiple authors</li>
<li>Add a third-party comment system</li>
</ul>
<h2 id="flat-pages">Flat pages</h2>
<p>Django ships with a number of useful apps - we’ve already used the admin interface. The flat pages app is another very handy app that comes with Django, and we’ll use it to allow the blog author to create a handful of flat pages.</p>
<p>First of all, you’ll need to install the flatpages app. Edit the <code>INSTALLED_APPS</code> setting as follows:</p>
<pre><code class="hljs lang-python">INSTALLED_APPS = (
    <span class="hljs-string">'django.contrib.admin'</span>,
    <span class="hljs-string">'django.contrib.auth'</span>,
    <span class="hljs-string">'django.contrib.contenttypes'</span>,
    <span class="hljs-string">'django.contrib.sessions'</span>,
    <span class="hljs-string">'django.contrib.messages'</span>,
    <span class="hljs-string">'django.contrib.staticfiles'</span>,
    <span class="hljs-string">'south'</span>,
    <span class="hljs-string">'blogengine'</span>,
    <span class="hljs-string">'django.contrib.sites'</span>,
    <span class="hljs-string">'django.contrib.flatpages'</span>,
)
</code></pre>
<p>Note that we needed to enable the <code>sites</code> framework as well. You’ll also need to set the <code>SITE_ID</code> setting:</p>
<pre><code class="hljs lang-python">SITE_ID = <span class="hljs-number">1</span>
</code></pre>
<p>With that done, run <code>python manage.py syncdb</code> to create the required database tables. Now, let’s use the <code>sqlall</code> command to take a look at the database structure generated for the flat pages:</p>
<pre><code class="hljs lang-sql"><span class="hljs-operator"><span class="hljs-keyword">BEGIN</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_flatpage_sites"</span> (
    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>,
    <span class="hljs-string">"flatpage_id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"site_id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">REFERENCES</span> <span class="hljs-string">"django_site"</span> (<span class="hljs-string">"id"</span>),
    <span class="hljs-keyword">UNIQUE</span> (<span class="hljs-string">"flatpage_id"</span>, <span class="hljs-string">"site_id"</span>)
)
;</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_flatpage"</span> (
    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>,
    <span class="hljs-string">"url"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"content"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"enable_comments"</span> bool <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"template_name"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">70</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"registration_required"</span> bool <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>
)
;</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_sites_872c4601"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage_sites"</span> (<span class="hljs-string">"flatpage_id"</span>);</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_sites_99732b5c"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage_sites"</span> (<span class="hljs-string">"site_id"</span>);</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_c379dc61"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage"</span> (<span class="hljs-string">"url"</span>);</span>

<span class="hljs-operator"><span class="hljs-keyword">COMMIT</span>;</span>
</code></pre>
<p>As mentioned previously, all models in Django have an <code>id</code> attribute by default. Each flat page also has a URL, title, and content. </p>
<p>Also note the separate <code>django_flatpage_sites</code> table, which maps sites to flat pages. Django can run multiple sites from the same web app, and so flat pages must be allocated to a specific site. This relationship is a many-to-many relationship, so one flat page can appear on more than one site.</p>
<p>The other fields <a href="http://127.0.0.1:8000/admin/flatpages/flatpage/add/">are hidden by default in the admin</a> and can be ignored. Let’s have a go with Django’s handy shell to explore the flatpage. Run <code>python manage.py shell</code> and you’ll be able to interact with your Django application interactively:</p>
<pre><code class="hljs lang-python">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py shell
Python 2.7.6 (default, Nov 23 2013, 13:53:45)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
&gt;&gt;&gt; from django.contrib.flatpages.models import *
&gt;&gt;&gt; FlatPage
&lt;class 'django.contrib.flatpages.models.FlatPage'&gt;
&gt;&gt;&gt; from django.contrib.sites.models import Site
&gt;&gt;&gt; Site.objects.all()
[&lt;Site: example.com&gt;]
</code></pre>
<p>As you can see, <code>flatpages</code> is a Django app similar to the <code>blogengine</code> one, with its own models, as is <code>sites</code>. You can see that the <code>FlatPage</code> class is a model. We can create an instance of it and save it interactively:</p>
<pre><code class="hljs lang-python"><span class="hljs-prompt">&gt;&gt;&gt; </span>f = FlatPage()
<span class="hljs-prompt">&gt;&gt;&gt; </span>f.url = <span class="hljs-string">'/about/'</span>
<span class="hljs-prompt">&gt;&gt;&gt; </span>f.title = <span class="hljs-string">'About me'</span>
<span class="hljs-prompt">&gt;&gt;&gt; </span>f.content = <span class="hljs-string">'All about me'</span>
<span class="hljs-prompt">&gt;&gt;&gt; </span>f.save()
<span class="hljs-prompt">&gt;&gt;&gt; </span>f.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])
<span class="hljs-prompt">&gt;&gt;&gt; </span>f.save()
</code></pre>
<p>Note that because the relationship between the site and the flat page is a many-to-many relationship, we need to save it first, then use the <code>add</code> method to add the site to the list of sites.</p>
<p>We can retrieve it:</p>
<pre><code class="hljs lang-python"><span class="hljs-prompt">&gt;&gt;&gt; </span>FlatPage.objects.all()
[&lt;FlatPage: /about/ -- About me&gt;]
<span class="hljs-prompt">&gt;&gt;&gt; </span>FlatPage.objects.all()[<span class="hljs-number">0</span>]
&lt;FlatPage: /about/ -- About me&gt;
<span class="hljs-prompt">&gt;&gt;&gt; </span>FlatPage.objects.all()[<span class="hljs-number">0</span>].title
<span class="hljs-string">u'About me'</span>
</code></pre>
<p>This command is often handy for debugging problems with your models interactively. If you now run the server and visit the admin, you should notice that the Flatpages app is now visible there, and the ‘About me’ flat page is now shown in there.</p>
<p>Let’s also take a look at the SQL required for the <code>Site</code> model. Run <code>python manage.py sqlall sites</code>:</p>
<pre><code class="hljs lang-sql"><span class="hljs-operator"><span class="hljs-keyword">BEGIN</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_site"</span> (
    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>,
    <span class="hljs-string">"domain"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"name"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>
)
;</span>

<span class="hljs-operator"><span class="hljs-keyword">COMMIT</span>;</span>
</code></pre>
<p>Again, very simple - just a domain and a name.</p>
<p>So, now that we have a good idea of how the flat page system works, we can write a test for it. We don’t need to write unit tests for the model because Django already does that, but we do need to write an acceptance test to ensure we can create flat pages and they will be where we expect them to be. Add the following to the top of the test file:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site
</code></pre>
<p>Now, before we write this test, there’s some duplication to resolve. We have two tests that subclass <code>LiveServerTestCase</code>, and both have the same method, <code>setUp</code>. We can save ourselves some hassle by creating a new class containing this method and having both these tests inherit from it. We’ll do that now because the flat page test can also be based on it. Create the following class just after <code>PostTest</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAcceptanceTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()
</code></pre>
<p>Then remove the setUp method from each of the two tests based on <code>LiveServerTestCase</code>, and change their parent class to <code>BaseAcceptanceTest</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
</code></pre>
<p>With that done, run the tests and they should pass. Commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/tests.py django_tutorial_blog_ng/settings.py
$ git commit -m <span class="hljs-string">'Added flatpages to installed apps'</span>
</code></pre>
<p>Now we can get started in earnest on our test for the flat pages:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_flat_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create flat page</span>
        page = FlatPage()
        page.url = <span class="hljs-string">'/about/'</span>
        page.title = <span class="hljs-string">'About me'</span>
        page.content = <span class="hljs-string">'All about me'</span>
        page.save()

        <span class="hljs-comment"># Add the site</span>
        page.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])
        page.save()

        <span class="hljs-comment"># Check new page saved</span>
        all_pages = FlatPage.objects.all()
        self.assertEquals(len(all_pages), <span class="hljs-number">1</span>)
        only_page = all_pages[<span class="hljs-number">0</span>]
        self.assertEquals(only_page, page)

        <span class="hljs-comment"># Check data correct</span>
        self.assertEquals(only_page.url, <span class="hljs-string">'/about/'</span>)
        self.assertEquals(only_page.title, <span class="hljs-string">'About me'</span>)
        self.assertEquals(only_page.content, <span class="hljs-string">'All about me'</span>)

        <span class="hljs-comment"># Get URL</span>
        page_url = only_page.get_absolute_url()

        <span class="hljs-comment"># Get the page</span>
        response = self.client.get(page_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check title and content in response</span>
        self.assertTrue(<span class="hljs-string">'About me'</span> <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(<span class="hljs-string">'All about me'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
......F..
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_flat_page (blogengine.tests.FlatPageViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">272</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_flat_page
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">2.760</span>s

FAILED (failures=<span class="hljs-number">1</span>)
</code></pre>
<p>We can see why it’s failed - in our flat page test, the status code is 404, indicating the page was not found. This just means we haven’t put flat page support into our URLconf. So let’s fix that:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url

<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
admin.autodiscover()

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Examples:</span>
    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span>
    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span>

    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),

    <span class="hljs-comment"># Blog URLs</span>
    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'blogengine.urls'</span>)),

    <span class="hljs-comment"># Flat pages</span>
    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'django.contrib.flatpages.urls'</span>)),
)
</code></pre>
<p>Let’s run our tests again:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
......E..
======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_flat_page (blogengine.tests.FlatPageViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">276</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_flat_page
    response = self.client.get(page_url)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py"</span>, line <span class="hljs-number">473</span>, <span class="hljs-keyword">in</span> get
    response = super(Client, self).get(path, data=data, **extra)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py"</span>, line <span class="hljs-number">280</span>, <span class="hljs-keyword">in</span> get
    <span class="hljs-built_in">return</span> self.request(**r)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py"</span>, line <span class="hljs-number">444</span>, <span class="hljs-keyword">in</span> request
    six.reraise(*exc_info)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/handlers/base.py"</span>, line <span class="hljs-number">114</span>, <span class="hljs-keyword">in</span> get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/flatpages/views.py"</span>, line <span class="hljs-number">45</span>, <span class="hljs-keyword">in</span> flatpage
    <span class="hljs-built_in">return</span> render_flatpage(request, f)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/decorators.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> _wrapped_view
    response = view_func(request, *args, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/flatpages/views.py"</span>, line <span class="hljs-number">60</span>, <span class="hljs-keyword">in</span> render_flatpage
    t = loader.get_template(DEFAULT_TEMPLATE)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/template/loader.py"</span>, line <span class="hljs-number">138</span>, <span class="hljs-keyword">in</span> get_template
    template, origin = find_template(template_name)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/template/loader.py"</span>, line <span class="hljs-number">131</span>, <span class="hljs-keyword">in</span> find_template
    raise TemplateDoesNotExist(name)
TemplateDoesNotExist: flatpages/default.html

----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.557</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Our test still fails, but we can easily see  why - the template <code>flatpages/default.html</code> doesn’t exist. So we create it:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        </span><span class="hljs-variable">{{ flatpage.content<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>This template is based on the blog post one, and just changes a handful of variable names. Note that it can still inherit from the blogengine base template, and in this case we’re using that for the sake of consistency.</p>
<p>If you run your tests, you should now see that they pass, so we’ll commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add templates/ django_tutorial_blog_ng/ blogengine/
$ git commit -m <span class="hljs-string">'Implemented flat page support'</span>
</code></pre>
<h2 id="multiple-authors">Multiple authors</h2>
<p>Next we’ll add support for multiple authors. Now, Django already has a User model, and we’ll leverage that to represent the authors. But first we’ll write our test:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, LiveServerTestCase, Client
<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post
<span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User
<span class="hljs-keyword">import</span> markdown

<span class="hljs-comment"># Create your tests here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)
        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAcceptanceTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Get login page</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log out</span>
        self.client.logout()

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_flat_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create flat page</span>
        page = FlatPage()
        page.url = <span class="hljs-string">'/about/'</span>
        page.title = <span class="hljs-string">'About me'</span>
        page.content = <span class="hljs-string">'All about me'</span>
        page.save()

        <span class="hljs-comment"># Add the site</span>
        page.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])
        page.save()

        <span class="hljs-comment"># Check new page saved</span>
        all_pages = FlatPage.objects.all()
        self.assertEquals(len(all_pages), <span class="hljs-number">1</span>)
        only_page = all_pages[<span class="hljs-number">0</span>]
        self.assertEquals(only_page, page)

        <span class="hljs-comment"># Check data correct</span>
        self.assertEquals(only_page.url, <span class="hljs-string">'/about/'</span>)
        self.assertEquals(only_page.title, <span class="hljs-string">'About me'</span>)
        self.assertEquals(only_page.content, <span class="hljs-string">'All about me'</span>)

        <span class="hljs-comment"># Get URL</span>
        page_url = str(only_page.get_absolute_url())

        <span class="hljs-comment"># Get the page</span>
        response = self.client.get(page_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check title and content in response</span>
        self.assertTrue(<span class="hljs-string">'About me'</span> <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(<span class="hljs-string">'All about me'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Here we create a <code>User</code> object to represent the author. Note the <code>create_user</code> convenience method for creating new users quickly and easily.</p>
<p>We’re going to exclude the author field from the admin - instead it’s going to be automatically populated based on the session data, so that when a user creates a post they are automatically set as the author. We therefore don’t need to make any changes for the acceptance tests for posts - our changes to the unit tests for the <code>Post</code> model are sufficient.</p>
<p>Run the tests, and they should fail:</p>
<pre><code class="hljs lang-python">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test
Creating test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...
E........
======================================================================
ERROR: test_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">45</span>, <span class="hljs-keyword">in</span> test_create_post
    self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)
AttributeError: <span class="hljs-string">'Post'</span> object has no attribute <span class="hljs-string">'author'</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.620</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...
</code></pre>
<p>Let’s add the missing <code>author</code> attribute:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>Next, create the migrations:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --auto blogengine
</code></pre>
<p>You’ll be prompted to either quit or provide a default author ID - select option 2 to provide the ID, then enter 1, which should be your own user account ID. Then run the migrations:</p>
<pre><code class="hljs lang-bash">$ python manage.py migrate
</code></pre>
<p>Let’s run our tests again:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.F.F.....
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">118</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">154</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.390</span>s

FAILED (failures=<span class="hljs-number">2</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Our test still fails because the author field isn’t set automatically. So we’ll amend the admin to automatically set the author when the <code>Post</code> object is saved:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span>
    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}
    exclude = (<span class="hljs-string">'author'</span>,)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span>
        obj.author = request.user
        obj.save()

admin.site.register(models.Post, PostAdmin)
</code></pre>
<p>This tells the admin to exclude the <code>author</code> field from any form for a post, and when the model is saved, to set the author to the user making the HTTP request. Now run the tests, and they should pass:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.........
----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">4.086</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Time to commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Added author field'</span>
</code></pre>
<h2 id="comments">Comments</h2>
<p>The <a href="http://matthewdaly.co.uk/blog/2012/03/29/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-4/">previous version of this tutorial</a> implemented comments using Django’s own comment system. However, this has since been deprecated from Django and turned into <a href="https://github.com/django/django-contrib-comments">a separate project</a>. So we have two options for how to implement comments:</p>
<ul>
<li>We can use <a href="http://django-contrib-comments.readthedocs.org/en/latest/">the comments system</a></li>
<li>We can use a third-party comments system</li>
</ul>
<p>Now, if you want to use the Django comment system, you can do so, and it shouldn’t be too hard to puzzle out how to implement it using the documentation and my prior post. However, in my humble opinion, using a third-party comment system is the way to go for blog comments - they make it extremely easy for people to log in with multiple services without you having to write lots of additional code. They also make it significantly easier to moderate comments, and they’re generally pretty good at handling comment spam.</p>
<p>Some of the available providers include:</p>
<ul>
<li><a href="http://disqus.com/">Disqus</a></li>
<li><a href="http://intensedebate.com/">IntenseDebate</a></li>
<li><a href="https://developers.facebook.com/docs/plugins/comments/">Facebook</a></li>
</ul>
<p>For demonstration purposes, we’ll use Facebook comments, but this shouldn’t require much work to adapt it to the other providers.</p>
<p>First of all, we need to include the Facebook JavaScript SDK:</p>
<pre><code class="hljs lang-html">        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d, s, id)</span> </span>{
            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;
                js = d.createElement(s); js.id = id;
                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;
                fjs.parentNode.insertBefore(js, fjs);
            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-inner"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-navbar"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">".nav-collapse"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav-collapse collapse"</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Now, the Facebook comment system requires that you pass through the absolute page URL when initialising the comments. At present we can’t do that without hard-coding the domain name in our template, which we want to avoid. So, we need to add a site field to each post to identify the site it’s associated with.</p>
<p>As usual, we update our tests first:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, LiveServerTestCase, Client
<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post
<span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User
<span class="hljs-keyword">import</span> markdown

<span class="hljs-comment"># Create your tests here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)
        self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)
        self.assertEquals(only_post.site.domain, <span class="hljs-string">'example.com'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)
        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAcceptanceTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Get login page</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log out</span>
        self.client.logout()

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,
            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.site = site
        post.author = author
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the author</span>
        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)
        author.save()

        <span class="hljs-comment"># Create the site</span>
        site = Site()
        site.name = <span class="hljs-string">'example.com'</span>
        site.domain = <span class="hljs-string">'example.com'</span>
        site.save()

        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.author = author
        post.site = site
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_flat_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create flat page</span>
        page = FlatPage()
        page.url = <span class="hljs-string">'/about/'</span>
        page.title = <span class="hljs-string">'About me'</span>
        page.content = <span class="hljs-string">'All about me'</span>
        page.save()

        <span class="hljs-comment"># Add the site</span>
        page.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])
        page.save()

        <span class="hljs-comment"># Check new page saved</span>
        all_pages = FlatPage.objects.all()
        self.assertEquals(len(all_pages), <span class="hljs-number">1</span>)
        only_page = all_pages[<span class="hljs-number">0</span>]
        self.assertEquals(only_page, page)

        <span class="hljs-comment"># Check data correct</span>
        self.assertEquals(only_page.url, <span class="hljs-string">'/about/'</span>)
        self.assertEquals(only_page.title, <span class="hljs-string">'About me'</span>)
        self.assertEquals(only_page.content, <span class="hljs-string">'All about me'</span>)

        <span class="hljs-comment"># Get URL</span>
        page_url = str(only_page.get_absolute_url())

        <span class="hljs-comment"># Get the page</span>
        response = self.client.get(page_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check title and content in response</span>
        self.assertTrue(<span class="hljs-string">'About me'</span> <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(<span class="hljs-string">'All about me'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>All we’ve done here is to add the <code>site</code> attribute when creating a new post using the Django database API, and when we create one via the admin, we add an additional <code>site</code> aparameter to the HTTP POST request with a value of 1. Run the tests and they should fail:</p>
<pre><code class="hljs lang-bash">Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
E........
======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">46</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)
AttributeError: <span class="hljs-string">'Post'</span> object has no attribute <span class="hljs-string">'site'</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">4.313</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>So we need to add the <code>site</code> attribute to the <code>Post</code> model. Let’s do that:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User
<span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)
    author = models.ForeignKey(User)
    site = models.ForeignKey(Site)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>Now create and run the migrations - you’ll be prompted to create a default value for the site attribute as well:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py schemamigration --auto blogengine
 ? The field <span class="hljs-string">'Post.site'</span> does not have a default specified, yet is NOT NULL.
 ? Since you are adding this field, you MUST specify a default
 ? value to use <span class="hljs-keyword">for</span> existing rows. Would you like to:
 ?  <span class="hljs-number">1</span>. Quit now, and add a default to the field <span class="hljs-keyword">in</span> models.py
 ?  <span class="hljs-number">2</span>. Specify a one-off value to use <span class="hljs-keyword">for</span> existing columns now
 ? Please select a choice: <span class="hljs-number">2</span>
 ? Please enter Python code <span class="hljs-keyword">for</span> your one-off default value.
 ? The datetime module is available, so you can <span class="hljs-keyword">do</span> e.g. datetime.date.today()
 &gt;&gt;&gt; <span class="hljs-number">1</span>
 + Added field site on blogengine.Post
Created <span class="hljs-number">0005</span>_auto__add_field_post_site.py. You can now apply this migration with: ./manage.py migrate blogengine
(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py migrate
Running migrations <span class="hljs-keyword">for</span> blogengine:
 - Migrating forwards to <span class="hljs-number">0005</span>_auto__add_field_post_site.
 &gt; blogengine:<span class="hljs-number">0005</span>_auto__add_field_post_site
 - Loading initial data <span class="hljs-keyword">for</span> blogengine.
Installed <span class="hljs-number">0</span> object(s) from <span class="hljs-number">0</span> fixture(s)
</code></pre>
<p>Our tests should then pass:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.........
----------------------------------------------------------------------
Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">4.261</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Now we can include our full page URL on the post detail page:</p>
<pre><code class="hljs lang-html"><span class="xml">{% extends "blogengine/includes/base.html" %}

    {% load custom_markdown %}

    {% block content %}
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.title</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-expression">{{ <span class="hljs-variable">object.pub</span>_<span class="hljs-variable">date</span> }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-expression">{{ <span class="hljs-variable">object.text</span>|<span class="hljs-variable">custom</span>_<span class="hljs-variable">markdown</span> }}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"fb-comments"</span> <span class="hljs-attribute">data-href</span>=<span class="hljs-value">"http://</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">post.site</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value"></span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">post.get</span>_<span class="hljs-variable">absolute</span>_<span class="hljs-variable">url</span> }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span> <span class="hljs-attribute">data-width</span>=<span class="hljs-value">"470"</span> <span class="hljs-attribute">data-num-posts</span>=<span class="hljs-value">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    {% endblock %}</span>
</code></pre>
<p>If you want to customise the comments, take a look at <a href="https://developers.facebook.com/docs/plugins/comments/">the documentation for Facebook Comments</a>.</p>
<p>With that done, we can commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ templates/
$ git commit -m <span class="hljs-string">'Implemented Facebook comments'</span>
</code></pre>
<p>And that wraps up this lesson. As usual, you can easily switch to today’s lesson with <code>git checkout lesson-3</code>. Next time we’ll implement categories and tags, and create an RSS feed for our blog posts.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/</guid>
            <pubDate>Fri, 03 Jan 2014 12:57:30 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 2]]></title>
            <description><![CDATA[<p>Welcome back! In this lesson, we’ll use Twitter Bootstrap to make our blog look nicer, and we’ll implement individual pages for each post.</p>
<p>Now, before we get started, don’t forget to switch into your virtualenv. From within the directory for the project, run the following command:</p>
<pre><code class="hljs lang-bash">$ <span class="hljs-built_in">source</span> venv/bin/activate
</code></pre>
<p>If you haven’t used Bootstrap before, you’re in for a treat. With Bootstrap, it’s easy to make a good-looking website quickly that’s responsive and mobile-friendly. We’ll also use HTML5 Boilerplate to get a basic HTML template in place.</p>
<p>Now, to install these easily, we’ll use Bower, which requires <a href="http://nodejs.org/">Node.js</a>. Install Node.js first. On most Linux distros, you’ll also need to set <code>NODE_PATH</code>, which can be done by pasting the following into your <code>.bashrc</code>:</p>
<pre><code class="hljs lang-bash">NODE_PATH=<span class="hljs-string">"/usr/local/lib/node_modules"</span>
</code></pre>
<p>With that done, run the following command to install Bower:</p>
<pre><code class="hljs lang-bash">$ sudo npm install -g bower
</code></pre>
<p>Next we need to create a Bower config. First, create the folder <code>blogengine/static</code>. Then create a new file called <code>.bowerrc</code> and paste in the following content:</p>
<pre><code class="hljs lang-json">{
    "<span class="hljs-attribute">directory</span>": <span class="hljs-value"><span class="hljs-string">"blogengine/static/bower_components"</span>
</span>}
</code></pre>
<p>This tells Bower where it should put downloaded libraries. Next, run the following command to gener Bower:</p>
<pre><code class="hljs lang-bash">$ bower init
</code></pre>
<p>Answer all the questions it asks you - for those with defaults, these should be fine, and everything else should be easy enough. Next, run the following command to install Bootstrap and HTML5 Boilerplate:</p>
<pre><code class="hljs lang-bash">$ bower install bootstrap html5-boilerplate --save
</code></pre>
<p>Note that as jQuery is a dependency of Bootstrap, it will also be installed automatically. Now, we need to keep our Bower-installed files out of version control - the <code>bower.json</code> file keeps track of them for us. So add the following to your .gitignore file:</p>
<pre><code class="hljs lang-bash">blogengine/static/bower_components/
</code></pre>
<p>All done? Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add .gitignore .bowerrc bower.json
$ git commit -m <span class="hljs-string">'Added Bower config'</span>
</code></pre>
<p>Now, let’s make our template nicer. Django’s templating system is very powerful and lets one template inherit from another. We’re going to create a base template, using HTML5 Boilerplate as a starting point, that all of our web-facing pages will use. First, create a directory to hold the base template:</p>
<pre><code class="hljs lang-bash">$ mkdir templates/blogengine/includes
</code></pre>
<p>Then copy the <code>index.html</code> file from HTML5 Boilerplate to this directory as <code>base.html</code>:</p>
<pre><code class="hljs lang-bash">$ cp blogengine/static/bower_components/html5-boilerplate/index.html templates/blogengine/includes/base.html
</code></pre>
<p>Now amend this file to look like this:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
<span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"X-UA-Compatible"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"IE=edge"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">""</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1"</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span>

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> staticfiles %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;
            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;</span>

        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="javascript"><span class="hljs-string">"&gt;&lt;\/script&gt;')</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"</span></span></span><span class="hljs-template_tag">{% <span class="hljs-keyword">static</span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>

        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
            (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b,o,i,l,e,r)</span></span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;
            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];
            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;
            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));
            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);
        </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<p>Note the following:</p>
<ul>
<li>We need to use <code>{% load staticfiles %}</code> to be able to load any static files.</li>
<li>We use the <code>{% static %}</code> template tag to load static files such as CSS and HTML</li>
<li>We define blocks called <code>title</code> and <code>content</code>. Any template that extends this one can override whatever is inside this template.</li>
</ul>
<p>Please note that HTML5 Boilerplate may conceivable change in future, so bear in mind that all you really need to do is load the staticfiles app, use the <code>static</code> tag for any static files that need to be loaded, and define the blocks in the appropriate places.</p>
<p>Next, let’s amend our existing template to inherit from this one:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text }}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Now fire up the server with <code>python manage.py runserver</code> and check everything is working OK. You should see that your new base template is now in use and the CSS and JS files are being loaded correctly. Let’s commit again:</p>
<pre><code class="hljs lang-bash">$ git add templates/
$ git commit -m <span class="hljs-string">'Now use Bootstrap and HTML5 Boilerplate for templates'</span>
</code></pre>
<p>Now, let’s use Bootstrap to style our blog a little. First we’ll add a navigation bar at the top of our blog. Edit the base template as follows:</p>
<pre><code class="hljs lang-html"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar navbar-static-top navbar-inverse"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"navbar-inner"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-navbar"</span> <span class="hljs-attribute">data-toggle</span>=<span class="hljs-value">"collapse"</span> <span class="hljs-attribute">data-target</span>=<span class="hljs-value">".nav-collapse"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"brand"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"nav-collapse collapse"</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> header %}</span><span class="xml">
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"page-header"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">

            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml">
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container footer"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"span12"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template_tag">{% <span class="hljs-keyword">now</span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span>
</code></pre>
<p>Note the footer copyright section. Here we output the current year using <code>now</code>. Also note the addition of the header block. This will let us override the page header if necessary.</p>
<p>We’ll also wrap the posts in a div:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add templates/
$ git commit -m <span class="hljs-string">'Amended templates'</span>
</code></pre>
<h2 id="formatting-our-content">Formatting our content</h2>
<p>As it stands right now, we can’t do much to format our posts. It is possible to include HTML in our posts with Django, but by default it will strip it out. Also, we don’t want users to have to write HTML manually - we want to make our blog user friendly!</p>
<p>There are two possible approaches. One is to embed a rich text editor like TinyMCE in the admin and use that for editing the files, but I’ve found things like that to be cumbersome. The alternative is to use some other form of lightweight markup, and that’s the approach we’ll take here. We’re going to use Markdown for editing our posts.</p>
<p>Django has actually dropped support for Markdown, but it’s not hard to implement your own version. First, install Markdown and add it to your <code>requirements.txt</code>:</p>
<pre><code class="hljs lang-bash">$ pip install markdown
$ pip freeze &gt; requirements.txt
</code></pre>
<p>Now, we shouldn’t write any production code before writing a test, so let’s amend our existing post test to check to see that Markdown is working as expected:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>You’ll also need to add the following at the top:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> markdown
</code></pre>
<p>What we do here is we convert our post text to include a link using Markdown. We also need to render that post in markdown within the test so that what we have in the test matches what will be produced - otherwise our test will be broken. We also check that the link is marked up correctly.</p>
<p>Save the file and run the tests - they should fail. Now, create the following directory and file:</p>
<pre><code class="hljs lang-bash">$ mkdir blogengine/templatetags
$ touch blogengine/templatetags/__init__.py
</code></pre>
<p>Note that the <code>__init__.py</code> file is meant to be blank.</p>
<p>Then create the following file and edit it to look like this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> markdown

<span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template
<span class="hljs-keyword">from</span> django.template.defaultfilters <span class="hljs-keyword">import</span> stringfilter
<span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode
<span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe

register = template.Library()

<span class="hljs-decorator">@register.filter(is_safe=True)</span>
<span class="hljs-decorator">@stringfilter</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">custom_markdown</span><span class="hljs-params">(value)</span>:</span>
    extensions = [<span class="hljs-string">"nl2br"</span>, ]

    <span class="hljs-keyword">return</span> mark_safe(markdown.markdown(force_unicode(value),
                                       extensions,
                                       safe_mode=<span class="hljs-keyword">True</span>,
                                       enable_attributes=<span class="hljs-keyword">False</span>))
</code></pre>
<p>Then just amend the post list template to use it:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>It’s that easy to use a custom markup system with your blog!</p>
<p>Let’s commit the changes:</p>
<pre><code class="hljs lang-bash">$ git add requirements.txt templates/ blogengine/
$ git commit -m <span class="hljs-string">'Added Markdown support'</span>
</code></pre>
<h2 id="pagination">Pagination</h2>
<p>As at right now, all of our posts are displayed on the index page. We want to fix that by implementing pagination. Fortunately, that’s very easy for us because we’re using Django’s generic views. Go into <code>blogengine/urls.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        )),
)
</code></pre>
<p>That will automatically paginate our posts by 5 - feel free to change the value of <code>paginate_by</code> if you wish. However, we need to place the links in our template as well:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>Try adding a few more blog posts, and you’ll see the pagination links. But give them a try, and they won’t work. Why not? Well, as it turns out there was a bug in the project-wide <code>urls.py</code> file (my bad!). Let’s fix that:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url

<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
admin.autodiscover()

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Examples:</span>
    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span>
    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span>

    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),

    <span class="hljs-comment"># Blog URLs</span>
    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'blogengine.urls'</span>)),
)
</code></pre>
<p>If you try again, you’ll see that the <code>blogengine</code> app now happily deals with the paginated posts. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ django_tutorial_blog_ng/ templates/
$ git commit -m <span class="hljs-string">'Implemented pagination'</span>
</code></pre>
<h2 id="viewing-individual-posts">Viewing individual posts</h2>
<p>As our last task for today, we’ll implement individual pages for each post. We want each post to have a nice, friendly URL that is as human-readable as possible, and also includes the date the post was created.</p>
<p>First of all, we’ll implement our test for it, however:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Add this method to the <code>PostViewTest</code> class, after <code>test_index</code>. It’s very similar to <code>test_index</code>, since it’s testing much the same content. However, not that we fetch the post-specific URL using the method <code>get_absolute_url</code>, and we then fetch that page.</p>
<p>Now, if you run the test, it will fail because <code>get_absolute_url</code> isn’t implemented. It’s often a good idea to have a <code>get_absolute_url</code> method for your models, which defines a single URL scheme for that type of object. So let’s create one. However, to implement our URL scheme we need to make some changes. Right now we have the date, but we don’t have a text string we can use, known in Django as a <em>slug</em>. So we’ll add a slug field, which will be prepopulated based on the post title. Edit your model as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.title

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>
        ordering = [<span class="hljs-string">"-pub_date"</span>]
</code></pre>
<p>Here we’ve added a slug field to the model, as well as implementing our <code>get_absolute_url</code> method. Note we’ve limited the date to year and month, but you can include days if you wish.</p>
<p>While we’re in here, we’ve also implemented the <code>__unicode__</code> method. Essentially, this sets how Django describes the object in the admin - in this case, the post title is a logical way of describing that <code>Post</code> object, so it returns the post title.</p>
<p>We’ve also added the class Meta, with the ordering field. This tells Django that by default any list of posts should return them ordered by <code>pub_date</code> in reverse - in other words, latest first.</p>
<p>To have the slug filled in automatically, we need to customise the admin interface a little as well:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span>
    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}

admin.site.register(models.Post, PostAdmin)
</code></pre>
<p>Now, I recommend at this stage going into the admin and deleting all of your posts, because otherwise you’ll have problems in migrating them. The issue is that each slug is compulsory and must be unique, and it’s not practical to use South to automatically generate new slugs from the title on the fly, so by deleting them at this stage you’ll avoid problems. Once that’s done, run this command:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --auto blogengine
</code></pre>
<p>You’ll be prompted to specify a one-off default value - enter any string you like, such as “blah”. Then run the migration:</p>
<pre><code class="hljs lang-bash">$ python manage.py migrate
</code></pre>
<p>Let’s run our tests now:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.F.F...F
======================================================================
FAIL: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">103</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_edit_post (blogengine.tests.AdminTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">132</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_edit_post
    self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

======================================================================
FAIL: <span class="hljs-built_in">test</span>_post_page (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">222</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_post_page
    self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
AssertionError: <span class="hljs-number">404</span> != <span class="hljs-number">200</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">8</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">2.180</span>s

FAILED (failures=<span class="hljs-number">3</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Whoops! Our tests are broken, because the slug field isn’t being filled in. If you take a look at the page for adding a post, you’ll notice that the slug is filled in using JavaScript, so our test fails because the test client doesn’t interpret JavaScript. So in the tests we have to fill in the slug field manually.</p>
<p>Also, for the unit tests, the slug attribute isn’t being created at all, so it can’t be saved. Let’s remedy that. First, edit the <code>test_create_post</code> method of <code>PostTest</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
</code></pre>
<p>Next, let’s amend <code>AdminTest</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Get login page</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log out</span>
        self.client.logout()

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,
            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)
</code></pre>
<p>And <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span>
        post.slug = <span class="hljs-string">'my-first-post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Get the post URL</span>
        post_url = only_post.get_absolute_url()

        <span class="hljs-comment"># Fetch the post</span>
        response = self.client.get(post_url)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the link is marked up properly</span>
        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>What we’re doing here is that every time we create a Post object programmatically, we add the <code>post.slug</code> atttribute to it. Also, when submitting a post via the admin, we pass the <code>slug</code> parameter via HTTP POST, thus emulating how a form would submit this data.</p>
<p>If you run the tests again, you’ll see that <code>test_post_page</code> still fails. This is because we haven’t yet up the URLs, templates and views to do so. Let’s fix that. We’ll use another generic view, called a DetailView, to display the posts. Amend <code>blogengine/urls.py</code> as follows:</p>
<pre><code class="hljs lang-python">rom django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(
        model=Post,
        paginate_by=<span class="hljs-number">5</span>,
        )),

    <span class="hljs-comment"># Individual posts</span>
    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(
        model=Post,
        )),
)
</code></pre>
<p>Running our tests again will still fail, but now because the template <code>post_detail.html</code> has not been found. So let’s create it:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ object.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

</span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>If you run your tests again, they should now pass. However, we still need to provide a hyperlink from each post in the index to the post page, so let’s do that:</p>
<pre><code class="hljs lang-html"><span class="xml"></span><span class="hljs-template_tag">{% <span class="hljs-keyword">extends</span> "blogengine/includes/base.html" %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">load</span> custom_markdown %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">block</span> content %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"post"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text<span class="hljs-filter">|custom</span>_markdown }}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">

        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_previous %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">if</span> page_obj.has_next %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/</span></span></span><span class="hljs-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endif</span> %}</span><span class="xml">

    </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endblock</span> %}</span><span class="xml"></span>
</code></pre>
<p>And that’s all for today! We now have individual post pages, we’ve styled our blog a bit, and we’ve implemented Markdown support. All that remains is to commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/ templates/
$ git commit -m <span class="hljs-string">'Implemented post pages'</span>
</code></pre>
<p>As before, I’ve tagged the final commit with ‘lesson-2’, so if you’re following along, you can switch to this point with <code>git checkout lesson-2</code>.</p>
<p>Next time we’ll add support for flat pages and multiple authors, as well as adding support for comments via a third-party commenting system.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2014/01/02/django-blog-tutorial-the-next-generation-part-2/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2014/01/02/django-blog-tutorial-the-next-generation-part-2/</guid>
            <pubDate>Thu, 02 Jan 2014 11:28:48 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 1]]></title>
            <description><![CDATA[<p>My series of Django tutorials for building a blogging engine are by far the most popular posts I’ve ever written on here. I’ve had a lot of people contact me with questions or just to express their thanks, for which I’m very grateful!</p>
<p>However, these tutorials haven’t really aged well. I’ve since had the opportunity to use Django in a professional capacity, which has significantly improved my understanding of the framework and the whole Python ecosystem, and there’s a lot of best practices that I didn’t follow and now wish I had. There’s also been a few gotchas that have hindered a few people in the past that I’d like to have the opportunity to correct.</p>
<p>So, I’m therefore creating a brand new series of tutorials to remedy this situation. This series will cover exactly the same basic idea of using Django to build a blogging engine, but will expand on what the original series did in many ways. We will cover such additional topics as:</p>
<ul>
<li>Using Twitter Bootstrap to make your blog look good without too much hassle</li>
<li>Using Virtualenv to sandbox your blog application</li>
<li>Using South to effectively manage changes to your database structure</li>
<li>Writing some simple unit tests</li>
<li>Deploying the finished application to Heroku</li>
</ul>
<p>Ready? Let’s get started!</p>
<h2 id="getting-everything-set-up">Getting everything set up</h2>
<p>Now, first of all, I’m going to assume you’re using some variant of Unix, such as Linux or Mac OS X. I’m not saying you can’t follow this tutorial with Windows, but you’ll have a harder time, because Windows just isn’t as developer-friendly as Unix in general. A modern Linux distro like Ubuntu is generally pretty easy to use, and you can easily run it in Virtualbox, so if you use Windows I would recommend you use that to make things easier.</p>
<p>You should also have at least a basic grasp of the command line, such as how to create and navigate directories. You don’t have to be a wizard with it, though.</p>
<p>You also need a proper programmer’s text editor. I use Vim, but I freely admit that Vim has a very steep learning curve and you may have trouble picking it up at the same time as following this tutorial. Emacs is also a very powerful text editor, and if you like it, feel free to use it. If you haven’t yet found a programmer’s text editor you like, I suggest you check out <a href="http://www.sublimetext.com/">Sublime Text</a>, which is easy to get started with, but also very powerful, and can be used without purchasing a license. Don’t worry too much about your text editor - it’s not vitally import that you use what I use, just find one that works for you. That said, I will say one thing - DON’T use an IDE. IDE’s hide too many details from new users and make it harder to figure out what’s going on.</p>
<p>You will also need to ensure you have the following installed:</p>
<ul>
<li>Python. I recommend installing Python 2.7, because you may have issues with Python 2.6, and Python 3 isn’t universally supported yet so you might have some issues with that</li>
<li>Virtualenv</li>
<li>Pip</li>
<li>Git</li>
</ul>
<p>On most Linux distros, you can find packages for all of these items easily enough using your package manager. On Mac OS X, I recommend using Homebrew to install them, though if you have another package manager installed you can use that too. If you have issues with installing any of these, a quick Google search should be sufficient to resolve the issue.</p>
<h2 id="beginning-work">Beginning work</h2>
<p>With all that done, we’re ready to get started. Create a folder in a suitable place on your file system and switch into it. I generally keep a dedicated folder in my home directory called <code>Projects</code> to use for all of my projects, and give each project a folder within it - in this case the project is called <code>django_tutorial_blog_ng</code>.</p>
<p>Now, we’ll use Git to keep track of our source code. If you prefer Mercurial, feel free to use that, but this tutorial will assume use of Git, so you’ll want to adapt the commands used accordingly. Start tracking your project with the following command from the shell, when you’re in the project directory:</p>
<pre><code class="hljs lang-bash">$ git init
</code></pre>
<p>If you haven’t used Git before, you’ll also want to <a href="http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup">configure it</a>.</p>
<p>Next, we set up our virtualenv. Run the following command:</p>
<pre><code class="hljs lang-bash">$ virtualenv venv --distribute
</code></pre>
<p>Followed by:</p>
<pre><code class="hljs lang-bash">$ <span class="hljs-built_in">source</span> venv/bin/activate
</code></pre>
<p>Every time you come back to work on this project, you’ll need to run the previous command to make sure you’re running the version of Python installed under venv/ rather than your system Python. You can tell it’s using this because your shell prompt will be prefixed with <code>(venv)</code>.</p>
<p>Why do this? Well, it means you can install whatever version of a Python module you like, without having root access, and means the Python install you’re using will only have those modules you explicitly install, rather than all of those ones available with your operating system. For instance, you could have multiple projects using different versions of Django, rather than having to update a global installation of Django and potentially break existing applications.</p>
<p>Now that our virtualenv is set up, we’ll install Django, as well as several other useful Python modules. Run the following command:</p>
<pre><code class="hljs lang-bash">$ pip install django-toolbelt South
</code></pre>
<p>A little explanation is called for here. The package <code>django-toolbelt</code> includes a number of packages we’ll be using, including Django, as well as Gunicorn (a simple web server we’ll use when the time comes to deploy the app to Heroku). South is a migration tool that is commonly used with Django - basically, if you make changes to existing models, Django doesn’t natively have the capacity to apply those changes (yet - native migrations are planned at some point in the future), so South can be used to apply those changes for you without having to either manually change the database structure or dump the database and rebuild it.</p>
<p>Please note that one of the packages, <code>psycopg2</code>, may fail if you don’t have PostgreSQL installed, but don’t worry about installing it. We’ll be using SQLite for developing the application locally, and we’ll be deploying the finished product to Heroku, which does have it installed.</p>
<p>Once the installation is complete, run the following command to record the new modules installed:</p>
<pre><code class="hljs lang-bash">$ pip freeze &gt; requirements.txt
</code></pre>
<p>The file <code>requirements.txt</code> will be created, which stores the packages and versions you have installed so that they can be easily recreated. If you had issues installing <code>psycopg2</code>, then here’s what your <code>requirements.txt</code> should look like - feel free to edit it manually to look like this, as when we deploy it to Heroku, it will need to be correct to ensure that our application can be deployed successfully:</p>
<pre><code class="hljs lang-bash">Django==<span class="hljs-number">1.6</span>.<span class="hljs-number">1</span>
South==<span class="hljs-number">0.8</span>.<span class="hljs-number">4</span>
dj-database-url==<span class="hljs-number">0.2</span>.<span class="hljs-number">2</span>
dj-static==<span class="hljs-number">0.0</span>.<span class="hljs-number">5</span>
django-toolbelt==<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>
gunicorn==<span class="hljs-number">18.0</span>
psycopg2==<span class="hljs-number">2.5</span>.<span class="hljs-number">1</span>
static==<span class="hljs-number">0.4</span>
wsgiref==<span class="hljs-number">0.1</span>.<span class="hljs-number">2</span>
</code></pre>
<p>Next, we’ll commit these changes with Git:</p>
<pre><code class="hljs lang-bash">$ git add requirements.txt
$ git commit -m <span class="hljs-string">'Committed requirements'</span>
</code></pre>
<p>Next we’ll add a <code>.gitignore</code> file to ignore our virtualenv - we want to keep this out of version control because it’s something specific to that install. We have all we need to recreate it so we don’t want to store it. In addition, we also want to ignore any compiled Python files (identifiable by the .pyc suffix):</p>
<pre><code class="hljs lang-bash">venv/
*.pyc
</code></pre>
<p>Let’s commit that too:</p>
<pre><code class="hljs lang-bash">$ git add .gitignore
$ git commit -m <span class="hljs-string">'Added a gitignore file'</span>
</code></pre>
<p>Now, let’s generate our project’s basic skeleton:</p>
<pre><code class="hljs lang-bash">$ django-admin.py startproject django_tutorial_blog_ng .
</code></pre>
<p>This application skeleton includes a basic configuration which will be sufficient for now, but you will also want to add the SQLite database file to your <code>.gitignore</code>:</p>
<pre><code class="hljs lang-bash">env/
*.pyc
db.sqlite3
</code></pre>
<p>Let’s commit what we’ve done:</p>
<pre><code class="hljs lang-bash">$ git add .gitignore django_tutorial_blog_ng/ manage.py
$ git commit -m <span class="hljs-string">'Created project skeleton'</span>
</code></pre>
<p>Now, before we create our database, we need to ensure we are using South. Go into <code>django_tutorial_blog_ng/settings.py</code> and find <code>INSTALLED_APPS</code>. Edit it to look like this:</p>
<pre><code class="hljs lang-python">INSTALLED_APPS = (
    <span class="hljs-string">'django.contrib.admin'</span>,
    <span class="hljs-string">'django.contrib.auth'</span>,
    <span class="hljs-string">'django.contrib.contenttypes'</span>,
    <span class="hljs-string">'django.contrib.sessions'</span>,
    <span class="hljs-string">'django.contrib.messages'</span>,
    <span class="hljs-string">'django.contrib.staticfiles'</span>,
    <span class="hljs-string">'south'</span>,
)
</code></pre>
<p>Now, you can create your database. Run the following command:</p>
<pre><code class="hljs lang-bash">$ python manage.py syncdb
</code></pre>
<p>You’ll be prompted to create a superuser - go ahead and fill in the details. Now, run the following command:</p>
<pre><code class="hljs lang-bash">$ python manage.py runserver
</code></pre>
<p>This will run Django’s built-in web server on port 8000, and if you click <a href="http://127.0.0.1:8000">here</a>, you should see a page congratulating you on your first Django-powered page. Once you’re finished with it, you can stop the web server with Ctrl-C.</p>
<p>Don’t forget to commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/settings.py
$ git commit -m <span class="hljs-string">'Added South to installed apps'</span>
</code></pre>
<h2 id="your-first-app">Your first app</h2>
<p>Django distinguishes between the concepts of <strong>projects</strong> and <strong>apps</strong>. A project is a specific project that may consist of one or more apps, such as a web app, whereas an app is a set of functionality within a project. For instance, one website might include some flat pages, an admin interface, and a blogging engine, and these could easily be different apps. By encouraging you to separate different types of functionality into different apps, Django makes it easier for you to reuse existing content elsewhere.</p>
<p>We’re going to create our first app, which is the blogging engine. Run the following command to create a basic skeleton for this app:</p>
<pre><code class="hljs lang-bash">$ python manage.py startapp blogengine
</code></pre>
<p>Next, we need to amend our settings to install this app:</p>
<pre><code class="hljs lang-python">INSTALLED_APPS = (
    <span class="hljs-string">'django.contrib.admin'</span>,
    <span class="hljs-string">'django.contrib.auth'</span>,
    <span class="hljs-string">'django.contrib.contenttypes'</span>,
    <span class="hljs-string">'django.contrib.sessions'</span>,
    <span class="hljs-string">'django.contrib.messages'</span>,
    <span class="hljs-string">'django.contrib.staticfiles'</span>,
    <span class="hljs-string">'south'</span>,
    <span class="hljs-string">'blogengine'</span>,
)
</code></pre>
<p>Now, before we can use this app, we want to let South know about it so that changes to your database structure will be managed right from the start by South. Run the following command to create your initial migration:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --initial blogengine
</code></pre>
<p>That creates the file for your first migration,but doesn’t run it. To migrate your database structure to the latest version, run the following:</p>
<pre><code class="hljs lang-bash">$ python manage.py migrate
</code></pre>
<p>This won’t actually make any changes, but it will ensure that all future changes to your models for the <code>blogengine</code> app are handled by South. Let’s commit our app skeleton:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/settings.py blogengine/
$ git commit -m <span class="hljs-string">'Added blogengine app skeleton'</span>
</code></pre>
<p>So, we now have our first app set up, but it doesn’t do anything much.</p>
<p>Remember that I mentioned how Django differentiates between projects and apps? Well, Django actually ships with a number of useful apps, and one of those is the admin interface. I consider the Django admin to be one of the framework’s killer features because it’s easy to use and customise, and saves you a lot of grief.</p>
<p>In the past, the admin interface needed a little work to get it working, but in Django 1.6 it’s configured to work out of the box, so if you click <a href="http://127.0.0.1:8000/admin/">here</a>, you should see the login screen for it. You should be able to sign in using the username and password you set when you ran <code>syncdb</code>.</p>
<p>Next, we’ll set up our first model.</p>
<h2 id="an-introduction-to-mvc">An introduction to MVC</h2>
<p>MVC is a common pattern used in web development. Many web development frameworks can be loosely described as MVC, including Django, Rails, CodeIgniter, Laravel and Symfony, as well as some client-side frameworks like Backbone.js. The basic concept is that a web app is divided into three basic components:</p>
<ul>
<li><strong>Models</strong> - the data managed with the application</li>
<li><strong>Views</strong> - the presentation of the data</li>
<li><strong>Controllers</strong> - an intermediary between the models and the views</li>
</ul>
<p>Now, Django’s interpretation of MVC is slightly different to many other frameworks. While in most frameworks the views are HTML templates for rendering the data, in Django this role is taken by the templates, and the views are functions or objects that render data from the models using a template. Effectively, you can think of Django’s views as being like controllers in other frameworks, and Django templates as being views.</p>
<p>In Django, you create your models as Python classes that represent your data, and you use the Django ORM to query the database. As a result, it’s rare to have to directly query your database using SQL, making it more portable between different databases.</p>
<p>Now, our first model is going to be of a blog post. At least initially, each post will have the following attributes:</p>
<ul>
<li>A title</li>
<li>A publication date and time</li>
<li>Some text</li>
</ul>
<p>Now, we could just jump straight into creating our first model, but we’re going to make a point of following the practices of test-driven development here. The basic concept of TDD is that you write a failing test before writing any code, then you write the code to pass that test afterwards. It does make things a bit slower, but it’s all too easy to neglect writing tests at all if you leave it till later.</p>
<p>If you take a look in the <code>blogengine</code> folder you’ll notice there’s a file called <code>tests.py</code>. Open it up and you should see the following:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase

<span class="hljs-comment"># Create your tests here.</span>
</code></pre>
<p>It’s worth taking a little time to plan out what we want to test from our post model. Each post object will have the attributes I mentioned above, and what we want to be able to do is test that we can:</p>
<ul>
<li>Set the title</li>
<li>Set the publication date and time</li>
<li>Set the text</li>
<li>Save it successfully</li>
<li>Retrieve it successfully</li>
</ul>
<p>So, let’s create a test for our post model. We’ll go through the relevant sections of the test bit by bit:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase
<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post
</code></pre>
<p>Here we’re importing the required functionality. <code>TestCase</code> is provided by Django, and is an object all of your tests should inherit from. <code>timezone</code> is a utility for handling dates and times correctly. Finally, <code>Post</code> is our model, which we have yet to implement.</p>
<pre><code class="hljs lang-python"><span class="hljs-comment"># Create your tests here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
</code></pre>
<p>Here we create the PostTest class, which represents a test for your <code>Post</code> model. So far it only has one method, but you can add additional ones if required.</p>
<pre><code class="hljs lang-python">
        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.pub_date = timezone.now()
</code></pre>
<p>Here we set the post’s attributes.</p>
<pre><code class="hljs lang-python">
        <span class="hljs-comment"># Save it</span>
        post.save()
</code></pre>
<p>Now we save it. At this point it has been added to the database, and the rest of the test involves us ensuring it has been saved correctly and can be retrieved.</p>
<pre><code class="hljs lang-python">
        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)
</code></pre>
<p>Here we use the Django database API to fetch all of the Post objects, assert that there is only 1 post object, retrieve that post object, and assert that it is the same object as the post object we just saved.</p>
<p>If unit testing is new to you, assertions may be new to you. Essentially you’re saying to the Python interpreter, “I assert that X is true, so please raise an error if this is not true”. Here we assert that the length of the variable <code>all_posts</code> is 1, and that that post is the same object as the previously saved object, so that the test will fail if that is not the case.</p>
<pre><code class="hljs lang-python">
        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
</code></pre>
<p>Finally, we assert that the values of each of the post’s attributes as stored in the database match up with those in the post object we set. For the <code>title</code> and <code>text</code> fields, these are easy to validate as we can just check the values against those we set. For the <code>pub_date</code> field, things are a bit more complex, since this will be an object in its own right, so you need to check the day, month, year, hour, minute and second attributes separately.</p>
<p>The whole thing should look like this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase
<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post

<span class="hljs-comment"># Create your tests here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.pub_date = timezone.now()

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)
</code></pre>
<p>With that in place, the time has come to run our test with the following command:</p>
<pre><code class="hljs lang-bash">$ python manage.py <span class="hljs-built_in">test</span>
</code></pre>
<p>You should see something like this:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
E
======================================================================
ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)
----------------------------------------------------------------------
ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests
Traceback (most recent call last):
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">254</span>, <span class="hljs-keyword">in</span> _find_tests
    module = self._get_module_from_name(name)
  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _get_module_from_name
    __import__(name)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    from blogengine.models import Post
ImportError: cannot import name Post


----------------------------------------------------------------------
Ran <span class="hljs-number">1</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Don’t worry about the error - this is exactly what we expect to see because we haven’t implemented our Post model yet. Now that we have a failing test in place, we can implement our model to make the test pass. Open up <code>blogengine/models.py</code> and enter the following:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models

<span class="hljs-comment"># Create your models here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>
    title = models.CharField(max_length=<span class="hljs-number">200</span>)
    pub_date = models.DateTimeField()
    text = models.TextField()
</code></pre>
<p>Save the file and run the test again:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
E
======================================================================
ERROR: <span class="hljs-built_in">test</span>_create_post (blogengine.tests.PostTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">17</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_create_post
    post.save()
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">545</span>, <span class="hljs-keyword">in</span> save
    force_update=force_update, update_fields=update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">573</span>, <span class="hljs-keyword">in</span> save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">654</span>, <span class="hljs-keyword">in</span> _save_table
    result = self._<span class="hljs-keyword">do</span>_insert(cls._base_manager, using, fields, update_pk, raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line <span class="hljs-number">687</span>, <span class="hljs-keyword">in</span> _<span class="hljs-keyword">do</span>_insert
    using=using, raw=raw)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="hljs-number">232</span>, <span class="hljs-keyword">in</span> _insert
    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="hljs-number">1511</span>, <span class="hljs-keyword">in</span> insert_query
    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(<span class="hljs-built_in">return</span>_id)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line <span class="hljs-number">898</span>, <span class="hljs-keyword">in</span> execute_sql
    cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line <span class="hljs-number">99</span>, <span class="hljs-keyword">in</span> __<span class="hljs-built_in">exit</span>__
    six.reraise(dj_exc_<span class="hljs-built_in">type</span>, dj_exc_value, traceback)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line <span class="hljs-number">53</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line <span class="hljs-number">450</span>, <span class="hljs-keyword">in</span> execute
    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)
OperationalError: no such table: blogengine_post

----------------------------------------------------------------------
Ran <span class="hljs-number">1</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.059</span>s

FAILED (errors=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Our test still fails, but if we take a look at this error message, we can see why - there is no database table for the posts (called <code>blogengine_post</code>). Using South, we can easily remedy that by creating a new migration to create this table:</p>
<pre><code class="hljs lang-bash">$ python manage.py schemamigration --auto blogengine
</code></pre>
<p>That creates the new migration. Now let’s run it:</p>
<pre><code class="hljs lang-bash">$ python manage.py migrate
</code></pre>
<p>Now, let’s run our tests to check it’s working as expected:</p>
<pre><code class="hljs lang-bash">(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span>
Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
.
----------------------------------------------------------------------
Ran <span class="hljs-number">1</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.001</span>s

OK
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>Success! We now have a model in place that passes our test. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Added post model with passing test'</span>
</code></pre>
<p>Now, Django’s ORM is basically a layer on top of SQL that abstracts away differences between different relational databases, but the underlying queries are still being run. You can view the SQL created to generate the table by using the <code>sqlall</code> command. Just run <code>python manage.py sqlall blogengine</code> and you should see something like this:</p>
<pre><code class="hljs lang-sql"><span class="hljs-operator"><span class="hljs-keyword">BEGIN</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"blogengine_post"</span> (
    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span>,
    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"pub_date"</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,
    <span class="hljs-string">"text"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>
)
;</span>

<span class="hljs-operator"><span class="hljs-keyword">COMMIT</span>;</span>
</code></pre>
<p>Note the addition of the <code>id</code> field as the primary key. If you’re at all familiar with relational databases, you’ll know that every table must have one field, called a primary key, that is a unique reference to that row. This can be overridden, but here it’s exactly the behaviour we want.</p>
<h2 id="creating-blog-posts-via-the-admin">Creating blog posts via the admin</h2>
<p>Now, we need a way to be able to create, edit and delete blog posts. Django’s admin interface allows us to do so easily. However, before we do so, we want to create automated acceptance tests for this functionality, in order to test the ability to create posts from an end-user’s perspective. While unit tests are for testing sections of an application’s functionality from the perspective of other sections of the application, acceptance tests are testing from the user’s perspective. In other words, they test what the application needs to do to be acceptable.</p>
<p>First, we will test logging into the admin. Open up <code>blogengine/tests.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, LiveServerTestCase, Client
<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post

<span class="hljs-comment"># Create your tests here.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()

        <span class="hljs-comment"># Set the attributes</span>
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.pub_date = timezone.now()

        <span class="hljs-comment"># Save it</span>
        post.save()

        <span class="hljs-comment"># Check we can find it</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post, post)

        <span class="hljs-comment"># Check attributes</span>
        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)
        self.assertEquals(only_post.pub_date.day, post.pub_date.day)
        self.assertEquals(only_post.pub_date.month, post.pub_date.month)
        self.assertEquals(only_post.pub_date.year, post.pub_date.year)
        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)
        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)
        self.assertEquals(only_post.pub_date.second, post.pub_date.second)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create client</span>
        c = Client()

        <span class="hljs-comment"># Get login page</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
</code></pre>
<p>First of all, we import two new objects from <code>django.test</code>, <code>LiveServerTestCase</code> and <code>Client</code>. Then we create the first part of our first test for the admin, named <code>AdminTest</code>. Eventually, this will test that we can log successfully into the admin interface. For now, we’re just doing the following:</p>
<ul>
<li>Creating a Client object</li>
<li>Fetching the <code>/admin/</code> route</li>
<li>Asserting that the status code for this HTTP request is 200, (in other words, that the page was fetched successfully).</li>
</ul>
<p>If you run <code>python manage.py test</code>, you should see that both tests pass successfully. Now we’ll extend <code>AdminTest</code> - we’ll verify that the response contains the string ‘Log in’, which in the Django admin interface, appears on the login page:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create client</span>
        c = Client()

        <span class="hljs-comment"># Get login page</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Here <code>response.content</code> is a string containing the content of the HTTP response - we’re asserting that the substring ‘Log in’ appears in there. If you run <code>python manage.py test</code> again, it should pass.</p>
<p>Now, we need to actually log in. This could be fiddly, but Django has a handy convenience method to log you in when testing:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create client</span>
        c = Client()

        <span class="hljs-comment"># Get login page</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Here, we use the <code>login</code> method of the <code>Client</code> object to log into the admin interface, and then we fetch the <code>/admin/</code> route again. We assert that we get a 200 status code, and we assert that the response contains the string ‘Log out’ - in other words, that we are logged in.</p>
<p>Try running <code>python manage.py test</code> and we’ll get an error., because the user details we’ve used to log in don’t exist. Let’s resolve that.</p>
<p>Now, you could put your own credentials in there, but that’s not a good idea because it’s a security risk. Instead, we’ll create a fixture for the test user that will be loaded when the tests are run. Run the following command:</p>
<pre><code class="hljs lang-bash">$ python manage.py createsuperuser
</code></pre>
<p>Give the username as <code>bobsmith</code>, the email address as <code>bob@example.com</code>, and the password as <code>password</code>. Once that’s done, run these commands to dump the existing users to a fixture:</p>
<pre><code class="hljs lang-bash">$ mkdir blogengine/fixtures
$ python manage.py dumpdata auth.User --indent=<span class="hljs-number">2</span> &gt; blogengine/fixtures/users.json
</code></pre>
<p>This will dump all of the existing users to <code>blogengine/fixtures/users.json</code>. You may wish to edit this file to remove your own superuser account and leave only the newly created one in there.</p>
<p>Next we need to amend our test to load this fixture:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create client</span>
        c = Client()

        <span class="hljs-comment"># Get login page</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Now, if you run <code>python manage.py test</code>, you should find that the test passes. Next, we’ll test that we can log out:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create client</span>
        c = Client()

        <span class="hljs-comment"># Get login page</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create client</span>
        c = Client()

        <span class="hljs-comment"># Log in</span>
        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log out</span>
        c.logout()

        <span class="hljs-comment"># Check response code</span>
        response = c.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>This test works along very similar lines. We log in, verify that ‘Log out’ is in the response, then we log out, and verify that ‘Log in’ is in the response. Run the tests again, and they should pass. Assuming they do, let’s commit our changes again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Added tests for admin auth'</span>
</code></pre>
<p>This code is a little repetitive. We create the client twice, when we could do so only once. Amend the AdminTest class as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    fixtures = [<span class="hljs-string">'users.json'</span>]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Get login page</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)

        <span class="hljs-comment"># Check response code</span>
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log the user in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log out' in response</span>
        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Log out</span>
        self.client.logout()

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check 'Log in' in response</span>
        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>The <code>setUp()</code> method is automatically run when the test runs, and ensures we only need to start up the client once. Run your tests to make sure they pass, then commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Refactored admin test'</span>
</code></pre>
<p>Now, we’ll implement a test for creating a new post. The admin interface implements URLs for creating new instances of a model in a consistent format of <code>/admin/app_name/model_name/add/</code>, so the URL for adding a new post will be <code>/admin/blogengine/post/add/</code>.</p>
<p>Add this method to the AdminTest class:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)
</code></pre>
<p>Try running it and this will fail, because we haven’t registered the Post model in the Django admin. So we need to do that. To do so, open a new file at <code>blogengine/admin.py</code> and add the following code:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">import</span> models
<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin

admin.site.register(models.Post)
</code></pre>
<p>Now, run <code>python manage.py test</code> and the test should pass. If you want to confirm that the post model appears in the admin, run <code>python manage.py runserver</code> and click <a href="http://127.0.0.1:8000/admin/">here</a>.</p>
<p>So now we can reach the page for adding a post, but we haven’t yet tested that we can submit one. Let’s remedy that:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Check response code</span>
        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Create the new post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check added successfully</span>
        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check new post now in database</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
</code></pre>
<p>Here we submit the new post via HTTP POST, with all the data passed through. This mirrors the form created by the Django admin interface - if you take a look at the HTML generated by the admin, you’ll see that the inputs are given names that match these. Note that the <code>pub_date</code> field, because it represents a datetime object, is split up into a separate date and time field. Also note the parameter <code>follow=True</code> - this denotes that the test client should follow any HTTP redirect.</p>
<p>We confirm that the POST request responded with a 200 code, denoting success. We also confirm that the response included the phrase ‘added successfully’. Finally we confirm that there is now a single Post object in the database. Don’t worry about any existing content - Django creates a dedicated test database and destroys it after the tests are done, so you can be sure that no posts are present unless you explicitly load them from a fixture.</p>
<p>We can now test creating a post, but we also need to ensure we can test editing and deleting them. First we’ll add a test for editing posts:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Edit the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {
            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,
            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,
            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,
            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>
        },
        follow=<span class="hljs-keyword">True</span>
        )
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check changed successfully</span>
        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)
        only_post = all_posts[<span class="hljs-number">0</span>]
        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)
        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)
</code></pre>
<p>Here we create a new blog post, then verify we can edit it by resubmitting it with different values, and checking that we get the expected response, and that the data in the database has been updated. Run <code>python manage.py test</code>, and this should pass.</p>
<p>Finally, we’ll set up a test for deleting posts:</p>
<pre><code class="hljs lang-python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Log in</span>
        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)

        <span class="hljs-comment"># Delete the post</span>
        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {
            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span>
        }, follow=<span class="hljs-keyword">True</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check deleted successfully</span>
        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check post amended</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)
</code></pre>
<p>Again, this is pretty similar to what we did before. We create a new post, verify that it is the sole post in the database, and log into the admin. Then we delete the post via the admin, and confirm that the admin interface confirmed it has been deleted, and the post is gone from the database.</p>
<p>I think it’s now time to commit again:</p>
<pre><code class="hljs lang-bash">$ git add blogengine/
$ git commit -m <span class="hljs-string">'Post admin tests in place'</span>
</code></pre>
<p>So we now know that we can create, edit and delete posts, and we have tests in place to confirm this. So our next task is to be able to display our posts.</p>
<p>For now, to keep things simple, we’re only going to implement the index view - in other words, all the posts in reverse chronological order. We’ll use Django’s generic views to keep things really easy.</p>
<p>Django’s generic views are another really handy feature. As mentioned earlier, a view is a function or class that describes how a specific route should render an object. Now, there are many tasks that recur in web development. For instance, many web pages you may have seen may be a list of objects - in this case, the index page for a blog is a list of blog posts. For that reason, Django has the ListView generic view, which makes it easy to render a list of objects.</p>
<p>Now, like before, we want to have a test in place. Open up <code>blogengine/tests.py</code> and add the following class at the end of the file:</p>
<pre><code class="hljs lang-python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span>
        self.client = Client()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># Create the post</span>
        post = Post()
        post.title = <span class="hljs-string">'My first post'</span>
        post.text = <span class="hljs-string">'This is my first blog post'</span>
        post.pub_date = timezone.now()
        post.save()

        <span class="hljs-comment"># Check new post saved</span>
        all_posts = Post.objects.all()
        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)

        <span class="hljs-comment"># Fetch the index</span>
        response = self.client.get(<span class="hljs-string">'/'</span>)
        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)

        <span class="hljs-comment"># Check the post title is in the response</span>
        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post text is in the response</span>
        self.assertTrue(post.text <span class="hljs-keyword">in</span> response.content)

        <span class="hljs-comment"># Check the post date is in the response</span>
        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)
        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)
</code></pre>
<p>Here we create the post, and assert that it is the sole post object. We then fetch the index page, and assert that the HTTP status code is 200 (ie. the page exists and is returned). We then verify that the response contains the post title, text and publication date.</p>
<p>Note that for the month, we need to do a bit of jiggery-pokery to get the month name. By default Django will return short month names (eg Jan, Feb etc), but Python stores months as numbers, so we need to format it as a short month name using <code>%b</code>.</p>
<p>If you run this, you will get an error because the index route isn’t implemented. So let’s fix that. Open up the existing <code>django_tutorial_blog_ng/urls.py</code> file and amend it to look like this:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url

<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin
admin.autodiscover()

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Examples:</span>
    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span>
    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span>

    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),

    <span class="hljs-comment"># Blog URLs</span>
    url(<span class="hljs-string">r'^.*$'</span>, include(<span class="hljs-string">'blogengine.urls'</span>)),
)
</code></pre>
<p>Then, create a new file at <code>blogengine/urls.py</code> and edit it as follows:</p>
<pre><code class="hljs lang-python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url
<span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView
<span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post

urlpatterns = patterns(<span class="hljs-string">''</span>,
    <span class="hljs-comment"># Index</span>
    url(<span class="hljs-string">'^$'</span>, ListView.as_view(
        model=Post,
        )),
)
</code></pre>
<p>A little explanation is called for. The project has its own <code>urls.py</code> file that handles routing throughout the project. However, because Django encourages you to make your apps reusable, we want to keep the routes in the individual apps as far as possible. So, in the project file, we include the <code>blogengine/urls.py</code> file.</p>
<p>In the app-specific <code>urls.py</code>, we import the Post model and the ListView generic view. We then define a route for the index page - the regular expression <code>^$</code> will match only an empty string, so that page will be the index. For this route, we then call the <code>as_view()</code> method of the ListView object, and set the model as Post.</p>
<p>Now, if you either run the tests, or run the development server and visit <a href="http://127.0.0.1:8000">the index page</a>, you’ll see that it isn’t working yet - you should see the error <code>TemplateDoesNotExist: blogengine/post_list.html</code>. This tells us that we need to create a template called <code>blogengine/post_list.html</code>, so let’s do that. First of all, add the following at the end of <code>django_tutorial_blog_ng/settings.py</code>:</p>
<pre><code class="hljs lang-python">
<span class="hljs-comment"># Template directory</span>
TEMPLATE_DIRS = [os.path.join(BASE_DIR, <span class="hljs-string">'templates'</span>)]
</code></pre>
<p>Next, create the folders for the templates, and a blank <code>post_list.html</code> file:</p>
<pre><code class="hljs lang-bash">$ mkdir templates
$ mkdir templates/blogengine
$ touch templates/blogengine/post_list.html
</code></pre>
<p>Now, run your tests again, and you’ll see that the template now exists, but a new error is showing up:</p>
<pre><code class="hljs lang-bash">Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
......F
======================================================================
FAIL: <span class="hljs-built_in">test</span>_index (blogengine.tests.PostViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">189</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">test</span>_index
    self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)
AssertionError: False is not <span class="hljs-literal">true</span>

----------------------------------------------------------------------
Ran <span class="hljs-number">7</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">2.162</span>s

FAILED (failures=<span class="hljs-number">1</span>)
Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...
</code></pre>
<p>To fix this, we make sure the template shows the data we want. Open up <code>templates/blogengine/post_list.html</code> and enter the following:</p>
<pre><code class="hljs lang-html"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span></span><span class="hljs-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
        </span><span class="hljs-variable">{{ post.text }}</span><span class="xml">
        </span><span class="hljs-template_tag">{% <span class="hljs-keyword">endfor</span> %}</span><span class="xml">
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span>
</code></pre>
<p>This is only a very basic template, and we’ll expand upon it in future.</p>
<p>With that done, you can run <code>python manage.py test</code>, and it should pass. Well done! Don’t forget to commit your changes:</p>
<pre><code class="hljs lang-bash">$ git add django_tutorial_blog_ng/ templates/ blogengine/
$ git commit -m <span class="hljs-string">'Implemented list view for posts'</span>
</code></pre>
<p>And that’s all for this lesson! We’ve done a hell of a lot in this lesson - set up our project, created a comprehensive test suite for it, and implemented the basic functionality. Next time we’ll make it a bit prettier using Twitter Bootstrap, as well as implementing more of the basic functionality for the blog.</p>
<p>You can find the source code <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">on Github</a>. For your convenience, I’ve tagged this lesson as <code>lesson-1</code>, so you can just clone the repository and switch to the end of this lesson with the following commands:</p>
<pre><code class="hljs lang-bash">$ git <span class="hljs-built_in">clone</span> https://github.com/matthewbdaly/django_tutorial_blog_ng.git
$ <span class="hljs-built_in">cd</span> django_tutorial_blog_ng
$ git checkout lesson-<span class="hljs-number">1</span>
</code></pre>
<p>That way, you can easily check that what you’ve done matches up with the repository. Future lessons will be similarly tagged to make them easy to navigate.</p>
]]></description>
            <link>http://matthewdaly.co.uk/blog/2013/12/28/django-blog-tutorial-the-next-generation-part-1/</link>
            <guid isPermaLink="true">http://matthewdaly.co.uk/blog/2013/12/28/django-blog-tutorial-the-next-generation-part-1/</guid>
            <pubDate>Sat, 28 Dec 2013 15:00:32 GMT</pubDate>
        </item>
    </channel>
</rss>