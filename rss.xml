<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Matthew Daly&apos;s Blog</title>
        <description>I&apos;m a web developer in Norfolk. This is my blog...</description>
        <link>http://matthewdaly.co.uk</link>
        <lastBuildDate>Sun, 16 Oct 2016 17:10:12 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <copyright>Matthew Daly 2016</copyright>
        <generator>Feed for Node.js</generator>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular Part 3]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</guid>
            <pubDate>Sun, 16 Oct 2016 17:10:13 GMT</pubDate>
            <description><![CDATA[<p>Apologies for how long it’s taken for this post to be appear. I’ve got a lot on my plate at present as I recently started a new job, so I haven’t been able to devote as much time to this series as I’d like.</p>
<p>In this instalment we’ll begin extending our app beyond the basic authentication we’ve already implemented. We’ll start by adding the means to sign up, before adding the list of pets.</p>
<h2 id="adding-a-signup-method-to-our-backend">Adding a signup method to our backend</h2>
<p>We’ll create a controller for our users in the Laravel backend. First we’ll create our tests:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:<span class="hljs-built_in">test</span> UserControllerTest</table></code></pre>
<p>We’ll create three tests. The first will check to see that an invalid request raises the correct status code (422). The second will check that a valid request returns the correct status code (201) and creates the user. The third will check that trying to create a duplicate user raises an error. Here they are - they should be saved in the new <code>tests/UserControllerTest.php</code> file:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test creating a user - invalid</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPostingInvalidUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create a request</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'/api/users'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">422</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Test creating a user</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPostingUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">// Create a request</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-string">'password_confirmation'</span> =&gt; <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'/api/users'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment">// Check user exists</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        $saved = User::first();</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;email, <span class="hljs-string">'bob@example.com'</span>);</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;name, <span class="hljs-string">'Bob Smith'</span>);</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="48"></td><td>     * Test creating a duplicate user</td><tr><td class="linenos" data-pseudo-content="49"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="50"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="51"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPostingDuplicateUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment">// Create user</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="56"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="57"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment">// Create a request</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="64"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="65"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="66"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            <span class="hljs-string">'password_confirmation'</span> =&gt; <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'/api/users'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">422</span>);</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}</td></table></code></pre>
<p>Note the use of <code>$this-&gt;json()</code> to make the request. This method is ideal for testing a REST API.</p>
<p>Running our tests should confirm that they fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>........FFF.                                                      12 / 12 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 827 ms, Memory: 18.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 3 failures:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) UserControllerTest::<span class="hljs-built_in">test</span>PostingInvalidUser</td><tr><td class="linenos" data-pseudo-content="11"></td><td>Expected status code 422, got 404.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Failed asserting that 404 matches expected 422.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:21</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>2) UserControllerTest::<span class="hljs-built_in">test</span>PostingUser</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Expected status code 201, got 404.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Failed asserting that 404 matches expected 201.</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="22"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:39</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>3) UserControllerTest::<span class="hljs-built_in">test</span>PostingDuplicateUser</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Expected status code 422, got 404.</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Failed asserting that 404 matches expected 422.</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="29"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:71</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>FAILURES!</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Tests: 12, Assertions: 43, Failures: 3.</td></table></code></pre>
<p>Next, we create our new controller:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:controller UserController --resource</table></code></pre>
<p>Let’s populate it:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">JWTAuth</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">private</span> $user;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;user = $user;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * Show the form for creating a new resource.</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="41"></td><td>     * Store a newly created resource in storage.</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="50"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'required|email|unique:users,email'</span>,</td><tr><td class="linenos" data-pseudo-content="51"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'required|confirmed'</span>,</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Create user</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        $user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;user;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        $user-&gt;email = $request-&gt;input(<span class="hljs-string">'email'</span>);</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        $user-&gt;name = $request-&gt;input(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        $user-&gt;password = Hash::make($request-&gt;input(<span class="hljs-string">'password'</span>));</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        $user-&gt;save();</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment">// Create token</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'token'</span> =&gt; $token], <span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="70"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="71"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="72"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="73"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="74"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="77"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="81"></td><td>     * Show the form for editing the specified resource.</td><tr><td class="linenos" data-pseudo-content="82"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="83"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="84"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="85"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="90"></td><td></td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="92"></td><td>     * Update the specified resource in storage.</td><tr><td class="linenos" data-pseudo-content="93"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="94"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="95"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="96"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="97"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="99"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="100"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="101"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="102"></td><td></td><tr><td class="linenos" data-pseudo-content="103"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="104"></td><td>     * Remove the specified resource from storage.</td><tr><td class="linenos" data-pseudo-content="105"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="106"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="107"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="108"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="109"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="111"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="112"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="113"></td><td>}</td></table></code></pre>
<p>For now we’ll leave the other methods blank, but we’ll be using them later so we won’t get rid of them. At the top, note we load not only the <code>User</code> model, but also the <code>JWTAuth</code> and <code>Hash</code> facades. We use <code>JWTAuth::fromUser()</code> to return a JSON web token for the given user model.</p>
<p>In the <code>store()</code> method we first of all use <a href="https://laravel.com/docs/5.3/validation">Laravel’s validation support</a> to validate our input. We specify that the user must provide a unique email address, a username, and a password, which must be confirmed. Note that we don’t need to specify an action if the request is invalid, as Laravel will do that for us. Also, note that the <code>confirmed</code> rule means that the <code>password</code> field must be accompanied by a matching <code>password_confirmation</code> field.</p>
<p>Next, we create the user. Note that we hash the password before storing it, which is a best practice (storing passwords in plain text is a REALLY bad idea!). Then we create the token for the new user and return it. From then on, the user can use that token to authenticate their requests.</p>
<p>We also need to add this route in <code>routes/api.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>Route::resource(<span class="hljs-string">'users'</span>, <span class="hljs-string">'UserController'</span>);</table></code></pre>
<p>Let’s check the test passes:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit <span class="hljs-number">5.5</span><span class="hljs-number">.4</span> by Sebastian Bergmann <span class="hljs-keyword">and</span> contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>............                                                      <span class="hljs-number">12</span> / <span class="hljs-number">12</span> (<span class="hljs-number">100</span>%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: <span class="hljs-number">905</span> ms, Memory: <span class="hljs-number">20.00</span>MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (<span class="hljs-number">12</span> tests, <span class="hljs-number">46</span> assertions)</td></table></code></pre>
<h2 id="building-the-registration-in-the-app">Building the registration in the app</h2>
<p>With registration in place on the server side, we can move back to the app. We need to create another route for the registration form. Add this to <code>test/routes.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  it(<span class="hljs-string">'should map register route to register controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      expect($route.routes[<span class="hljs-string">'/register'</span>].controller).toBe(<span class="hljs-string">'RegisterCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      expect($route.routes[<span class="hljs-string">'/register'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/register.html'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  });</td></table></code></pre>
<p>Running the tests should confirm that this fails. So next you should add this to the route provider section of <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  .when(<span class="hljs-string">'/register'</span>, {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    templateUrl: <span class="hljs-string">'templates/register.html'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    controller: <span class="hljs-string">'RegisterCtrl'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  })</td></table></code></pre>
<p>We also need to allow the register path to be accessed when not logged in:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.run([<span class="hljs-string">'$rootScope'</span>, <span class="hljs-string">'$location'</span>, <span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $rootScope.$on(<span class="hljs-string">'$routeChangeStart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">if</span> (!Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-keyword">if</span> ($location.path() !== <span class="hljs-string">'/login'</span> &amp;&amp; $location.path() !== <span class="hljs-string">'/register'</span>) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}])</td></table></code></pre>
<p>Our next step is to create a service representing the <code>User</code> endpoint. Here’s the test for it:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'User service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> mockBackend, User;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_User_, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      User = _User_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    it(<span class="hljs-string">'can create a new user'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/users'</span>, <span class="hljs-string">'{"email":"bob@example.com","name":"bobsmith","password":"password","password_confirmation":"password"}'</span>).respond({token: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User({</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        email: <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        name: <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        password: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        password_confirmation: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      user.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        expect(response).toEqualData({token: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  });</td></table></code></pre>
<p>We’re only interested in using this model to create new users at this point, so this is the full scope of this test for now. Make sure the test fails, then we’re ready to create the new service in <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.factory(<span class="hljs-string">'User'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/users/:id'</span>, <span class="hljs-literal">null</span>, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'update'</span>: { method: <span class="hljs-string">'PATCH'</span> }</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>})</td></table></code></pre>
<p>Note that <code>angular-resource</code> does not support the <code>PUT</code> or <code>PATCH</code> methods by default, but as shown here it’s easy to implement it ourselves. That should be sufficient to make our test pass.</p>
<p>Next, we need to create the controller for registration. Here’s the test for it:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Register Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> mockBackend, scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      $controller(<span class="hljs-string">'RegisterCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        $scope: scope</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">// Test doRegister is defined</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    it(<span class="hljs-string">'should define the register method'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      expect(scope.doRegister).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">// Test doRegister works</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    it(<span class="hljs-string">'should allow the user to register'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      <span class="hljs-comment">// Mock the backend</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/users'</span>, <span class="hljs-string">'{"email":"user@example.com","name":"bobsmith","password":"password","password_confirmation":"password"}'</span>).respond({token: <span class="hljs-number">123</span>});</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>      <span class="hljs-comment">// Define login data</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>      scope.credentials = {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        email: <span class="hljs-string">'user@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        name: <span class="hljs-string">"bobsmith"</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        password: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        password_confirmation: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>      };</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>      <span class="hljs-comment">//  Submit the request</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>      scope.doRegister();</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>      <span class="hljs-comment">// Flush the backend</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>      <span class="hljs-comment">// Check login complete</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toEqual(<span class="hljs-string">'Bearer 123'</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  });</td></table></code></pre>
<p>Make sure the test fails before proceeding. Our <code>RegisterCtrl</code> is very similar to the login controller:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.controller(<span class="hljs-string">'RegisterCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, User, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $scope.doRegister = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    user.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="16"></td><td>})</td></table></code></pre>
<p>Check the tests pass,and we’re ready to move on to creating our HTML template. Save this as <code>www/templates/register.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>&lt;md-content md-theme=<span class="hljs-string">"default"</span> layout-gt-sm=<span class="hljs-string">"row"</span> layout-padding&gt;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    &lt;div&gt;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;Email&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.email"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"email"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;Username&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.name"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"text"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;Password&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.password"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"password"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;<span class="hljs-keyword">Confirm</span> Password&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.password_confirmation"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"password"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        &lt;md-button <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-raised md-primary"</span> ng-click=<span class="hljs-string">"doRegister()"</span>&gt;Submit&lt;/md-button&gt;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        &lt;md-button <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-raised md-primary"</span> href=<span class="hljs-string">"/login"</span>&gt;<span class="hljs-keyword">Log</span> <span class="hljs-keyword">in</span>&lt;/md-button&gt;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>&lt;/md-content&gt;</td></table></code></pre>
<p>It’s very similar to our login template. Speaking of which, we need to add a link to this route there:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-content</span> <span class="hljs-attr">md-theme</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">layout-gt-sm</span>=<span class="hljs-string">"row"</span> <span class="hljs-attr">layout-padding</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.email"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.password"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-raised md-primary"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"doLogin()"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-raised md-primary"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"register"</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-content</span>&gt;</span></td></table></code></pre>
<p>With that done, you should now be able to run the Gulp server for the app with <code>gulp</code> and the Laravel backend with <code>php artisan serve</code> and create a new user account.</p>
<h2 id="adding-pets-to-the-home-page">Adding pets to the home page</h2>
<p>Our final task for this lesson is to display a list of pets on the home page. Later we’ll refine that functionality, but for now we’ll just get a list of all current pets and display them. First we need to write a test for our <code>Pet</code> service:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Pet service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> mockBackend, Pet;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Pet_, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      Pet = _Pet_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    it(<span class="hljs-string">'can fetch pets'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      mockBackend.expectGET(<span class="hljs-string">'http://localhost:8000/api/pets'</span>).respond([{id:<span class="hljs-number">1</span>,name:<span class="hljs-string">"Freddie"</span>,type:<span class="hljs-string">"Cat"</span>}]);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      expect(Pet).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-keyword">var</span> pets = Pet.query();</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      expect(pets).toEqualData([{id: <span class="hljs-number">1</span>,name:<span class="hljs-string">"Freddie"</span>,type:<span class="hljs-string">"Cat"</span>}]);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  });</td></table></code></pre>
<p>Once you know that fails, it’s time to implement the service:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.factory(<span class="hljs-string">'Pet'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/pets/:id'</span>, <span class="hljs-literal">null</span>, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'update'</span>: { method: <span class="hljs-string">'PATCH'</span> }</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>})</td></table></code></pre>
<p>Next, we want to add the pets to the scope of the home controller. Amend the test for it as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Home Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> pets, scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, Pet</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      pets = Pet;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      $controller(<span class="hljs-string">'HomeCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        $scope: scope,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        pets: [{id:<span class="hljs-number">1</span>},{id:<span class="hljs-number">2</span>}]</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">// Test pets</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    it(<span class="hljs-string">'should define the pets'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      expect(scope.pets).toEqualData([{id: <span class="hljs-number">1</span>}, {id: <span class="hljs-number">2</span>}]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  });</td></table></code></pre>
<p>We check to see if the scope contains the <code>pets</code> variable. Once you have a failing test, amend the home controller as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.controller(<span class="hljs-string">'HomeCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, Pet, pets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $scope.pets = pets;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>});</td></table></code></pre>
<p>We could fetch the via AJAX inside the controller, but there’s a better way. We’ll create a loader for the pet data and have it resolve that before the page is displayed. To do so, first we need to add the loader service to <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.factory(<span class="hljs-string">'PetsLoader'</span>, [<span class="hljs-string">'Pet'</span>, <span class="hljs-string">'$q'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Pet, $q</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">var</span> delay = $q.defer();</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    Pet.query(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      delay.resolve(response);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      delay.reject(<span class="hljs-string">'Unable to fetch pets'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">return</span> delay.promise;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}])</td></table></code></pre>
<p>Then we set that route up to resolve it in <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    templateUrl: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    controller: <span class="hljs-string">'HomeCtrl'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    resolve: {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      pets: [<span class="hljs-string">'PetsLoader'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">PetsLoader</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> PetsLoader();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      }]</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  })</td></table></code></pre>
<p>Now, when we load that route, it will first of all fetch those pets and populate <code>$scope.pets</code> with them.</p>
<p>Now, we need to have some pets in the database, so we’ll make a seeder for it. Head back to the backend and run this command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:seeder PetTableSeeder</table></code></pre>
<p>Then amend the file at <code>database/seeds/PetTableSeeder.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetTableSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Add Pets</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::table(<span class="hljs-string">'pets'</span>)-&gt;insert([[</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'available'</span> =&gt; <span class="hljs-number">1</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'picture'</span>   =&gt; <span class="hljs-string">'https://placekitten.com/300/300'</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        ], [</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Sophie'</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-string">'available'</span> =&gt; <span class="hljs-number">1</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'picture'</span>   =&gt; <span class="hljs-string">'https://placekitten.com/300/300'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        ]]);</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>And we need to update <code>database/seeds/DatabaseSeeder.php</code> to call our seeder:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(UserTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(PetTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>}</td></table></code></pre>
<p>For now we’ll use placeholder images, but at a later point our backend will be set up to use images uploaded from the admin. Then we need to refresh our migrations and apply the seeders:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan migrate:refresh</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ php artisan db:seed</td></table></code></pre>
<p>Now we just need to amend our home template to show the pets and we’re done for today:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-toolbar-tools"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Log out"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            Log out</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">"column"</span> <span class="hljs-attr">flex</span>=<span class="hljs-string">"grow"</span> <span class="hljs-attr">layout-align</span>=<span class="hljs-string">"center stretch"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">md-card</span> <span class="hljs-attr">md-theme</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"pet in pets"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-card-title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">md-card-title-text</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-headline"</span>&gt;</span></span><span class="hljs-template-variable">{{ pet.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-subhead"</span>&gt;</span></span><span class="hljs-template-variable">{{ pet.type }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">md-card-title-text</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-card-title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-card-content</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-card-image md-media-lg"</span> <span class="hljs-attr">ng-src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ pet.picture }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-card-content</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">md-card</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td></table></code></pre>
<p>Now we can see our pets in the app.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That’s enough for today - the fact that we can log in and out, register, and view the home page is sufficient as a proof of concept for a client. As usual, the results are on Github, tagged <code>lesson-3</code>. </p>
<p>Next time, we’ll concentrate exclusively on the back end. We’ll build upon what we already have using Laravel to create a full REST API for our app. In a later instalment, we’ll move on to build our admin interface for the staff, before switching back to finish off the app. I hope you’ll join me then.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 2]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</guid>
            <pubDate>Sun, 18 Sep 2016 22:18:06 GMT</pubDate>
            <description><![CDATA[<p>In this lesson, the initial scope of the app will be extremely simple. We will implement functionality that:</p>
<ul>
<li>Allows users to log in and out</li>
<li>Displays the home page</li>
</ul>
<p>That’s fairly simple, and easily achievable within a fairly short timeframe. We’ll also write automated tests for our app. By the end of this lesson, we’ll have built a first pass for our app using Angular.js.</p>
<p>NOTE: As at time of writing, Angular 2 has just come out. I’m using Angular 1 here, and the two are not compatible, so make sure you’re using Angular 1.</p>
<h2 id="creating-our-app">Creating our app</h2>
<p>Start by creating a new folder, separate from the backend, for the app. Then, in there, run the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm init -y</table></code></pre>
<p>Then let’s install our dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install --save-dev gulp karma karma-browserify karma-phantomjs-launcher browserify angular angular-route angular-mocks angular-animate angular-messages angular-sanitize angular-material angular-resource vinyl-buffer vinyl-source-stream gulp-sass karma-coverage karma-jasmine jasmine-core gulp-webserver</table></code></pre>
<p>We’re going to use <a href="https://material.angularjs.org/latest/">Angular Material</a> for our user interface as it includes support out of the box for swiping left and right. You’ll notice it mentioned as one of the dependencies above.</p>
<p>We’ll also use Karma for running our tests. Save the following as <code>karma.conf.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    config.set({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        basePath: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        frameworks: [<span class="hljs-string">'browserify'</span>, <span class="hljs-string">'jasmine'</span>],</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        files: [</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'node_modules/angular/angular.min.js'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'node_modules/angular-mocks/angular-mocks.js'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'node_modules/angular-material/angular-material-mocks.js'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'js/*.js'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-string">'test/*.js'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        exclude: [</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        preprocessors: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'js/*.js'</span>: [<span class="hljs-string">'browserify'</span>, <span class="hljs-string">'coverage'</span>],</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'tests/js'</span>: [<span class="hljs-string">'browserify'</span>]</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        browserify: {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>          debug: <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        reporters: [<span class="hljs-string">'progress'</span>, <span class="hljs-string">'coverage'</span>],</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        port: <span class="hljs-number">9876</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        colors: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        logLevel: config.LOG_DEBUG,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        autoWatch: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        browsers: [<span class="hljs-string">'PhantomJS'</span>],</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        singleRun: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        coverageReporter: {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>          dir : <span class="hljs-string">'coverage/'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>          reporters: [</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            { type: <span class="hljs-string">'html'</span>, subdir: <span class="hljs-string">'report-html'</span> },</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            { type: <span class="hljs-string">'cobertura'</span>, subdir: <span class="hljs-string">'report-cobertura'</span> }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>          ]</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="36"></td><td>};</td></table></code></pre>
<p>This is our Karma configuration. Karma can run the same test in multiple browsers. Here we’re going to use PhantomJS, but it’s trivial to amend the <code>browsers</code> section to add more. You just need to make sure you install the appropriate launchers for those browsers.</p>
<p>We’ll use Gulp to build the app. Here’s the <code>gulpfile.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> source = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-source-stream'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> buffer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-buffer'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> sass = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-sass'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-webserver'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> paths = {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  scripts: [<span class="hljs-string">'js/*.js'</span>],</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  styles: [<span class="hljs-string">'sass/*.scss'</span>]</td><tr><td class="linenos" data-pseudo-content="11"></td><td>};</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>gulp.task(<span class="hljs-string">'sass'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  gulp.src(<span class="hljs-string">'sass/style.scss'</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>   .pipe(sass().on(<span class="hljs-string">'error'</span>, sass.logError))</td><tr><td class="linenos" data-pseudo-content="16"></td><td>   .pipe(gulp.dest(<span class="hljs-string">'www/css'</span>));</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});;</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>gulp.task(<span class="hljs-string">'js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  <span class="hljs-keyword">return</span> browserify({ entries: [<span class="hljs-string">'js/main.js'</span>], debug: <span class="hljs-literal">true</span> })</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    .bundle()</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    .pipe(source(<span class="hljs-string">'bundle.js'</span>))</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    .pipe(buffer())</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'www/js/'</span>));</td><tr><td class="linenos" data-pseudo-content="25"></td><td>});</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>gulp.task(<span class="hljs-string">'server'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  gulp.src(<span class="hljs-string">'www/'</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    .pipe(server({</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      livereload: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      open: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      port: <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="34"></td><td>});</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>gulp.task(<span class="hljs-string">'watch'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  gulp.watch(paths.scripts, [<span class="hljs-string">'js'</span>]);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>  gulp.watch(paths.styles, [<span class="hljs-string">'sass'</span>]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>});</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>gulp.task(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass'</span>,<span class="hljs-string">'js'</span>,<span class="hljs-string">'server'</span>, <span class="hljs-string">'watch'</span>]);</td></table></code></pre>
<p>Note that we’re going to be using Browserify to handle our dependencies. If you haven’t used it before, it lets you use the <code>require()</code> syntax from Node.js to include other JavaScript files, including ones available via NPM such as jQuery or Angular, allowing you to compile them all into a single file.</p>
<p>We should be able to test and run the app using NPM, so add these scripts to <code>package.json</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  <span class="hljs-string">"scripts"</span>: {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"test"</span>: <span class="hljs-string">"karma start"</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"run"</span>: <span class="hljs-string">"gulp"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  },</td></table></code></pre>
<p>We also need an HTML file. Save this as <code>www/index.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, user-scalable=0"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My New Animal Friend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">"mynewanimalfriend"</span> <span class="hljs-attr">ng-cloak</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></td></table></code></pre>
<p>Note the use of the Angular directives. <code>ng-app</code> denotes the name of the app namespace, <code>ng-cloak</code> hides the application until it’s fully loaded, and <code>ng-view</code> denotes the area containing our content.</p>
<p>You should also create the files <code>js/main.js</code>, <code>sass/style.scss</code>, and the <code>test</code> folder.</p>
<h2 id="creating-our-first-routes">Creating our first routes</h2>
<p>Our first task is to create the routes we need. Our default route will be <code>/</code>, representing the home page. However, users will need to be logged in to see this. Otherwise, they should be redirected to the login route, which will be <code>/login</code>, appropriately enough. We’ll also have a <code>/logout</code> route, which should be self-explanatory.</p>
<p>Before we implement these routes, we need to write a test for them. We’ll start with our login route, and we’ll test that for this route, the controller will be <code>LoginCtrl</code> and the template will be <code>templates/login.html</code>. The significance of these will become apparent later. Save this as <code>test/routes.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Routes'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend'</span>));</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  it(<span class="hljs-string">'should map login route to login controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].controller).toBe(<span class="hljs-string">'LoginCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/login.html'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>});</td></table></code></pre>
<p>Note the <code>beforeEach()</code> hook. This is used to set up the application.</p>
<p>We can run this test with <code>npm test</code> as that calls Karma directly. Note that we’re using Jasmine to write our tests.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; mynewanimalfriend-app@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/mynewanimalfriend-app</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; karma start</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>12 09 2016 22:22:34.168:DEBUG [config]: autoWatch <span class="hljs-built_in">set</span> to <span class="hljs-literal">false</span>, because of singleRun</td><tr><td class="linenos" data-pseudo-content="7"></td><td>12 09 2016 22:22:34.172:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules</td><tr><td class="linenos" data-pseudo-content="8"></td><td>12 09 2016 22:22:34.176:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>12 09 2016 22:22:34.314:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>12 09 2016 22:22:34.484:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>12 09 2016 22:22:34.485:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>12 09 2016 22:22:34.535:DEBUG [framework.browserify]: created browserify bundle: /tmp/f8c46bd8d72c5b8578e64552192273be.browserify</td><tr><td class="linenos" data-pseudo-content="13"></td><td>12 09 2016 22:22:34.553:DEBUG [framework.browserify]: add bundle to config.files at position 3</td><tr><td class="linenos" data-pseudo-content="14"></td><td>12 09 2016 22:22:34.559:DEBUG [web-server]: Instantiating middleware</td><tr><td class="linenos" data-pseudo-content="15"></td><td>12 09 2016 22:22:34.569:DEBUG [reporter]: Trying to load reporter: coverage</td><tr><td class="linenos" data-pseudo-content="16"></td><td>12 09 2016 22:22:34.570:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>12 09 2016 22:22:34.571:DEBUG [reporter]: Couldn<span class="hljs-string">'t load color-version.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>12 09 2016 22:22:34.596:DEBUG [framework.browserify]: updating js/main.js in bundle</td><tr><td class="linenos" data-pseudo-content="19"></td><td>12 09 2016 22:22:34.597:DEBUG [framework.browserify]: building bundle</td><tr><td class="linenos" data-pseudo-content="20"></td><td>12 09 2016 22:22:35.302:DEBUG [framework.browserify]: bundling</td><tr><td class="linenos" data-pseudo-content="21"></td><td>12 09 2016 22:22:35.328:DEBUG [preprocessor.coverage]: Processing "/home/matthew/Projects/mynewanimalfriend-app/js/main.js".</td><tr><td class="linenos" data-pseudo-content="22"></td><td>12 09 2016 22:22:35.345:INFO [framework.browserify]: bundle built</td><tr><td class="linenos" data-pseudo-content="23"></td><td>12 09 2016 22:22:35.352:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/</td><tr><td class="linenos" data-pseudo-content="24"></td><td>12 09 2016 22:22:35.352:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency</td><tr><td class="linenos" data-pseudo-content="25"></td><td>12 09 2016 22:22:35.361:INFO [launcher]: Starting browser PhantomJS</td><tr><td class="linenos" data-pseudo-content="26"></td><td>12 09 2016 22:22:35.361:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-17657666</td><tr><td class="linenos" data-pseudo-content="27"></td><td>12 09 2016 22:22:35.364:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-17657666/capture.js</td><tr><td class="linenos" data-pseudo-content="28"></td><td>12 09 2016 22:22:35.466:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html</td><tr><td class="linenos" data-pseudo-content="29"></td><td>12 09 2016 22:22:35.478:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js</td><tr><td class="linenos" data-pseudo-content="30"></td><td>12 09 2016 22:22:35.541:DEBUG [karma]: A browser has connected on socket /#dQYjOD4F_HJwPXiYAAAA</td><tr><td class="linenos" data-pseudo-content="31"></td><td>12 09 2016 22:22:35.564:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=dQYjOD4F_HJwPXiYAAAA</td><tr><td class="linenos" data-pseudo-content="32"></td><td>12 09 2016 22:22:35.629:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#dQYjOD4F_HJwPXiYAAAA with id 17657666</td><tr><td class="linenos" data-pseudo-content="33"></td><td>12 09 2016 22:22:35.630:DEBUG [launcher]: PhantomJS (id 17657666) captured in 0.277 secs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>12 09 2016 22:22:35.642:DEBUG [phantomjs.launcher]: </td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>12 09 2016 22:22:35.643:DEBUG [middleware:karma]: custom files null null</td><tr><td class="linenos" data-pseudo-content="37"></td><td>12 09 2016 22:22:35.644:DEBUG [middleware:karma]: Serving static request /context.html</td><tr><td class="linenos" data-pseudo-content="38"></td><td>12 09 2016 22:22:35.646:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html</td><tr><td class="linenos" data-pseudo-content="39"></td><td>12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /</td><tr><td class="linenos" data-pseudo-content="40"></td><td>12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="41"></td><td>12 09 2016 22:22:35.652:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="42"></td><td>12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /</td><tr><td class="linenos" data-pseudo-content="43"></td><td>12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="44"></td><td>12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /</td><tr><td class="linenos" data-pseudo-content="45"></td><td>12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="46"></td><td>12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /</td><tr><td class="linenos" data-pseudo-content="47"></td><td>12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="48"></td><td>12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /</td><tr><td class="linenos" data-pseudo-content="49"></td><td>12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="50"></td><td>12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /</td><tr><td class="linenos" data-pseudo-content="51"></td><td>12 09 2016 22:22:35.657:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>12 09 2016 22:22:35.657:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="53"></td><td>12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="54"></td><td>12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="55"></td><td>12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="56"></td><td>12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="57"></td><td>12 09 2016 22:22:35.660:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js</td><tr><td class="linenos" data-pseudo-content="58"></td><td>12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Requesting /absolute/tmp/f8c46bd8d72c5b8578e64552192273be.browserify?8ffde4eef27d38e92cc62da4e8dd0ffa5a3a4a4c /</td><tr><td class="linenos" data-pseudo-content="59"></td><td>12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Fetching /tmp/f8c46bd8d72c5b8578e64552192273be.browserify</td><tr><td class="linenos" data-pseudo-content="60"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /</td><tr><td class="linenos" data-pseudo-content="61"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="62"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /</td><tr><td class="linenos" data-pseudo-content="63"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="64"></td><td>12 09 2016 22:22:35.663:DEBUG [web-server]: serving (cached): /tmp/f8c46bd8d72c5b8578e64552192273be.browserify</td><tr><td class="linenos" data-pseudo-content="65"></td><td>12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="66"></td><td>12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="67"></td><td>PhantomJS 2.1.1 (Linux 0.0.0) Routes should map login route to login controller FAILED</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        Error: [$injector:modulerr] http://errors.angularjs.org/1.5.8/$injector/modulerr?p0=mynewanimalfriend&amp;p1=%5B%24injector%3Anomod%5D%20http%3A%2F%2Ferrors.angularjs.org%2F1.5.8%2F%24injector%2Fnomod%3Fp0%3Dmynewanimalfriend%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A25%3A111%0Ab%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A143%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A489%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A473%0Aq%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A7%3A359%0Ag%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A320%0Acb%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A43%3A337%0AworkFn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3074%3A60%0Ainject%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3054%3A46%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Ftest%2Froutes.spec.js%3F92b15bb7c24bc6ead636994fb1c737b91727d887%3A5%3A11%0AattemptSync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1942%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1930%3A20%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A367%3A28%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2568%3A44%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2553%3A31%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2415%3A25%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A772%3A24%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fkarma-jasmine%2Flib%2Fadapter.js%3F7975a273517f1eb29d7bd018790fd4c7b9a485d5%3A320%3A23%0Aloaded%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.js%3A151%3A17%0Aglobal%20code%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.html%3A50%3A28 in node_modules/angular/angular.min.js (line 40)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        node_modules/angular/angular.min.js:40:260</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        q@node_modules/angular/angular.min.js:7:359</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        g@node_modules/angular/angular.min.js:39:320</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        cb@node_modules/angular/angular.min.js:43:337</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        workFn@node_modules/angular-mocks/angular-mocks.js:3074:60</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        inject@node_modules/angular-mocks/angular-mocks.js:3054:46</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        test/routes.spec.js:5:11</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        loaded@http://localhost:9876/context.js:151:17</td><tr><td class="linenos" data-pseudo-content="77"></td><td>PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 (1 FAILED) ERROR (0.044 secs / 0.006 secs)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>12 09 2016 22:22:35.778:DEBUG [karma]: Run complete, exiting.</td><tr><td class="linenos" data-pseudo-content="79"></td><td>12 09 2016 22:22:35.778:DEBUG [launcher]: Disconnecting all browsers</td><tr><td class="linenos" data-pseudo-content="80"></td><td>12 09 2016 22:22:35.778:DEBUG [framework.browserify]: cleaning up</td><tr><td class="linenos" data-pseudo-content="81"></td><td>12 09 2016 22:22:35.782:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html</td><tr><td class="linenos" data-pseudo-content="82"></td><td>12 09 2016 22:22:35.876:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura</td><tr><td class="linenos" data-pseudo-content="83"></td><td>12 09 2016 22:22:35.880:DEBUG [launcher]: Process PhantomJS exited with code 0</td><tr><td class="linenos" data-pseudo-content="84"></td><td>12 09 2016 22:22:35.881:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-17657666</td><tr><td class="linenos" data-pseudo-content="85"></td><td>12 09 2016 22:22:35.884:DEBUG [launcher]: Finished all browsers</td><tr><td class="linenos" data-pseudo-content="86"></td><td>npm ERR! Test failed.  See above for more details.</span></td></table></code></pre>
<p>Now that we have a failing test, we can set about making it pass. Save this at <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngMaterial'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>])</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    controller: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>});</td></table></code></pre>
<p>As mentioned earlier, because we’re using Browserify, we can use the <code>require()</code> syntax to import our dependencies. Note we also give our module a name and specify the dependencies. Finally, note that we use <code>$routeProvider</code> to set up our first route, and we map the template URL and controller to match our test.</p>
<p>Let’s run the test again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; mynewanimalfriend-app@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/mynewanimalfriend-app</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; karma start</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>12 09 2016 22:35:51.231:DEBUG [config]: autoWatch <span class="hljs-built_in">set</span> to <span class="hljs-literal">false</span>, because of singleRun</td><tr><td class="linenos" data-pseudo-content="7"></td><td>12 09 2016 22:35:51.235:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules</td><tr><td class="linenos" data-pseudo-content="8"></td><td>12 09 2016 22:35:51.237:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>12 09 2016 22:35:51.354:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>12 09 2016 22:35:51.496:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>12 09 2016 22:35:51.497:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>12 09 2016 22:35:51.547:DEBUG [framework.browserify]: created browserify bundle: /tmp/02002698e6d413a542186462d3a0a6ce.browserify</td><tr><td class="linenos" data-pseudo-content="13"></td><td>12 09 2016 22:35:51.559:DEBUG [framework.browserify]: add bundle to config.files at position 3</td><tr><td class="linenos" data-pseudo-content="14"></td><td>12 09 2016 22:35:51.564:DEBUG [web-server]: Instantiating middleware</td><tr><td class="linenos" data-pseudo-content="15"></td><td>12 09 2016 22:35:51.581:DEBUG [reporter]: Trying to load reporter: coverage</td><tr><td class="linenos" data-pseudo-content="16"></td><td>12 09 2016 22:35:51.582:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>12 09 2016 22:35:51.582:DEBUG [reporter]: Couldn<span class="hljs-string">'t load color-version.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>12 09 2016 22:35:51.602:DEBUG [framework.browserify]: updating js/main.js in bundle</td><tr><td class="linenos" data-pseudo-content="19"></td><td>12 09 2016 22:35:51.603:DEBUG [framework.browserify]: building bundle</td><tr><td class="linenos" data-pseudo-content="20"></td><td>12 09 2016 22:35:52.306:DEBUG [framework.browserify]: bundling</td><tr><td class="linenos" data-pseudo-content="21"></td><td>12 09 2016 22:35:54.095:DEBUG [preprocessor.coverage]: Processing "/home/matthew/Projects/mynewanimalfriend-app/js/main.js".</td><tr><td class="linenos" data-pseudo-content="22"></td><td>12 09 2016 22:35:54.170:INFO [framework.browserify]: bundle built</td><tr><td class="linenos" data-pseudo-content="23"></td><td>12 09 2016 22:35:54.189:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/</td><tr><td class="linenos" data-pseudo-content="24"></td><td>12 09 2016 22:35:54.189:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency</td><tr><td class="linenos" data-pseudo-content="25"></td><td>12 09 2016 22:35:54.197:INFO [launcher]: Starting browser PhantomJS</td><tr><td class="linenos" data-pseudo-content="26"></td><td>12 09 2016 22:35:54.198:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-91342786</td><tr><td class="linenos" data-pseudo-content="27"></td><td>12 09 2016 22:35:54.201:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-91342786/capture.js</td><tr><td class="linenos" data-pseudo-content="28"></td><td>12 09 2016 22:35:54.300:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html</td><tr><td class="linenos" data-pseudo-content="29"></td><td>12 09 2016 22:35:54.308:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js</td><tr><td class="linenos" data-pseudo-content="30"></td><td>12 09 2016 22:35:54.366:DEBUG [karma]: A browser has connected on socket /#FpcuZAJUT-u6Dl4sAAAA</td><tr><td class="linenos" data-pseudo-content="31"></td><td>12 09 2016 22:35:54.386:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=FpcuZAJUT-u6Dl4sAAAA</td><tr><td class="linenos" data-pseudo-content="32"></td><td>12 09 2016 22:35:54.442:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#FpcuZAJUT-u6Dl4sAAAA with id 91342786</td><tr><td class="linenos" data-pseudo-content="33"></td><td>12 09 2016 22:35:54.442:DEBUG [launcher]: PhantomJS (id 91342786) captured in 0.253 secs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>12 09 2016 22:35:54.447:DEBUG [phantomjs.launcher]: </td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>12 09 2016 22:35:54.448:DEBUG [middleware:karma]: custom files null null</td><tr><td class="linenos" data-pseudo-content="37"></td><td>12 09 2016 22:35:54.448:DEBUG [middleware:karma]: Serving static request /context.html</td><tr><td class="linenos" data-pseudo-content="38"></td><td>12 09 2016 22:35:54.449:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html</td><tr><td class="linenos" data-pseudo-content="39"></td><td>12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /</td><tr><td class="linenos" data-pseudo-content="40"></td><td>12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="41"></td><td>12 09 2016 22:35:54.452:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="42"></td><td>12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /</td><tr><td class="linenos" data-pseudo-content="43"></td><td>12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="44"></td><td>12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /</td><tr><td class="linenos" data-pseudo-content="45"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="46"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /</td><tr><td class="linenos" data-pseudo-content="47"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="48"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /</td><tr><td class="linenos" data-pseudo-content="49"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="50"></td><td>12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /</td><tr><td class="linenos" data-pseudo-content="51"></td><td>12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="53"></td><td>12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="54"></td><td>12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="55"></td><td>12 09 2016 22:35:54.456:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="56"></td><td>12 09 2016 22:35:54.457:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="57"></td><td>12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /absolute/tmp/02002698e6d413a542186462d3a0a6ce.browserify?f4c82dc0618d979f84c89967ea1c412e646a5fe5 /</td><tr><td class="linenos" data-pseudo-content="58"></td><td>12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Fetching /tmp/02002698e6d413a542186462d3a0a6ce.browserify</td><tr><td class="linenos" data-pseudo-content="59"></td><td>12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /</td><tr><td class="linenos" data-pseudo-content="60"></td><td>12 09 2016 22:35:54.459:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="61"></td><td>12 09 2016 22:35:54.460:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /</td><tr><td class="linenos" data-pseudo-content="62"></td><td>12 09 2016 22:35:54.461:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="63"></td><td>12 09 2016 22:35:54.461:DEBUG [web-server]: serving (cached): /tmp/02002698e6d413a542186462d3a0a6ce.browserify</td><tr><td class="linenos" data-pseudo-content="64"></td><td>12 09 2016 22:35:54.496:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="65"></td><td>12 09 2016 22:35:54.497:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="66"></td><td>12 09 2016 22:35:54.497:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js</td><tr><td class="linenos" data-pseudo-content="67"></td><td>12 09 2016 22:35:54.582:DEBUG [phantomjs.launcher]: WARNING: Tried to load angular more than once.</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>PhantomJS 2.1.1 (Linux 0.0.0) LOG: '</span>WARNING: Tried to load angular more than once.<span class="hljs-string">'</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.358 secs)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>12 09 2016 22:35:55.003:DEBUG [karma]: Run complete, exiting.</td><tr><td class="linenos" data-pseudo-content="73"></td><td>12 09 2016 22:35:55.003:DEBUG [launcher]: Disconnecting all browsers</td><tr><td class="linenos" data-pseudo-content="74"></td><td>12 09 2016 22:35:55.003:DEBUG [framework.browserify]: cleaning up</td><tr><td class="linenos" data-pseudo-content="75"></td><td>12 09 2016 22:35:55.006:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html</td><tr><td class="linenos" data-pseudo-content="76"></td><td>12 09 2016 22:35:55.078:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura</td><tr><td class="linenos" data-pseudo-content="77"></td><td>12 09 2016 22:35:55.082:DEBUG [launcher]: Process PhantomJS exited with code 0</td><tr><td class="linenos" data-pseudo-content="78"></td><td>12 09 2016 22:35:55.082:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-91342786</td><tr><td class="linenos" data-pseudo-content="79"></td><td>12 09 2016 22:35:55.085:DEBUG [launcher]: Finished all browsers</span></td></table></code></pre>
<p>Our first test has passed. Let’s add tests for the other routes:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Routes'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend'</span>));</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  it(<span class="hljs-string">'should map default route to home controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      expect($route.routes[<span class="hljs-string">'/'</span>].controller).toBe(<span class="hljs-string">'HomeCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      expect($route.routes[<span class="hljs-string">'/'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/home.html'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>  it(<span class="hljs-string">'should map login route to login controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].controller).toBe(<span class="hljs-string">'LoginCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/login.html'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>  it(<span class="hljs-string">'should map logout route to logout controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      expect($route.routes[<span class="hljs-string">'/logout'</span>].controller).toBe(<span class="hljs-string">'LogoutCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      expect($route.routes[<span class="hljs-string">'/logout'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/login.html'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>});</td></table></code></pre>
<p>Note that the logout route uses the login template. This is because all it will do is redirect the user to the login form.</p>
<p>For the sake of brevity I won’t display the test output, but two of these tests should now fail. We can easily set up the new routes in <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngMaterial'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>])</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    controller: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    templateUrl: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    controller: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    controller: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td></table></code></pre>
<p>That’s looking good so far. But what if someone navigates to a URL that doesn’t exist? Our router should handle that. Add this to the test:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  it(<span class="hljs-string">'should redirect other or empty routes to the home controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      expect($route.routes[<span class="hljs-literal">null</span>].redirectTo).toEqual(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  });</td></table></code></pre>
<p>Once again, the test should fail. Fixing it is fairly straightforward - we’ll use the <code>otherwise()</code> method to define a fallback route:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngMaterial'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>])</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    controller: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    templateUrl: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    controller: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    controller: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    redirectTo: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>});</td></table></code></pre>
<p>Now our routes are in place, we need to implement the three controllers we will need. However, as two of these controllers deal with authentication, we’ll first create some services to handle that, and they’ll need to be tested. Save this as <code>test/services.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Services'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    jasmine.addMatchers({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      toEqualData: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">util, customEqualityTesters</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>          compare: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">actual, expected</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>              pass: angular.equals(actual, expected)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            };</td><tr><td class="linenos" data-pseudo-content="13"></td><td>          }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend.services'</span>));</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  describe(<span class="hljs-string">'Token service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">var</span> mockBackend, Token;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Token_, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      Token = _Token_;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    it(<span class="hljs-string">'can create a new token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/authenticate'</span>, <span class="hljs-string">'{"email":"bob@example.com","password":"password"}'</span>).respond({token: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token({</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        email: <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        password: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        expect(response).toEqualData({token: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="37"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="38"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="41"></td><td>});</td></table></code></pre>
<p>In this test we use the <code>$httpBackend</code> facility from <code>ngMock</code> to mock out our API endpoints. We already have a REST API capable of generating a token, and we set this test up to behave similarly. We specify that it should expect to receive a certain POST request, and should respond with the token <code>mytoken</code>. Run the test to make sure it fails, then save this as <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">"angular-resource"</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.services'</span>, [<span class="hljs-string">'ngResource'</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>.factory(<span class="hljs-string">'Token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/authenticate/'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>});</td></table></code></pre>
<p>A little explanation is called for. In Angular, the <code>$resource</code> dependency represents an HTTP resource. By default it supports making HTTP requests to the denoted endpoint via GET, POST and DELETE, and it’s trivial to add support for PUT or PATCH methods. Using <code>$resource</code>, you can easily interface with a RESTful web service, and it’s one of my favourite things about Angular.</p>
<p>We also need to load <code>services.js</code> in our <code>main.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-string">'ngMaterial'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>])</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    controller: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    templateUrl: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    controller: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    controller: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    redirectTo: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});</td></table></code></pre>
<p>Now, running the tests should show that they pass.</p>
<p>With that in place, we will also create an authentication service that lets the app determine if the user is logged in. Add this to <code>test/services.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Auth service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> Auth;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Auth_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      Auth = _Auth_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    it(<span class="hljs-string">'can set user'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      Auth.setUser(<span class="hljs-string">'mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      <span class="hljs-keyword">var</span> token = localStorage.getItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      expect(token).toEqual(<span class="hljs-string">'Bearer mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    it(<span class="hljs-string">'can return login status'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      expect(Auth.isLoggedIn()).toBeTruthy();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    it(<span class="hljs-string">'can log the user out'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      expect(Auth.isLoggedIn()).toBeFalsy();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toBeFalsy();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  });</td></table></code></pre>
<p>This service is expected to do three things:</p>
<ul>
<li>Set the current user’s details in local storage</li>
<li>Return whether the user is logged in</li>
<li>Log the user out</li>
</ul>
<p>Make sure the test fails, then amend <code>js/services.js</code> as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">"angular-resource"</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.services'</span>, [<span class="hljs-string">'ngResource'</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>.factory(<span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-keyword">return</span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    setUser : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">aUser</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer '</span> + aUser);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    isLoggedIn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-keyword">var</span> user = localStorage.getItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">return</span>(user)? user : <span class="hljs-literal">false</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    logUserOut: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      localStorage.removeItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>})</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>.factory(<span class="hljs-string">'Token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/authenticate/'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>});</td></table></code></pre>
<p>When the user is set, we store the authentication details we need in local storage. We can then use that to determine if they are logged in. When they log out, we simply clear local storage,</p>
<p>That should be enough to make these tests pass. Now we can move on to our controllers. We’ll do the login controller first. Save this as <code>test/controllers.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Controllers'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    jasmine.addMatchers({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      toEqualData: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">util, customEqualityTesters</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>          compare: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">actual, expected</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>              pass: angular.equals(actual, expected)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            };</td><tr><td class="linenos" data-pseudo-content="13"></td><td>          }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>));</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  describe(<span class="hljs-string">'Login Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">var</span> mockBackend, scope;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      $controller(<span class="hljs-string">'LoginCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $scope: scope</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-comment">// Test doLogin is defined</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    it(<span class="hljs-string">'should define the login method'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="39"></td><td>      expect(scope.doLogin).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-comment">// Test doLogin works</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    it(<span class="hljs-string">'should allow the user to log in'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      <span class="hljs-comment">// Mock the backend</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/authenticate'</span>, <span class="hljs-string">'{"email":"user@example.com","password":"password"}'</span>).respond({token: <span class="hljs-number">123</span>});</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>      <span class="hljs-comment">// Define login data</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>      scope.credentials = {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        email: <span class="hljs-string">'user@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        password: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>      };</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>      <span class="hljs-comment">//  Submit the request</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>      scope.doLogin();</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>      <span class="hljs-comment">// Flush the backend</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>      <span class="hljs-comment">// Check login complete</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toEqual(<span class="hljs-string">'Bearer 123'</span>);</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="62"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="63"></td><td>});</td></table></code></pre>
<p>We check that the scope and the <code>doLogin()</code> method are defined. We then mock the backend’s <code>/api/authenticate</code> route to respond with a dummy token when our credentials are provided. Then, we set the credentials in the variable <code>$scope.credentials</code>, call <code>doLogin()</code>, flush the backend, and check the authentication header has been set.</p>
<p>Once you’ve verified these tests fail, we can start making them pass. Save this as <code>js/controllers.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>, [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">"ngMaterial"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>])</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>.controller(<span class="hljs-string">'LoginCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Token, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  $scope.doLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="27"></td><td>});</td></table></code></pre>
<p>The <code>LoginCtrl</code> controller accepts the scope, location, and our two services. When <code>doLogin()</code> is alled, it picks up the values in <code>$scope.credentials</code>, which we will set in our template later. It then makes a POST request to our endpoint including those credentials. Our API backend should return the new token in the response, and the token is stored using the <code>Auth</code> service. Otherwise, it raises an error.</p>
<p>Check the test now passes before moving onto the logout functionality. Add this to <code>test/controllers.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Logout Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      Auth.setUser(<span class="hljs-string">'Blah'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      $controller(<span class="hljs-string">'LogoutCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        $scope: scope</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">// Test session cleared</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    it(<span class="hljs-string">'should clear the session'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toEqual(<span class="hljs-literal">null</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  });</td></table></code></pre>
<p>We want to ensure that when the user navigates to the route managed by the <code>LogoutCtrl</code> controller, the session is cleared, so we set up an existing session, call the controller, check it’s defined, and then check that local storage is empty.</p>
<p>Once you’ve verified that the test fails, amend the controllers as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>, [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">"ngMaterial"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>])</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>.controller(<span class="hljs-string">'LoginCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Token, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  $scope.doLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="27"></td><td>})</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>.controller(<span class="hljs-string">'LogoutCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  <span class="hljs-comment">// Log user out</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>  Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>  <span class="hljs-comment">// Redirect to login page</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>  $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>});</td></table></code></pre>
<p>Our <code>LogoutCtrl</code> controller is very simple - it just logs the user out and redirects them back to the login form. Our final controller is for the home page:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Home Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      $controller(<span class="hljs-string">'HomeCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $scope: scope</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  });</td></table></code></pre>
<p>For now our home controller does nothing except define the scope, so it’s easy to implement:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>, [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">"ngMaterial"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>])</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>.controller(<span class="hljs-string">'LoginCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Token, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  $scope.doLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="27"></td><td>})</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>.controller(<span class="hljs-string">'LogoutCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  <span class="hljs-comment">// Log user out</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>  Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>  <span class="hljs-comment">// Redirect to login page</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>  $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>})</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>.controller(<span class="hljs-string">'HomeCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="38"></td><td>});</td></table></code></pre>
<p>Verify that the tests pass, and our controllers are done for now. However, we still have some work to do to hook the various elements up. First, of all, our <code>main.js</code> unnecessarily loads our services - since we only use those services in our controllers, we don’t need them there. We also need to be able to keep users out of routes other than <code>login</code> when not logged in. Here’s what you <code>main.js</code> should look like:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./controllers'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-string">'ngMaterial'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-string">'mynewanimalfriend.controllers'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>])</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>.run([<span class="hljs-string">'$rootScope'</span>, <span class="hljs-string">'$location'</span>, <span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  $rootScope.$on(<span class="hljs-string">'$routeChangeStart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">if</span> (!Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      <span class="hljs-keyword">if</span> ($location.path() !== <span class="hljs-string">'/login'</span>) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>.config([<span class="hljs-string">'$httpProvider'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$httpProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'sessionInjector'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'authInterceptor'</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    controller: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    templateUrl: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    controller: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    controller: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    redirectTo: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="49"></td><td>});</td></table></code></pre>
<p>Note that we set it up to intercept the HTTP request with the session injector and the auth interceptor. Next we need to create these in <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">"angular-resource"</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.services'</span>, [<span class="hljs-string">'ngResource'</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>.factory(<span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-keyword">return</span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    setUser : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">aUser</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer '</span> + aUser);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    isLoggedIn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-keyword">var</span> user = localStorage.getItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">return</span>(user)? user : <span class="hljs-literal">false</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    logUserOut: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      localStorage.removeItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>})</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>.factory(<span class="hljs-string">'Token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/authenticate/'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>})</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>.factory(<span class="hljs-string">'sessionInjector'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  <span class="hljs-keyword">var</span> sessionInjector = {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    request: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="hljs-keyword">if</span> (Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        config.headers.Authorization = Auth.isLoggedIn();</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-keyword">return</span> config;</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  <span class="hljs-keyword">return</span> sessionInjector;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>})</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>.service(<span class="hljs-string">'authInterceptor'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$q, Auth, $location</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  <span class="hljs-keyword">var</span> service = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>  service.responseError = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-keyword">if</span> (response.status == <span class="hljs-number">400</span>) {</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-keyword">return</span> $q.reject(response);</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="49"></td><td>});</td></table></code></pre>
<p>I’ll walk you through these. <code>sessionInjector</code> adds the authorization HTTP header to every request to the server if the user is logged in, so that it returns the right user’s details. <code>authInterceptor</code> catches any 400 errors, denoting that the user is not authenticated with a current JSON web token, and logs the user out. In this way we can handle the expiry of a user’s token.</p>
<p>Now the logic of our app is in place, but that’s no use without some content…</p>
<h2 id="angular-templating">Angular templating</h2>
<p>We have one very basic HTML template, but that’s just a boilerplate for inserting the rest of our content. For the rest of the HTML we’ll need to load templates dynamically, and we’ll use Angular Material to help us build a nice UI quickly. Run the following commands to create the files:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir www/templates</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ touch www/templates/login.html</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ touch www/templates/home.html</td></table></code></pre>
<p>We need to import the CSS for Angular Material. Add this to <code>sass/style.scss</code>:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Angular Material</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"node_modules/angular-material/angular-material.scss"</span>;</td></table></code></pre>
<p>With that done, we need to configure theming in <code>main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./controllers'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-string">'ngMaterial'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-string">'mynewanimalfriend.controllers'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>])</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$mdThemingProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    $mdThemingProvider.theme(<span class="hljs-string">'default'</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      .primaryPalette(<span class="hljs-string">'purple'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      .accentPalette(<span class="hljs-string">'cyan'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>})</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>.run([<span class="hljs-string">'$rootScope'</span>, <span class="hljs-string">'$location'</span>, <span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  $rootScope.$on(<span class="hljs-string">'$routeChangeStart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">if</span> (!Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      <span class="hljs-keyword">if</span> ($location.path() !== <span class="hljs-string">'/login'</span>) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>.config([<span class="hljs-string">'$httpProvider'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$httpProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'sessionInjector'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'authInterceptor'</span>);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="39"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    controller: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    templateUrl: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    controller: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    templateUrl: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    controller: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    redirectTo: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="55"></td><td>});</td></table></code></pre>
<p>You may want to look at the <a href="https://material.angularjs.org/latest/Theming/01_introduction">documentation</a> for Angular Material to choose your own theme options. Next, let’s create our login template at <code>www/templates/login.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-content</span> <span class="hljs-attr">md-theme</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">layout-gt-sm</span>=<span class="hljs-string">"row"</span> <span class="hljs-attr">layout-padding</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.email"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.password"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-raised md-primary"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"doLogin()"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-content</span>&gt;</span></td></table></code></pre>
<p>We’re using Angular Material’s input and button directives to make our inputs look a bit nicer. Note that the <code>ng-click</code> handler calls the <code>doLogin()</code> method of our controller, and that the <code>ng-model</code> attributes contain the <code>credentials</code> object that gets passed to the API. If you haven’t used Angular before, <code>ng-model</code> essentially lets you bind a variable to an element’s value so, for instance, when an input is changed, it can be easily accessed via the variable.</p>
<p>Next, we’ll implement a placeholder for our home page with a log out button. Save this as <code>www/templates/home.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-toolbar-tools"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Log out"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#logout"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            Log out</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-toolbar</span>&gt;</span></td></table></code></pre>
<p>That should be all we need to demonstrate logging in and out of our app. Let’s try it out. First run the Gulp task to show the app in the browser:</p>
<pre><code class="hljs lang-bash singleline"><table>$ gulp</table></code></pre>
<p>Then, in another shell session, switch to the directory with the backend and run the server for that:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan serve</table></code></pre>
<p>You should already have a user account set up and ready to use thanks to the seeder we wrote. The browser should show the login page by default, and if you fill in the login form and click the button you should see the home page. You should then be able to log out again.</p>
<p>Congratulations! We’ve got authentication working.</p>
<h2 id="switching-to-html5-routing">Switching to HTML5 routing</h2>
<p>You may note that the URLs use hashes - they are in the format <code>http://localhost:5000/#/login</code>. Wouldn’t it be better if we didn’t use the hash? Fortunately modern browsers support this via the HTML5 pushState API, and Angular has built-in support for this.</p>
<p>To enable it, we first need to declare a base URL in <code>www/index.html</code>. Amend it as follows:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, user-scalable=0"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My New Animal Friend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">"mynewanimalfriend"</span> <span class="hljs-attr">ng-cloak</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></td></table></code></pre>
<p>Here we’ve added the <code>&lt;base href=&quot;/&quot;&gt;</code> tag to denote our base URL. Next we configure Angular to use HTML5 routing in <code>main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$locationProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $locationProvider.html5Mode(<span class="hljs-literal">true</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>})</td></table></code></pre>
<p>And amend the URL in the home template:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-toolbar-tools"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Log out"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            Log out</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-toolbar</span>&gt;</span></td></table></code></pre>
<p>Now, we should be using HTML5 routing throughout.</p>
<p>With that done, we can finish for today. We’ve got our basic app skeleton and authentication system up and running, and we’ll be in a good place to continue developing the rest of the app next time. I’ve put the source code on <a href="https://github.com/matthewbdaly/mynewanimalfriend-app">Github</a>, and you can find this lesson’s work under the <code>lesson-2</code> tag.</p>
<p>Next time we’ll develop the app further, including implementing the pet search functionality.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 1]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</guid>
            <pubDate>Sun, 11 Sep 2016 18:33:41 GMT</pubDate>
            <description><![CDATA[<p>A lot of my work over the last few years has been on Phonegap apps. Phonegap isn’t terribly hard to use, but the difference in context between that and a more conventional web app means that you have to move a lot of functionality to the client side, and unless you’ve used client-side Javascript frameworks before it can be a struggle.</p>
<p>In this series of tutorials I’ll show you how I might build a Phonegap app. The work involved will include:</p>
<ul>
<li>Building a REST API using Laravel to expose the data</li>
<li>Building an admin interface to manage the data</li>
<li>Building a Phonegap app using Angular.js</li>
<li>Testing and deploying it</li>
</ul>
<p>In the process we’ll cover issues like authentication, authorization, real-time notifications and working with REST APIs. Note that we won’t cover the app submission process - you can find plenty of resources on that. We will, however, be using Phonegap Build to build the app.</p>
<h2 id="the-brief">The brief</h2>
<p>Let’s say our new client is an animal shelter. The brief for the app is as follows:</p>
<blockquote>
<p>My New Animal Friend will be an app for finding a new pet. Once a user signs in, they’ll be able to choose what type of pet they’re looking for, then look through a list of pets available to adopt. They can reject them by swiping left or save them by swiping right. They can see more about the ones they swipe right on, and arrange to meet them, from within the app. Users can also message the staff to ask questions about a pet.</p>
</blockquote>
<p>Nice idea, but there’s a lot of work involved! Our very first task is to build the REST API, since everything else relies on that. Before starting, make sure you have the following installed:</p>
<ul>
<li>PHP (I’m using PHP 7, but 5.6 should be fine)</li>
<li>Composer</li>
<li>Git</li>
<li>A compatible relational database (I use PostgreSQL)</li>
<li>Redis</li>
<li>Your usual text editor</li>
<li>Node.js</li>
</ul>
<p>As long as you have this, you should be ready to go. Using <a href="https://laravel.com/docs/5.3/homestead">Homestead</a> is the simplest way to get started if you don’t have all this stuff already.</p>
<h2 id="starting-the-api">Starting the API</h2>
<p>To start building our REST API, run the following command from the shell:</p>
<pre><code class="hljs lang-bash singleline"><table>$ composer create-project --prefer-dist laravel/laravel mynewanimalfriend-backend</table></code></pre>
<p>We also have some other dependencies we need to install, so switch into the new directory and run the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ composer require barryvdh/laravel-cors tymon/jwt-auth predis/predis</table></code></pre>
<p>Next, we need to add the new packages to the Laravel config. Open up <code>config/app.php</code> and add the following to the <code>providers</code> array:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>   Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class,                                                                                                                                              </td><tr><td class="linenos" data-pseudo-content="2"></td><td>   Barryvdh\Cors\ServiceProvider::class,</td></table></code></pre>
<p>And the following to the <code>aliases</code> array:</p>
<pre><code class="hljs lang-php singleline"><table>   <span class="hljs-string">'JWTAuth'</span> =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,</table></code></pre>
<p>We also need to ensure that the CORS middleware is applied to all API routes. Open up <code>app/Http/Kernel.php</code> and under the <code>api</code> array in <code>protected $middlewareGroups</code> paste the following:</p>
<pre><code class="hljs lang-php singleline"><table>   \Barryvdh\Cors\HandleCors::class,</table></code></pre>
<p>Now that the packages are included, we can publish the files for them:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan vendor:publish</table></code></pre>
<p>Next, we need to set a key for our API authentication:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan jwt:generate</table></code></pre>
<p>And set a custom namespace:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan app:name AnimalFriend</table></code></pre>
<p>You’ll also want to set up the <code>.env</code> file with the configuration settings for your application. There’s one at <code>.env.example</code> by default that you can copy and customise. Then run the following command to generate the application key:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan key:generate</table></code></pre>
<p>I had to change the namespace for the user model in <code>config/jwt.php</code> as well:</p>
<pre><code class="hljs lang-php singleline"><table>    <span class="hljs-string">'user'</span> =&gt; <span class="hljs-string">'AnimalFriend\User'</span>,</table></code></pre>
<p>I also tend to amend the settings in <code>phpunit.xml</code> as follows so that it uses an in-memory SQLite database for tests:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"APP_ENV"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testing"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"SESSION_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"array"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"QUEUE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sync"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CACHE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"redis"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_CONNECTION"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlite"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_DATABASE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">":memory:"</span>/&gt;</span></td></table></code></pre>
<p>Also, delete <code>tests/ExampleTest.php</code> and amend <code>tests/TestCase.php</code> as follows in order to use database migrations in tests:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * The base URL to use while testing the application.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">protected</span> $baseUrl = <span class="hljs-string">'http://localhost'</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     * Creates the application.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Foundation\Application</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createApplication</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        $app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">return</span> $app;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>With that in place, we can start work on our API proper.</p>
<h2 id="authenticating-our-api">Authenticating our API</h2>
<p>We’re going to start out with a very limited subset of our API. First, we’ll implement the authentication for our app, then we’ll add the facility to view a list of pets or an individual pet. Other functionality will come later. This will be sufficient to get the app working.</p>
<p>First, we need to create our user model. As we’ll be practicing TDD throughout, we write a test for the user model first. Save the following as <code>tests/UserModelTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserModelTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test creating a user</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCreatingAUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Verify it works</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $saved = User::where(<span class="hljs-string">'email'</span>, <span class="hljs-string">'bob@example.com'</span>)-&gt;first();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;id, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;name, <span class="hljs-string">'bobsmith'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td>}</td></table></code></pre>
<p>If we run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>.                                                                   1 / 1 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 169 ms, Memory: 12.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (1 <span class="hljs-built_in">test</span>, 3 assertions)</td></table></code></pre>
<p>We already have a perfectly good <code>User</code> model and the appropriate migrations, so our test already passes.</p>
<p>Next, we need to implement the authentication system. Save this as <code>tests/AuthTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Test the auth</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAuth</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'password'</span> =&gt; bcrypt(<span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'email'</span> =&gt; $user-&gt;email,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'api/authenticate'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        $content = json_decode($response-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertTrue(array_key_exists(<span class="hljs-string">'token'</span>, $content));</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     * Test the auth when user does not exist</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAuthFailure</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment">// Create data for request</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="43"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'user@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'api/authenticate'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment">// Check the status code</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">401</span>);</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="51"></td><td>}</td></table></code></pre>
<p>The first test creates a user and sends an authentication request, then confirms that it returns the JSON Web Token. The second checks that a user that doesn’t exist cannot log in.</p>
<p>Let’s run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>FF.                                                                 3 / 3 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 328 ms, Memory: 14.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 2 failures:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) AuthTest::<span class="hljs-built_in">test</span>Auth</td><tr><td class="linenos" data-pseudo-content="11"></td><td>Expected status code 200, got 404.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Failed asserting that 404 matches expected 200.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:29</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>2) AuthTest::<span class="hljs-built_in">test</span>AuthFailure</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Expected status code 401, got 404.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Failed asserting that 404 matches expected 401.</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="22"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:49</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>FAILURES!</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Tests: 3, Assertions: 5, Failures: 2.</td></table></code></pre>
<p>With a failing test in place, we can implement login. First let’s create our controller at <code>app/Http/Controllers/AuthenticateController.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>\<span class="hljs-title">Controller</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">JWTAuth</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">JWTException</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticateController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">private</span> $user;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;user = $user;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment">// Get credentials</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        $credentials = $request-&gt;only(<span class="hljs-string">'email'</span>, <span class="hljs-string">'password'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">// Get user</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $user = <span class="hljs-keyword">$this</span>-&gt;user-&gt;where(<span class="hljs-string">'email'</span>, $credentials[<span class="hljs-string">'email'</span>])-&gt;first();</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">try</span> {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-comment">// attempt to verify the credentials and create a token for the user</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-keyword">if</span> (! $token = JWTAuth::attempt($credentials)) {</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'invalid_credentials'</span>], <span class="hljs-number">401</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        } <span class="hljs-keyword">catch</span> (JWTException $e) {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            <span class="hljs-comment">// something went wrong whilst attempting to encode the token</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'could_not_create_token'</span>], <span class="hljs-number">500</span>);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment">// all good so return the token</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json(compact(<span class="hljs-string">'token'</span>));</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="43"></td><td>}</td></table></code></pre>
<p>And we need to set up the route in <code>routes/api.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">/*</td><tr><td class="linenos" data-pseudo-content="6"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>| API Routes</td><tr><td class="linenos" data-pseudo-content="8"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="9"></td><td>|</td><tr><td class="linenos" data-pseudo-content="10"></td><td>| Here is where you can register API routes for your application. These</td><tr><td class="linenos" data-pseudo-content="11"></td><td>| routes are loaded by the RouteServiceProvider within a group which</td><tr><td class="linenos" data-pseudo-content="12"></td><td>| is assigned the "api" middleware group. Enjoy building your API!</td><tr><td class="linenos" data-pseudo-content="13"></td><td>|</td><tr><td class="linenos" data-pseudo-content="14"></td><td>*/</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>Route::post(<span class="hljs-string">'authenticate'</span>, <span class="hljs-string">'AuthenticateController@authenticate'</span>);</td></table></code></pre>
<p>Note that because it’s an API route, it’s automatically prefixed with <code>api/</code> without us having to do anything.</p>
<p>Now if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>...                                                                 3 / 3 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 402 ms, Memory: 14.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (3 tests, 6 assertions)</td></table></code></pre>
<p>Now we can obtain a JSON Web Token to authenticate users with. To start with we’ll only support existing users, but later we’ll add a method to sign up. However, we need at least one user to test with, so we’ll create a seeder for that at <code>database/seeds/UserTableSeeder.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTableSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Add user</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::table(<span class="hljs-string">'users'</span>)-&gt;insert([</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'password'</span> =&gt; Hash::make(<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>}</td></table></code></pre>
<p>You can run <code>php artisan make:seeder UserTableSeeder</code> to generate the file, or just paste it in. You also need to amend <code>database/seeds/DatabaseSeeder.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(UserTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>This ensures the seeder will actually be called. Then, run the following commands:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ php artisan db:seed</td></table></code></pre>
<p>That sets up our user in the database.</p>
<h2 id="adding-the-pets-endpoint">Adding the Pets endpoint</h2>
<p>Our next step is to add the pets model and endpoint. Our <code>Pet</code> model should have the following fields:</p>
<ul>
<li>ID</li>
<li>Timestamps (<code>created_at</code> and <code>updated_at</code>)</li>
<li>Name</li>
<li>Path to photo</li>
<li>Availability</li>
<li>Type (eg cat, dog)</li>
</ul>
<p>Let’s create a test for that model:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetModelTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test creating a pet</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCreatingAPet</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Verify it works</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $saved = Pet::where(<span class="hljs-string">'name'</span>, <span class="hljs-string">'Freddie'</span>)-&gt;first();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;id, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;name, <span class="hljs-string">'Freddie'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;type, <span class="hljs-string">'Cat'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;available, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;picture, <span class="hljs-string">'1.jpg'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>Save this as <code>tests/PetModelTest.php</code>. Then run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>..E.                                                                4 / 4 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 414 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There was 1 error:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetModelTest::<span class="hljs-built_in">test</span>CreatingAUser</td><tr><td class="linenos" data-pseudo-content="11"></td><td>InvalidArgumentException: Unable to locate factory with name [default] [AnimalFriend\Pet].</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:126</td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:2280</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:139</td><tr><td class="linenos" data-pseudo-content="16"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:106</td><tr><td class="linenos" data-pseudo-content="17"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:84</td><tr><td class="linenos" data-pseudo-content="18"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetModelTest.php:16</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>ERRORS!</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Tests: 4, Assertions: 6, Errors: 1.</td></table></code></pre>
<p>First we need to create a factory for creating a pet in <code>database/factories/ModelFactory.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$factory-&gt;define(AnimalFriend\Pet::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Faker\Generator $faker)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'name'</span> =&gt; $faker-&gt;firstNameMale,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'available'</span> =&gt; <span class="hljs-number">1</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'picture'</span> =&gt; <span class="hljs-string">'1.jpg'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="8"></td><td>});</td></table></code></pre>
<p>Then, we create the model:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:model Pet</table></code></pre>
<p>Next, we create a migration for the <code>Pet</code> model:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan make:migration create_pets_table</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Created Migration: 2016_09_11_145010_create_pets_table</td></table></code></pre>
<p>And paste in the following code:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePetsTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'pets'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;string(<span class="hljs-string">'type'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            $table-&gt;string(<span class="hljs-string">'available'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            $table-&gt;string(<span class="hljs-string">'picture'</span>)-&gt;nullable();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        Schema::drop(<span class="hljs-string">'pets'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>}</td></table></code></pre>
<p>Time to run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>....                                                                4 / 4 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 412 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (4 tests, 12 assertions)</td></table></code></pre>
<p>With that done, we can start work on implementing the endpoint. We need to check that unauthorised users cannot retrieve the data, and that authorised users can. First, let’s create <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Test fetching pets when unauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetsWhenUnauthorised</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">400</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * Test fetching pets when authorised</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPets</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets'</span>, [], $headers)</td><tr><td class="linenos" data-pseudo-content="57"></td><td>            -&gt;seeJsonStructure([</td><tr><td class="linenos" data-pseudo-content="58"></td><td>                <span class="hljs-string">'*'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="59"></td><td>                    <span class="hljs-string">'id'</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>                    <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>                    <span class="hljs-string">'type'</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>                    <span class="hljs-string">'available'</span>,</td><tr><td class="linenos" data-pseudo-content="63"></td><td>                    <span class="hljs-string">'picture'</span>,</td><tr><td class="linenos" data-pseudo-content="64"></td><td>                    <span class="hljs-string">'created_at'</span>,</td><tr><td class="linenos" data-pseudo-content="65"></td><td>                    <span class="hljs-string">'updated_at'</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>                ]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            ]);</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="70"></td><td>}</td></table></code></pre>
<p>First, we create a pet, make an HTTP request to <code>/api/pets</code>, and check we are not authorised. Next, we do the same, but also create a user and a JSON Web Token, and pass the token through in the request. Then we verify the response data and that it was successful.</p>
<p>Let’s run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>..FF..                                                              6 / 6 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 509 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 2 failures:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPetsWhenUnauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>Expected status code 400, got 404.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Failed asserting that 404 matches expected 400.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:25</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>2) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPets</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Failed asserting that null is of <span class="hljs-built_in">type</span> <span class="hljs-string">"array"</span>.</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:295</td><tr><td class="linenos" data-pseudo-content="21"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:67</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>FAILURES!</td><tr><td class="linenos" data-pseudo-content="24"></td><td>Tests: 6, Assertions: 17, Failures: 2.</td></table></code></pre>
<p>That looks correct, so we can start building our endpoint. We can generate a boilerplate for it as follows:</p>
<pre><code class="hljs lang-bash singleline"><table>$ $ php artisan make:controller PetController --resource</table></code></pre>
<p>Note the <code>--resource</code> flag - this tells Laravel to set it up to be a RESTful controller with certain predefined functions. Next, let’s amend the new file at <code>app\Http\Controllers/PetController.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">private</span> $pet;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Pet $pet)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;pet = $pet;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment">// Get all pets</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        $pets = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;get();</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($pets, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}</td></table></code></pre>
<p>This implements an index route that shows all pets. Next, we hook up the route in <code>routes/api.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Auth routes</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Route::group([<span class="hljs-string">'middleware'</span> =&gt; [<span class="hljs-string">'jwt.auth'</span>]], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Route::resource(<span class="hljs-string">'pets'</span>, <span class="hljs-string">'PetController'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>});</td></table></code></pre>
<p>Note that we wrap this resource in the <code>jwt.auth</code> middleware to prevent access by unauthorised users. Implementing this as middleware makes it very easy to reuse. Also note that we can specify it as a resource, meaning we don’t have to explicitly hook up each route to a controller method.</p>
<p>Let’s run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>..EE..                                                              6 / 6 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 511 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 2 errors:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPetsWhenUnauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>ReflectionException: Class jwt.auth does not exist</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734</td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709</td><tr><td class="linenos" data-pseudo-content="16"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173</td><tr><td class="linenos" data-pseudo-content="17"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517</td><tr><td class="linenos" data-pseudo-content="18"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:24</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>2) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPets</td><tr><td class="linenos" data-pseudo-content="21"></td><td>ReflectionException: Class jwt.auth does not exist</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734</td><tr><td class="linenos" data-pseudo-content="24"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629</td><tr><td class="linenos" data-pseudo-content="25"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709</td><tr><td class="linenos" data-pseudo-content="26"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173</td><tr><td class="linenos" data-pseudo-content="27"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517</td><tr><td class="linenos" data-pseudo-content="28"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:72</td><tr><td class="linenos" data-pseudo-content="29"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:56</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>ERRORS!</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Tests: 6, Assertions: 15, Errors: 2.</td></table></code></pre>
<p>Looks like JWT isn’t configured correctly. We can fix that in <code>app/Http/Kernel.php</code> by adding it to <code>$routeMiddleware</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-string">'jwt.auth'</span> =&gt; <span class="hljs-string">'Tymon\JWTAuth\Middleware\GetUserFromToken'</span>,</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-string">'jwt.refresh'</span> =&gt; <span class="hljs-string">'Tymon\JWTAuth\Middleware\RefreshToken'</span>,</td></table></code></pre>
<p>And run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>......                                                              6 / 6 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 514 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (6 tests, 25 assertions)</td></table></code></pre>
<p>Our final task for today on the API is building a route for fetching a single pet. Our tests need to handle three situations:</p>
<ul>
<li>An unauthorised request</li>
<li>A request for a pet that does not exist</li>
<li>A request for a pet that does exist</li>
</ul>
<p>Add these methods to <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="2"></td><td>     * Test fetching pet when unauthorised</td><tr><td class="linenos" data-pseudo-content="3"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="4"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="5"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetWhenUnauthorised</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Send request</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/'</span>.$pet-&gt;id);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">400</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Test fetching pet which does not exist</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetDoesNotExist</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/1'</span>, [], $headers);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">404</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="46"></td><td>     * Test fetching pet when authorised</td><tr><td class="linenos" data-pseudo-content="47"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="48"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="49"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPet</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="54"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="55"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="61"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/'</span>.$pet-&gt;id, [], $headers)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>            -&gt;seeJsonStructure([</td><tr><td class="linenos" data-pseudo-content="75"></td><td>                <span class="hljs-string">'id'</span>,</td><tr><td class="linenos" data-pseudo-content="76"></td><td>                <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="77"></td><td>                <span class="hljs-string">'type'</span>,</td><tr><td class="linenos" data-pseudo-content="78"></td><td>                <span class="hljs-string">'available'</span>,</td><tr><td class="linenos" data-pseudo-content="79"></td><td>                <span class="hljs-string">'picture'</span>,</td><tr><td class="linenos" data-pseudo-content="80"></td><td>                <span class="hljs-string">'created_at'</span>,</td><tr><td class="linenos" data-pseudo-content="81"></td><td>                <span class="hljs-string">'updated_at'</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>            ]);</td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="84"></td><td>    }</td></table></code></pre>
<p>Let’s check our tests fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>.....FE..                                                           9 / 9 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 974 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There was 1 error:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPet</td><tr><td class="linenos" data-pseudo-content="11"></td><td>PHPUnit_Framework_Exception: Argument <span class="hljs-comment">#2 (No Value) of PHPUnit_Framework_Assert::assertArrayHasKey() must be a array or ArrayAccess</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:304</td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:145</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>--</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>There was 1 failure:</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPetDoesNotExist</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Expected status code 404, got 400.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Failed asserting that 400 matches expected 404.</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="25"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:112</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>ERRORS!</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Tests: 9, Assertions: 31, Errors: 1, Failures: 1.</td></table></code></pre>
<p>Now, we already have the <code>show()</code> method hooked up by default, so we just have to implement it in <code>app/Http/Controllers/PetController.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="2"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="4"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="5"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="6"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Get pet</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $pet = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($pet, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td></table></code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>.........                                                           9 / 9 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 693 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (9 tests, 39 assertions)</td></table></code></pre>
<p>Now we have all the endpoints we need to get started with the app. You can find the source code for this backend on <a href="https://github.com/matthewbdaly/mynewanimalfriend-backend">Github</a> - check out the <code>lesson-1</code> tag.</p>
<p>That seems like a good place to stop for now. We have our first pass at the back end. It’s not complete by any means, but it’s a good start, and is sufficient for us to get some basic functionality up and running in the app. In the next instalment we’ll start working with Phonegap to build the first pass at the app itself. Later instalments will see us working with both the app and backend to build it into a more useful whole.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Deploying new versions of a Laravel app with Fabric]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/</guid>
            <pubDate>Mon, 05 Sep 2016 21:22:16 GMT</pubDate>
            <description><![CDATA[<p><a href="https://laravel.com/docs/5.3/envoy">Envoy</a> is the official way to run tasks on a remote server for Laravel apps. A typical Envoy task for deploying a new version might look like this:</p>
<pre><code class="hljs lang-blade"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-variable">@servers</span>([<span class="hljs-string">'web'</span> =&gt; <span class="hljs-string">'matthew@server1.example.com'</span>])</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-variable">@task</span>(<span class="hljs-string">'deploy'</span>, [<span class="hljs-string">'on'</span> =&gt; <span class="hljs-string">'web'</span>])</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    cd /var/www</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    sudo chown -R <span class="hljs-attribute">matthew</span>:matthew .</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    git pull origin master</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    php artisan migrate</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    php artisan <span class="hljs-attribute">view</span>:clear</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    composer dump-autoload</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    sudo chown -R <span class="hljs-attribute">www-data</span>:www-data .</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    sudo supervisorctl restart mail-queue</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-variable">@endtask</span></td></table></code></pre>
<p>This would be defined in <code>Envoy.blade.php</code>. With this in place, and Envoy set up globally, you can then run <code>envoy run deploy</code> to run the <code>deploy</code> command.</p>
<p>However, Envoy requires the PHP SSH library, which I haven’t been able to get working with PHP 7. Fortunately I was already familiar with <a href="http://www.fabfile.org/">Fabric</a>, which makes an excellent alternative as long as you don’t mind writing the task in Python.</p>
<p>The same kind of task might look like this in a Fabric script, saved as <code>fabfile.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">#!/usr/bin/env python</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> fabric.api <span class="hljs-keyword">import</span> local, env, run, sudo</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> fabric.context_managers <span class="hljs-keyword">import</span> cd, prefix</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>env.hosts = [<span class="hljs-string">'server1.example.com'</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>env.path = <span class="hljs-string">"/var/www"</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>env.user = <span class="hljs-string">"matthew"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>env.password = <span class="hljs-string">"password"</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># Or...</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>env.key_filename = <span class="hljs-string">'/path/to/ssh/key'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy</span><span class="hljs-params">()</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    Deploy the latest version</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># Push changes to Bitbucket</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    local(<span class="hljs-string">"git push origin master"</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment"># Switch to project directory</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">with</span> cd(env.path):</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Change owner</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        sudo(<span class="hljs-string">'chown -R matthew:matthew .'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Pull changes to server</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        run(<span class="hljs-string">'git pull origin master'</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Run migrations</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        run(<span class="hljs-string">'php artisan migrate'</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Clear cached files</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        run(<span class="hljs-string">'php artisan view:clear'</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        run(<span class="hljs-string">'composer dump-autoload'</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment"># Change owner back</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        sudo(<span class="hljs-string">'chown -R www-data:www-data .'</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment"># restart mail queue</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        sudo(<span class="hljs-string">'supervisorctl restart mail-queue'</span>)</td></table></code></pre>
<p>Then, assuming Fabric is already installed locally, you can run <code>fab deploy</code> to push up the latest revision.</p>
<p>Either of these solutions will do a fine job of deploying your app. If you do need to store user-specific data in your Fabric script, it’s probably prudent to keep it out of version control.</p>
<p>Whichever way you choose, it’s a really good idea to do what you can to automate deployment. It can be a boring, repetitive job, and both of these solutions make it much easier.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Maintaining your CV with Markdown and Emacs]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/08/29/maintaining-your-cv-with-markdown-and-emacs/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/08/29/maintaining-your-cv-with-markdown-and-emacs/</guid>
            <pubDate>Mon, 29 Aug 2016 15:40:08 GMT</pubDate>
            <description><![CDATA[<p>I’ve recently been jobhunting, so that has meant having to update my CV. Fortunately, I’ve got into the habit of keeping it up to date easily by writing it in Markdown and generating it in the required format on demand. That way I can easily convert it to HTML, PDF or Microsoft DocX format as and when I need it. I thought I’d share this method as it works very well for me.</p>
<h2 id="maintaining-your-cv-in-emacs-">Maintaining your CV in Emacs?</h2>
<p>Yes, you read that right! Although I’m a die-hard Vim user, I do use Emacs for a few things. One of them is time-tracking using <code>org-mode</code>, and another is maintaining my CV.</p>
<p>First of all you’ll need to install <code>pandoc</code>, <code>texlive</code> and <code>markdown</code>. On Ubuntu this is easily done using <code>apt-get</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo apt-get install pandoc markdown texlive</table></code></pre>
<p>You’ll also need to install Emacs and the appropriate packages, namely <code>markdown-mode</code> and <code>markdown-mode+</code>. To do so, first ensure this is in your <code>.emacs.d/init.el</code>:</p>
<pre><code class="hljs lang-lisp"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(<span class="hljs-name">require</span> 'package)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>(<span class="hljs-name">add-to-list</span> 'package-archives '(<span class="hljs-string">"melpa"</span> . <span class="hljs-string">"http://melpa.org/packages/"</span>))</td><tr><td class="linenos" data-pseudo-content="3"></td><td>(<span class="hljs-name">package-initialize</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">;; Markdown support</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>(<span class="hljs-name">require</span> 'markdown-mode)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>(<span class="hljs-name">require</span> 'markdown-mode+)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>(<span class="hljs-name">setq</span> markdown-command <span class="hljs-string">"/usr/bin/markdown"</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>(<span class="hljs-name">add-to-list</span> 'auto-mode-alist '(<span class="hljs-string">"\\.markdown$"</span> . markdown-mode))</td><tr><td class="linenos" data-pseudo-content="10"></td><td>(<span class="hljs-name">add-to-list</span> 'auto-mode-alist '(<span class="hljs-string">"\\.md$"</span> . markdown-mode))</td><tr><td class="linenos" data-pseudo-content="11"></td><td>(<span class="hljs-name">setq</span> markdown-css-paths `(,(expand-file-name <span class="hljs-string">"Documents/markdown.css"</span>)))</td></table></code></pre>
<p>Then fire up Emacs, ignoring the warnings you get, and run <code>M-x package-list-packages</code> to load the list of available packages. I’ll leave navigating and installing this list of packages to you, but once they’re done you should have everything you need.</p>
<p>This assumes the stylesheet you wish to use is at <code>~/Documents/markdown.css</code> - adjust the path if necessary. You may also need to amend the path to your Markdown install if the location differs. You can put what you like in the stylesheet, but my advice is to keep it as simple as you can - it’s your CV, not a web page. Here’s what I use:</p>
<pre><code class="hljs lang-css"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-selector-tag">body</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"Helvetica Neue"</span>, Helvetica, Arial, sans-serif;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute">margin</span>: auto;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffffff</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-selector-tag">h2</span> {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#757575</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attribute">text-align</span>: center;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>}</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-selector-tag">h1</span> {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">55px</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#757575</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">text-align</span>: center;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>}</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-selector-tag">hr</span> {</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> {</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">list-style-type</span>: disc;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td><span class="hljs-selector-tag">blockquote</span> {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-attribute">text-align</span>: center;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>}</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>, <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-attribute">text-decoration</span>: none;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td><span class="hljs-selector-tag">code</span> {</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-attribute">white-space</span>: pre-wrap;</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attribute">word-wrap</span>: break-word;</td><tr><td class="linenos" data-pseudo-content="43"></td><td>}</td></table></code></pre>
<p>Next, we write our CV in Markdown. Here’s a sample one based on mine:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">James Smith</td><tr><td class="linenos" data-pseudo-content="2"></td><td>============</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-section">About me</td><tr><td class="linenos" data-pseudo-content="5"></td><td>--------</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>I'm a full-stack web developer. I have built a wide variety of web applications (including single-page web apps), content based sites and REST APIs.</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>---</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">Skills</td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">* </span>HTML5</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-bullet">* </span>CSS, Sass and Compass</td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-bullet">* </span>Javascript, including Angular.js</td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-bullet">* </span>PHP, including Laravel and Lumen</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>---</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-section">Employment</td><tr><td class="linenos" data-pseudo-content="21"></td><td>----------</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-strong">**Agency ltd**</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>June 2014 - present</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>I worked for a busy digital agency, building custom web apps using Laravel and Angular.js</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>---</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-section">Education</td><tr><td class="linenos" data-pseudo-content="31"></td><td>----------</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td><span class="hljs-bullet">* </span><span class="hljs-strong">**2009-2014 My Secondary School, London**</span> - 7 GCSEs:</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>---</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-section">Hobbies and Interests</td><tr><td class="linenos" data-pseudo-content="38"></td><td>---------------------</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>Real ale, learning more about webdev, reading, socialising.</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>---</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td><span class="hljs-section">Contact</td><tr><td class="linenos" data-pseudo-content="45"></td><td>-------</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td><span class="hljs-quote">&gt; **Mobile:** 01234 567890</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td><span class="hljs-quote">&gt; **[Email](mailto:user@example.com)** - **[Website](http://www.example.com)** - **[GitHub](https://github.com/username)**</span></td></table></code></pre>
<p>Now, if you save this file as something like <code>cv.md</code> and then open it up in Emacs, you should be able to preview it in your browser with <code>C-c C-c p</code>. Nice, huh? To export it to HTML, run <code>C-c C-c v</code> instead.</p>
<p>What if you want to view it in other formats? Say a potential employer is asking for your CV in Microsoft DocX format (ugh…)? Just run this command in the shell:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pandoc <span class="hljs-_">-s</span> -S cv.md -o cv.docx</table></code></pre>
<p>Or how about PDF?</p>
<pre><code class="hljs lang-bash singleline"><table>$ pandoc <span class="hljs-_">-s</span> -S cv.md -o cv.pdf</table></code></pre>
<p>Using this method it’s straightforward to maintain a single master copy of your CV which you can then convert to other formats on demand.</p>
<h2 id="keeping-your-cv-backed-up">Keeping your CV backed up</h2>
<p>If you want to keep your CV safe, there’s a couple of ways to do it. One is to keep it in a Git or Mercurial repository, and another is to use Dropbox to keep it in sync. I tend to use the latter approach, although I’m considering switching to the former. If you wanted to generate the various versions automatically, you could set up a hook to generate the various versions using Pandoc during the commit process.</p>
<p>I used to hate updating my CV, but that was largely because I left it too long, and often had nothing much to put on it. Nowadays I’m often learning something new so I quite often have reason to update it to reflect that, and adopting this workflow has made things a lot easier.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Creating a personal dashboard with React and Webpack]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/08/15/creating-a-personal-dashboard-with-react-and-webpack/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/08/15/creating-a-personal-dashboard-with-react-and-webpack/</guid>
            <pubDate>Mon, 15 Aug 2016 22:18:00 GMT</pubDate>
            <description><![CDATA[<p>The Raspberry Pi is a great device for running simple web apps at home on a permanent basis, and you can pick up a small touchscreen for it quite cheaply. This makes it easy to build and host a small personal dashboard that pulls important data from various APIs or RSS feeds and displays it. You’ll often see dashboards like this on Raspberry Pi forums and subreddits. As I’m currently between jobs, and have some time to spare before my new job starts, I decided to start creating my own version of it. It was obvious that React.js is a good fit for this as it allows you to break up your user interface into multiple independent components and keep the functionality close to the UI. It also makes it easy to reuse widgets by passing different parameters through each time.</p>
<p>In this tutorial I’ll show you how to start building a simple personal dashboard using React and Webpack. You can then install Nginx on your Raspberry Pi and host it from there. In the process, you’ll be able to pick up a bit of knowledge about Webpack and ECMAScript 2015 (using Babel). Our initial implementation will have only two widgets, a clock and a feed, but those should show you enough of the basics that you should then be able to build other widgets you may have in mind.</p>
<h2 id="installing-our-dependencies">Installing our dependencies</h2>
<p>First, let’s create our <code>package.json</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm init -y</table></code></pre>
<p>Then install the dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install --save-dev babel-cli babel-register babel-core babel-eslint babel-loader babel-preset-es2015 babel-preset-react chai css-loader eslint eslint-loader eslint-plugin-react file-loader istanbul@^1.0.0-alpha.2 jquery jsdom mocha moment node-sass react react-addons-pure-render-mixin react-addons-test-utils react-dom react-hot-loader request sass-loader style-loader url-loader webpack webpack-dev-server</table></code></pre>
<p>Note that we need to install a specific version of Istanbul to get code coverage.</p>
<p>Next, we create our Webpack config. Save this as <code>webpack.config.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);  </td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-built_in">module</span>.exports = {  </td><tr><td class="linenos" data-pseudo-content="3"></td><td>    entry: [</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      <span class="hljs-string">'webpack/hot/only-dev-server'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-string">"./js/app.js"</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    ],</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    debug: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    devtool: <span class="hljs-string">'source-map'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    output: {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        path: __dirname + <span class="hljs-string">'/static'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        filename: <span class="hljs-string">"bundle.js"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">module</span>: {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        preLoaders: [</td><tr><td class="linenos" data-pseudo-content="15"></td><td>          {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            test: <span class="hljs-regexp">/(\.js$|\.jsx$)/</span>, </td><tr><td class="linenos" data-pseudo-content="17"></td><td>            exclude: <span class="hljs-regexp">/node_modules/</span>, </td><tr><td class="linenos" data-pseudo-content="18"></td><td>            loader: <span class="hljs-string">"eslint-loader"</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>          }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        loaders: [</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            { test: <span class="hljs-regexp">/\.jsx?$/</span>, loaders: [<span class="hljs-string">'react-hot'</span>, <span class="hljs-string">'babel'</span>], exclude: <span class="hljs-regexp">/node_modules/</span> },</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            { test: <span class="hljs-regexp">/\.js$/</span>, exclude: <span class="hljs-regexp">/node_modules/</span>, loader: <span class="hljs-string">'babel-loader'</span>},</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            { test: <span class="hljs-regexp">/\.woff2?$/</span>, loader: <span class="hljs-string">"url-loader?limit=25000"</span> },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            { test: <span class="hljs-regexp">/\.(eot|svg|ttf)?$/</span>, loader: <span class="hljs-string">"file-loader"</span> },</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            { test: <span class="hljs-regexp">/\.scss$/</span>, loader: <span class="hljs-string">"style!css!sass"</span> }</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        ]</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    eslint: {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      configFile: <span class="hljs-string">'.eslintrc.yml'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    plugins: [</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin(),</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      <span class="hljs-keyword">new</span> webpack.NoErrorsPlugin()</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="36"></td><td>};</td></table></code></pre>
<p>Note the various loaders we’re using. We use ESLint to lint our Javascript files for code quality, and the build will fail if they do not match the required standards. We’re also using loaders for CSS, Sass, Babel (so we can use ES2015 for our Javascript) and fonts. Also, note the hot module replacement plugin - this allows us to reload the application automatically. If you haven’t used Webpack before, this config should be sufficient to get you started, but I recommend reading the <a href="https://webpack.github.io/">documentation</a>.</p>
<p>We also need to configure ESLint how we want. Here is the configuration we will be using, which should be saved as <code>.eslintrc.yml</code>:</p>
<pre><code class="hljs lang-yaml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attr">rules:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">  no-debugger:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">  no-console:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">  no-unused-vars:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attr">  indent:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-attr">  quotes:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">    -</span> single</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-attr">  linebreak-style:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-bullet">    -</span> unix</td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-attr">  semi:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-bullet">    -</span> always</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-attr">env:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-attr">  es6:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-attr">  browser:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-attr">  node:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-attr">extends:</span> <span class="hljs-string">'eslint:recommended'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-attr">parserOptions:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-attr">  sourceType:</span> module</td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-attr">  ecmaFeatures:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-attr">    jsx:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-attr">    experimentalObjectRestSpread:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-attr">    modules:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td><span class="hljs-attr">plugins:</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-bullet">  -</span> react</td></table></code></pre>
<p>We also need a base HTML file. Save this as <code>index.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;!doctype html&gt;</span>  </td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>  </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Personal Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></td></table></code></pre>
<p>We also need to set the commands for building and testing our app in <code>package.json</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  "scripts": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    "test": "istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js 'test/**/*.@(js|jsx)'",</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    "test:watch": "npm run test -- --watch",</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    "start": "webpack-dev-server --progress --colors",</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    "build": "webpack --progress --colors"</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  "babel": {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    "presets": [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      "es2015",</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      "react"</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  },</td></table></code></pre>
<p>The <code>npm test</code> command will call Mocha to run the tests, but will also use Istanbul to generate test coverage. For the sake of brevity, our tests won’t be terribly comprehensive. The <code>npm start</code> command will run a development server, while <code>npm run build</code> will build our application.</p>
<p>We also need to create the <code>test/</code> folder and the <code>test/setup.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> jsdom <span class="hljs-keyword">from</span> <span class="hljs-string">'jsdom'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> chai <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">const</span> doc = jsdom.jsdom(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">const</span> win = doc.defaultView;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>global.document = doc;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>global.window = win;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">window</span>).forEach((key) =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> global)) {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    global[key] = <span class="hljs-built_in">window</span>[key];</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>});</td></table></code></pre>
<p>This sets up Chai and creates a dummy DOM for our tests. We also need to create the folder <code>js/</code> and the file <code>js/app.js</code>. You can leave that file empty for now.</p>
<p>If you now run <code>npm start</code> and navigate to <a href="http://localhost:8080/webpack-dev-server/">http://localhost:8080/webpack-dev-server/</a>, you can see the current state of the application.</p>
<h2 id="our-dashboard-component">Our dashboard component</h2>
<p>Our first React component will be a wrapper for all the other ones. Each of the rest of the components will be a self-contained widget that will populate itself without the need for a centralized data store like Redux. I will mention that Redux is a very useful library, and for larger React applications it makes a lot of sense to use it, but here we’re better off having each widget manage its own data internally, rather than have it be passed down from a single data store.</p>
<p>Save the following as <code>test/components/dashboard.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> TestUtils <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-test-utils'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> {findDOMNode} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> Dashboard <span class="hljs-keyword">from</span> <span class="hljs-string">'../../js/components/dashboard'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>describe(<span class="hljs-string">'Dashboard'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  it(<span class="hljs-string">'renders the dashboard'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> component = renderIntoDocument(</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dashboard</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"My Dashboard"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    const title = findDOMNode(component.refs.title);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    expect(title).to.be.ok;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    expect(title.textContent).to.contain('My Dashboard');</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="18"></td><td>}</span></td></table></code></pre>
<p>This tests that we can set the title of our dashboard component. Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td><tr><td class="linenos" data-pseudo-content="7"></td><td>module.js:327</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    throw err;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ^</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Error: Cannot find module <span class="hljs-string">'../../js/components/dashboard'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    at Function.Module._resolveFilename (module.js:325:15)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    at Function.Module._load (module.js:276:25)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    at Module.require (module.js:353:17)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    at require (internal/module.js:12:17)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    at Object.&lt;anonymous&gt; (dashboard.js:4:1)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    at Module._compile (module.js:409:26)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    at loader (/home/matthew/Projects/personal-dashboard/node_modules/babel-register/lib/node.js:148:5)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    at Object.require.extensions.(anonymous <span class="hljs-keyword">function</span>) [as .js] (/home/matthew/Projects/personal-dashboard/node_modules/babel-register/lib/node.js:158:7)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    at Module.load (module.js:343:32)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    at Function.Module._load (module.js:300:12)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    at Module.require (module.js:353:17)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    at require (internal/module.js:12:17)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:220:27</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    at Array.forEach (native)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    at Mocha.loadFiles (/home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:217:14)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    at Mocha.run (/home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:485:10)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    at Object.&lt;anonymous&gt; (/home/matthew/Projects/personal-dashboard/node_modules/mocha/bin/_mocha:403:18)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    at Module._compile (module.js:409:26)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    at Object.Module._extensions..js (module.js:416:10)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    at Object.Module._extensions.(anonymous <span class="hljs-keyword">function</span>) (/home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/hook.js:109:37)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    at Module.load (module.js:343:32)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    at Function.Module._load (module.js:300:12)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    at Function.Module.runMain (module.js:441:10)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    at runFn (/home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/<span class="hljs-built_in">command</span>/common/run-with-cover.js:122:16)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/<span class="hljs-built_in">command</span>/common/run-with-cover.js:251:17</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/util/file-matcher.js:68:16</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:52:16</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:361:13</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:52:16</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    at <span class="hljs-keyword">done</span> (/home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:246:17)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:44:16</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:358:17</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    at LOOP (fs.js:1530:14)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    at nextTickCallbackWith0Args (node.js:420:9)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    at process._tickCallback (node.js:349:13)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>Our dashboard file doesn’t exist. So let’s create it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir js/components</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ touch js/components/dashboard.js</td></table></code></pre>
<p>And run our test again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components).</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    1) renders the dashboard</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>  0 passing (31ms)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  1 failing</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  1) Dashboard renders the dashboard:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at Context.&lt;anonymous&gt; (dashboard.js:11:23)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td><tr><td class="linenos" data-pseudo-content="38"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>Now we have a failing test, we can create our component. Save this as <code>js/components/dashboard.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"dashboard"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"title"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td></table></code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ renders the dashboard</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  1 passing (50ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td></table></code></pre>
<p>Our first component is in place. However, it isn’t getting loaded. We also need to start thinking about styling. Create the file <code>scss/style.scss</code>, but leave it blank for now. Then save this in <code>js/app.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> Dashboard <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/dashboard'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'../scss/style.scss'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>ReactDOM.render(</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dashboard</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"My Dashboard"</span> /&gt;</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  document.getElementById('view')</td><tr><td class="linenos" data-pseudo-content="9"></td><td>);</span></td></table></code></pre>
<p>Note that we’re importing CSS or Sass files in the same way as Javascript files. This is unique to Webpack, and while it takes a bit of getting used to, it has its advantages - if you import only the styles relating to each component, you can be sure there’s no orphaned CSS files. Here, we only have one CSS file anyway, so it’s a non-issue.</p>
<p>If you now run <code>npm start</code>, our dashboard gets loaded and the title is displayed. With our dashboard in place, we can now implement our first widget.</p>
<h2 id="creating-the-clock-widget">Creating the clock widget</h2>
<p>Our first widget will be a simple clock. This demonstrates changing the state of the widget on an interval. First let’s write a test - save this as <code>test/components/clockwidget.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> TestUtils <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-test-utils'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> {findDOMNode} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'../../js/components/clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>describe(<span class="hljs-string">'Clock Widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  it(<span class="hljs-string">'renders the clock widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-number">1465160300530</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">const</span> component = renderIntoDocument(</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ClockWidget</span> <span class="hljs-attr">time</span>=<span class="hljs-string">{currentTime}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    const time = findDOMNode(component.refs.time);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    expect(time).to.be.ok;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    expect(time.textContent).to.contain('Sunday');</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>});</span></td></table></code></pre>
<p>And create an empty file at <code>js/components/clockwidget.js</code>. Then we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Clock Widget</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components).</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    1) renders the clock widget</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    ✓ renders the dashboard</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  1 passing (46ms)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  1 failing</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  1) Clock Widget renders the clock widget:</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>      at Context.&lt;anonymous&gt; (clockwidget.js:12:23)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td><tr><td class="linenos" data-pseudo-content="41"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>With a failing test in place, we can create our component:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">'moment'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  getInitialState() {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      time: <span class="hljs-keyword">this</span>.props.time || moment()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> time = moment(<span class="hljs-keyword">this</span>.state.time).format(<span class="hljs-string">'dddd, Do MMMM YYYY, h:mm:ss a'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"clockwidget widget"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"widget-content"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"time"</span>&gt;</span>{time}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>});</td></table></code></pre>
<p>Note that the component accepts a property of <code>time</code>. The <code>getInitialState()</code> method then converts <code>this.props.time</code> into <code>this.state.time</code> so that it can be displayed on render. Note we also set a default of the current time using Moment.js.</p>
<p>We also need to update the dashboard component to load this new component:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"dashboard"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"title"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">ClockWidget</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>});</span></td></table></code></pre>
<p>Now, if you try running <code>npm start</code> and viewing the dashboard in the browser, you will see that it displays the current time and date, but it’s not being updated. You can force the page to reload every now and then, but we can do better than that. We can set an interval in which the time will refresh. As the smallest unit we show is seconds, this interval should be 1 second.</p>
<p>Amend the clock component as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">'moment'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  getInitialState() {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      time: <span class="hljs-keyword">this</span>.props.time || moment()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  tick() {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">this</span>.setState({</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      time: moment()</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  componentDidMount() {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">this</span>.interval = setInterval(<span class="hljs-keyword">this</span>.tick, <span class="hljs-number">1000</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  componentWillUnmount() {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    clearInterval(<span class="hljs-keyword">this</span>.interval);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">const</span> time = moment(<span class="hljs-keyword">this</span>.state.time).format(<span class="hljs-string">'dddd, Do MMMM YYYY, h:mm:ss a'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"clockwidget widget"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"widget-content"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"time"</span>&gt;</span>{time}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>});</td></table></code></pre>
<p>When our component has mounted, we set an interval of 1,000 milliseconds, and each time it elapses we call the <code>tick()</code> method. This method sets the state to the current time, and as a result the user interface is automatically re-rendered. On unmount, we clear the interval.</p>
<p>In this case we’re just calling a single function on a set interval. In principle, the same approach can be used to populate components in other ways, such as by making an AJAX request.</p>
<h2 id="creating-an-rss-widget">Creating an RSS widget</h2>
<p>Our next widget will be a simple RSS feed reader. We’ll fetch the content with jQuery and render it using React. We’ll also reload it regularly. First, let’s create our test:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> TestUtils <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-test-utils'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> {findDOMNode} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> FeedWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'../../js/components/feedwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>describe(<span class="hljs-string">'Feed Widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  it(<span class="hljs-string">'renders the Feed widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">"http://feeds.bbci.co.uk/news/rss.xml?edition=uk"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">const</span> component = renderIntoDocument(</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FeedWidget</span> <span class="hljs-attr">feed</span>=<span class="hljs-string">{url}</span> <span class="hljs-attr">size</span>=<span class="hljs-string">{5}</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">{60}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    const feed = findDOMNode(component.refs.feed);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    expect(feed).to.be.ok;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    expect(feed.textContent).to.contain(url);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>});</span></td></table></code></pre>
<p>Our feed widget will accept an external URL as an argument, and will then poll this URL regularly to populate the feed. It also allows us to specify the <code>size</code> attribute, which denotes the number of feed items, and the <code>delay</code> attribute, which denotes the number of seconds it should wait before fetching the data again.</p>
<p>We also need to amend the dashboard component to include this widget:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> FeedWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./feedwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      &lt;div className="dashboard"&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        &lt;h1 ref="title"&gt;{this.props.title}&lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        &lt;div className="wrapper"&gt;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>          &lt;ClockWidget /&gt;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>          &lt;FeedWidget feed="http://feeds.bbci.co.uk/news/rss.xml?edition=uk" size="5" delay="60" /&gt;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});</td></table></code></pre>
<p>If we then create <code>js/components/feedwidget.js</code> and run <code>npm test</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Clock Widget</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ renders the clock widget (92ms)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components). Check the render method of `dashboard`.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    1) renders the dashboard</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Feed Widget</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components).</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    2) renders the Feed widget</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>  1 passing (286ms)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  2 failing</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>  1) Dashboard renders the dashboard:</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object. Check the render method of `dashboard`.</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at instantiateReactComponent (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at instantiateChild (node_modules/react/lib/ReactChildReconciler.js:43:28)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at node_modules/react/lib/ReactChildReconciler.js:70:16</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at traverseAllChildrenImpl (node_modules/react/lib/traverseAllChildren.js:69:5)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at traverseAllChildrenImpl (node_modules/react/lib/traverseAllChildren.js:85:23)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at traverseAllChildren (node_modules/react/lib/traverseAllChildren.js:164:10)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at Object.ReactChildReconciler.instantiateChildren (node_modules/react/lib/ReactChildReconciler.js:69:7)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at ReactDOMComponent.ReactMultiChild.Mixin._reconcilerInstantiateChildren (node_modules/react/lib/ReactMultiChild.js:194:41)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (node_modules/react/lib/ReactMultiChild.js:231:27)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at ReactDOMComponent.Mixin._createInitialChildren (node_modules/react/lib/ReactDOMComponent.js:715:32)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>      at ReactDOMComponent.Mixin.mountComponent (node_modules/react/lib/ReactDOMComponent.js:531:12)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>      at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (node_modules/react/lib/ReactMultiChild.js:242:44)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>      at ReactDOMComponent.Mixin._createInitialChildren (node_modules/react/lib/ReactDOMComponent.js:715:32)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      at ReactDOMComponent.Mixin.mountComponent (node_modules/react/lib/ReactDOMComponent.js:531:12)</td><tr><td class="linenos" data-pseudo-content="41"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:397:34)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:397:34)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="49"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="53"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="55"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="57"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      at Context.&lt;anonymous&gt; (dashboard.js:11:23)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>  2) Feed Widget renders the Feed widget:</td><tr><td class="linenos" data-pseudo-content="61"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object.</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="64"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="73"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="75"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="77"></td><td>      at Context.&lt;anonymous&gt; (feedwidget.js:12:23)</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td></td><tr><td class="linenos" data-pseudo-content="81"></td><td></td><tr><td class="linenos" data-pseudo-content="82"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="83"></td><td>Statements   : 83.33% ( 10/12 )</td><tr><td class="linenos" data-pseudo-content="84"></td><td>Branches     : 50% ( 1/2 )</td><tr><td class="linenos" data-pseudo-content="85"></td><td>Functions    : 66.67% ( 4/6 )</td><tr><td class="linenos" data-pseudo-content="86"></td><td>Lines        : 83.33% ( 10/12 )</td><tr><td class="linenos" data-pseudo-content="87"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="88"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>Our test fails, so we can start work on the widget proper. Here it is:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> jQuery <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">window</span>.jQuery = jQuery;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">const</span> FeedItem = React.createClass({</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{this.props.link}</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"feeditem"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  getInitialState() {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      feed: [],</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      size: <span class="hljs-keyword">this</span>.props.size || <span class="hljs-number">5</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  componentDidMount() {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">this</span>.getFeed();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">this</span>.interval = setInterval(<span class="hljs-keyword">this</span>.getFeed, (<span class="hljs-keyword">this</span>.props.delay * <span class="hljs-number">1000</span>));</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  componentWillUnmount() {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    clearInterval(<span class="hljs-keyword">this</span>.interval);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  getFeed() {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">let</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    jQuery.ajax({</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      url: <span class="hljs-keyword">this</span>.props.feed,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">let</span> xml = jQuery(response);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">let</span> feed = [];</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        xml.find(<span class="hljs-string">'item'</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>          <span class="hljs-keyword">let</span> item = {};</td><tr><td class="linenos" data-pseudo-content="38"></td><td>          item.title = jQuery(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">'title'</span>).text();</td><tr><td class="linenos" data-pseudo-content="39"></td><td>          item.link = jQuery(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">'guid'</span>).text();</td><tr><td class="linenos" data-pseudo-content="40"></td><td>          feed.push(item);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        that.setState({</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          feed: feed.slice(<span class="hljs-number">0</span>,that.state.size)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="47"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-keyword">let</span> feedItems = <span class="hljs-keyword">this</span>.state.feed.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="50"></td><td>      <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FeedItem</span> <span class="hljs-attr">title</span>=<span class="hljs-string">{item.title}</span> <span class="hljs-attr">link</span>=<span class="hljs-string">{item.link}</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item.link}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">FeedItem</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>      );</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="55"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"feedwidget widget"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"widget-content"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"feed"</span>&gt;</span> Fetched from {this.props.feed}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>            {feedItems}</td><tr><td class="linenos" data-pseudo-content="60"></td><td>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="65"></td><td>});</td></table></code></pre>
<p>This is by far the most complex component, so a little explanation is called for. We include jQuery as a dependency at the top of the file. Then we create a component for rendering an individual feed item, called <code>FeedItem</code>. This is very simple, consisting of an anchor tag wrapped around a list item. Note the use of the <code>const</code> keyword - in ES6 this denotes a constant.</p>
<p>Next, we move onto the feed widget proper. We set the initial state of the feed to be an empty array. Then, we define a <code>componentDidMount()</code> method that calls <code>getFeed()</code> and sets up an interval to call it again, based on the <code>delay</code> property. The <code>getFeed()</code> method fetches the URL in question and sets <code>this.state.feed</code> to an array of the most recent entries in the feed, with the size denoted by the <code>size</code> property passed through. We also clear that interval when the component is about to be umounted.</p>
<p>Note that you may have problems with the <code>Access-Control-Allow-Origin</code> HTTP header. It’s possible to disable this in your web browser, so if you want to run this as a dashboard you’ll probably need to do so. On Chrome there’s a useful <a href="https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiw9Mm4r8TOAhVNOMAKHUicCF4QFggcMAA&amp;url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fallow-control-allow-origi%2Fnlfbmbojpeacfghkpbjhddihlkkiljbi%3Fhl%3Den&amp;usg=AFQjCNHSUFqc6ylxfxfbWzmmFJ6L5QUvyg&amp;sig2=fJaf_HKgY8XDsd-JeY_PXg&amp;bvm=bv.129422649,d.d24">plugin</a> that allows you to disable this when needed.</p>
<p>Because our <code>FeedWidget</code> has been created in a generic manner, we can then include multiple feed widgets easily, as in this example:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> FeedWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./feedwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      &lt;div className="dashboard"&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        &lt;h1 ref="title"&gt;{this.props.title}&lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        &lt;div className="wrapper"&gt;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>          &lt;ClockWidget /&gt;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>          &lt;FeedWidget feed="http://feeds.bbci.co.uk/news/rss.xml?edition=uk" size="5" delay="60" /&gt;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>          &lt;FeedWidget feed="https://www.sitepoint.com/feed/" size="10" delay="120" /&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td></table></code></pre>
<p>We also need to style our widgets. Save this as <code>scss/_colours.scss</code>:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-variable">$bgColour</span>: <span class="hljs-number">#151515</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-variable">$txtColour</span>: <span class="hljs-number">#cfcfcf</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-variable">$clockBg</span>: <span class="hljs-number">#fa8c00</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-variable">$clockHoverBg</span>: <span class="hljs-number">#0099ff</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-variable">$clockTxt</span>: <span class="hljs-number">#fff</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-variable">$feedBg</span>: <span class="hljs-number">#0099ff</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-variable">$feedTxt</span>: <span class="hljs-number">#fff</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-variable">$feedHoverBg</span>: <span class="hljs-number">#fa8c00</span>;</td></table></code></pre>
<p>And this as <code>scss/style.scss</code>:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">'colours'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$bgColour</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$txtColour</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.dashboard</span> {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.wrapper</span> {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    -moz-<span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    -webkit-<span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    -moz-<span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    -webkit-<span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>}</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.widget</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attribute">display</span>: inline-block;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span>;</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    &amp;:hover {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h4</span> {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.widget-content</span> {</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="42"></td><td>}</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.clockwidget</span> {</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$clockBg</span>;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$clockTxt</span>;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>}</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.feedwidget</span> {</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$feedBg</span>;</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$feedTxt</span>;</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-selector-tag">h2</span> {</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-attribute">word-wrap</span>: break-word;</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-selector-tag">ul</span> {</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-selector-tag">a</span> {</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-attribute">text-decoration</span>: none;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>            <span class="hljs-selector-tag">li</span> {</td><tr><td class="linenos" data-pseudo-content="66"></td><td>                <span class="hljs-attribute">list-style-type</span>: none;</td><tr><td class="linenos" data-pseudo-content="67"></td><td>                <span class="hljs-attribute">font-weight</span>: bold;</td><tr><td class="linenos" data-pseudo-content="68"></td><td>                <span class="hljs-attribute">color</span>: <span class="hljs-variable">$feedTxt</span>;</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}</td></table></code></pre>
<p>The end result should look something like this:</p>
<p><img src="/static/images/dashboard.png" alt="The personal dashboard in action"></p>
<p>With that done, feel free to add whatever other feeds you want to include.</p>
<h2 id="deploying-our-dashboard">Deploying our dashboard</h2>
<p>The final step is deploying our dashboard to our Raspberry Pi or other device. Run the following command to generate the Javascript:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm run build</table></code></pre>
<p>This will create <code>static/bundle.js</code>. You can then copy that file over to your web server with <code>index.html</code> and place both files in the web root. I recommend using Nginx if you’re using a Raspberry Pi as it’s faster and simpler for static content. If you’re likely to make a lot of changes you might want to create a command in the <code>scripts</code> section of your <code>package.json</code> to deploy the files more easily.</p>
<p>These basic widgets should be enough to get you started. You should be able to use the feed widget with virtually any RSS feed, and you should be able to use a similar approach to poll third-party APIs, although you might need to authenticate in some way (if you do, you won’t want to expose your authentication details, so ensure that nobody from outside the network can view your application). I’ll leave it to you to see what kind of interesting widgets you come up with for your own dashboard, but some ideas to get you started include:</p>
<ul>
<li>Public transport schedules/Traffic issues</li>
<li>Weather reports</li>
<li>Shopping lists/Todo lists, with HTML5 local storage used to persist them</li>
<li>Galleries of recent photos on social networks</li>
<li>Status of servers on cloud hosting providers</li>
</ul>
<p>With a little thought, you can probably come up with a few more than that! I’ve created a <a href="https://github.com/matthewbdaly/personal-dashboard">Github repository with the source code</a> so you can check your own implementation against it.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[An introduction to managing your servers with Ansible]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/08/10/an-introduction-to-managing-your-servers-with-ansible/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/08/10/an-introduction-to-managing-your-servers-with-ansible/</guid>
            <pubDate>Wed, 10 Aug 2016 19:45:56 GMT</pubDate>
            <description><![CDATA[<p>If, like me, you’re a web developer who sometimes also has to wear a sysadmin’s hat, then you’ll probably be coming across the same set of tasks each time you set up a new server. These may include:</p>
<ul>
<li>Provisioning new servers on cloud hosting providers such as Digital Ocean</li>
<li>Setting up Cloudflare</li>
<li>Installing a web server, database and other required packages</li>
<li>Installing an existing web application, such as Wordpress</li>
<li>Configuring the firewall and Fail2ban</li>
<li>Keeping existing servers up to date</li>
</ul>
<p>These can get tedious and repetitive fairly quickly - who genuinely wants to SSH into each server individually and run the updates regularly? Also, if done manually, there’s a danger of the setup for each server being inconsistent. Shell scripts will do this, but aren’t easy to read and not necessarily easy to adapt to different operating systems. You need a way to be able to manage multiple servers easily, maintain a series of reusable “recipes” and do it all in a way that’s straightforward to read - in other words, a configuration management system.</p>
<p>There are others around, such as Chef, Puppet, and Salt, but my own choice is <a href="https://www.ansible.com/">Ansible</a>. Here’s why I went for Ansible:</p>
<ul>
<li>Playbooks and roles are defined as YAML, making them fairly straightforward to read and understand</li>
<li>It’s written in Python, making it easy to create your own modules that leverage existing Python modules to get things done</li>
<li>It’s distributed via <code>pip</code>, making it easy to install</li>
<li>It doesn’t require you to install anything new on the servers, so you can get started straight away as soon as you can access a new server</li>
<li>It has modules for interfacing with cloud services such as Digital Ocean and Amazon Web Services</li>
</ul>
<p>Ansible is very easy to use, but you do still need to know what is actually going on to get the best out of it. It’s intended as a convenient abstraction on top of the underlying commands, not a replacement, and you should know how to do what you want to do manually before you write an Ansible playbook to do it.</p>
<h2 id="setting-up">Setting up</h2>
<p>You need to have Python 2 available. Ansible doesn’t yet support Python 3 (Grr…) so if you’re using an operating system that has switched to Python 3, such as Arch Linux, you’ll need to have Python 2 installed as well. Assuming you have <code>pip</code> installed, then run this command to install it:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo pip install ansible</table></code></pre>
<p>Or for users on systems with Python 3 as the main Python:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo pip2 install ansible</table></code></pre>
<p>For Windows users, you’ll want to drop <code>sudo</code>. On Unix-like OS’s that don’t have <code>sudo</code> installed, drop it and run the command as root.</p>
<h2 id="our-first-ansible-command">Our first Ansible command</h2>
<p>We’ll demonstrate Ansible in action with a Vagrant VM. Drop the following <code>Vagrantfile</code> into your working directory:</p>
<pre><code class="hljs lang-ruby"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># -*- mode: ruby -*-</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># vi: set ft=ruby :</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>VAGRANTFILE_API_VERSION = <span class="hljs-string">"2"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Vagrant.configure(VAGRANTFILE_API_VERSION) <span class="hljs-keyword">do</span> <span class="hljs-params">|config|</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>  config.vm.box = <span class="hljs-string">"debian/jessie64"</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>  config.vm.network <span class="hljs-string">"forwarded_port"</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">80</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">8080</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">end</span></td></table></code></pre>
<p>Then fire up the VM:</p>
<pre><code class="hljs lang-bash singleline"><table>$ vagrant up</table></code></pre>
<p>This VM will be our test bed for running Ansible. If you prefer, you can use a remote server instead.</p>
<p>Next, we’ll configure Ansible. Save this as <code>ansible.cfg</code>:</p>
<pre><code class="hljs lang-conf"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">[defaults]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">hostfile</span> = inventory</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">remote_user</span> = vagrant</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">private_key_file</span> = .vagrant/machines/default/virtualbox/private_key</td></table></code></pre>
<p>In this case the remote user is <code>vagrant</code> because we’re using Vagrant, but to manage remote machines you would need to change this to the name of the account that you use on the server. The value of <code>private_key_file</code> will also normally be something like <code>/home/matthew/.ssh/id_rsa.pub</code>, but here we’re using the Vagrant-specific key.</p>
<p>Note the <code>hostfile</code> entry - this points to the list of hosts you want to manage with Ansible. Let’s create this next. Save the following as <code>inventory</code>:</p>
<pre><code class="hljs lang-conf singleline"><table>testserver ansible_ssh_host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> ansible_ssh_port=<span class="hljs-number">2222</span></table></code></pre>
<p>Note that we explicitly need to set the port here because we’re using Vagrant. Normally it will default to port 22. A typical entry for a remote server might look like this:</p>
<pre><code class="hljs lang-conf singleline"><table>example.com ansible_ssh_host=<span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.101</span></table></code></pre>
<p>Note also that we can refer to hosts by the name we give it, which can be as meaningful (or not) as you want.</p>
<p>Let’s run our first command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible all -m ping</td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver | SUCCESS =&gt; {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"changed"</span>: <span class="hljs-literal">false</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"ping"</span>: <span class="hljs-string">"pong"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>}</td></table></code></pre>
<p>We called Ansible with the hosts set to <code>all</code>, therefore every host in the inventory was contacted. We used the <code>-m</code> flag to say we were calling a module, and then specified the <code>ping</code> module. Ansible therefore pinged each server in turn.</p>
<p>We can call ad-hoc commands using the <code>-a</code> flag, as in this example:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible all <span class="hljs-_">-a</span> <span class="hljs-string">"uptime"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver | SUCCESS | rc=0 &gt;&gt;</td><tr><td class="linenos" data-pseudo-content="3"></td><td> 17:26:57 up 19 min,  1 user,  load average: 0.00, 0.04, 0.13</td></table></code></pre>
<p>This command gets the uptime for the server. If you only want to run the command on a single server, you can specify it by name:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible testserver <span class="hljs-_">-a</span> <span class="hljs-string">"uptime"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver | SUCCESS | rc=0 &gt;&gt;</td><tr><td class="linenos" data-pseudo-content="3"></td><td> 17:28:21 up 20 min,  1 user,  load average: 0.02, 0.04, 0.13</td></table></code></pre>
<p>Here we specified the server as <code>testserver</code>. What about if you want to specify more than one server, but not all of them? You can create groups of servers in <code>inventory</code>, as in this example:</p>
<pre><code class="hljs lang-conf"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>[webservers]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver ansible_ssh_host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> ansible_ssh_port=<span class="hljs-number">2222</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>example.com ansible_ssh_host=<span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.101</span></td></table></code></pre>
<p>You could then call the following to run the <code>uptime</code> command on all the servers in the <code>webservers</code> group:</p>
<pre><code class="hljs lang-perl singleline"><table>$ ansible webservers -a <span class="hljs-string">'uptime'</span></table></code></pre>
<p>If you want to run the command as a different user, you can do so:</p>
<pre><code class="hljs lang-perl singleline"><table>$ ansible webservers -a <span class="hljs-string">'uptime'</span> -u bob</table></code></pre>
<p>Note that for running <code>uptime</code> we haven’t specified the <code>-m</code> flag. This is because the <code>command</code> module is the default, but it’s very basic and doesn’t support shell variables. For more complex interactions you might need to use the <code>shell</code> module, as in this example:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible testserver -m shell <span class="hljs-_">-a</span> <span class="hljs-string">'echo $PATH'</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver | SUCCESS | rc=0 &gt;&gt;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>/usr/<span class="hljs-built_in">local</span>/bin:/usr/bin:/bin:/usr/games</td></table></code></pre>
<p>For installing a package on Debian or Ubuntu, you might use the <code>apt</code> module:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible testserver -m apt <span class="hljs-_">-a</span> <span class="hljs-string">"name=git state=present"</span> --become</td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver | SUCCESS =&gt; {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"cache_update_time"</span>: 0,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"cache_updated"</span>: <span class="hljs-literal">false</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"changed"</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">"stderr"</span>: <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">"stdout"</span>: <span class="hljs-string">"Reading package lists...\nBuilding dependency tree...\nReading state information...\nThe following extra packages will be installed:\n  git-man liberror-perl\nSuggested packages:\n  git-daemon-run git-daemon-sysvinit git-doc git-el git-email git-gui gitk\n  gitweb git-arch git-cvs git-mediawiki git-svn\nThe following NEW packages will be installed:\n  git git-man liberror-perl\n0 upgraded, 3 newly installed, 0 to remove and 83 not upgraded.\nNeed to get 4552 kB of archives.\nAfter this operation, 23.5 MB of additional disk space will be used.\nGet:1 http://httpredir.debian.org/debian/ jessie/main liberror-perl all 0.17-1.1 [22.4 kB]\nGet:2 http://httpredir.debian.org/debian/ jessie/main git-man all 1:2.1.4-2.1+deb8u2 [1267 kB]\nGet:3 http://httpredir.debian.org/debian/ jessie/main git amd64 1:2.1.4-2.1+deb8u2 [3262 kB]\nFetched 4552 kB in 1s (3004 kB/s)\nSelecting previously unselected package liberror-perl.\r\n(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 32784 files and directories currently installed.)\r\nPreparing to unpack .../liberror-perl_0.17-1.1_all.deb ...\r\nUnpacking liberror-perl (0.17-1.1) ...\r\nSelecting previously unselected package git-man.\r\nPreparing to unpack .../git-man_1%3a2.1.4-2.1+deb8u2_all.deb ...\r\nUnpacking git-man (1:2.1.4-2.1+deb8u2) ...\r\nSelecting previously unselected package git.\r\nPreparing to unpack .../git_1%3a2.1.4-2.1+deb8u2_amd64.deb ...\r\nUnpacking git (1:2.1.4-2.1+deb8u2) ...\r\nProcessing triggers for man-db (2.7.0.2-5) ...\r\nSetting up liberror-perl (0.17-1.1) ...\r\nSetting up git-man (1:2.1.4-2.1+deb8u2) ...\r\nSetting up git (1:2.1.4-2.1+deb8u2) ...\r\n"</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">"stdout_lines"</span>: [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-string">"Reading package lists..."</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">"Building dependency tree..."</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-string">"Reading state information..."</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-string">"The following extra packages will be installed:"</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-string">"  git-man liberror-perl"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-string">"Suggested packages:"</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-string">"  git-daemon-run git-daemon-sysvinit git-doc git-el git-email git-gui gitk"</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-string">"  gitweb git-arch git-cvs git-mediawiki git-svn"</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-string">"The following NEW packages will be installed:"</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-string">"  git git-man liberror-perl"</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-string">"0 upgraded, 3 newly installed, 0 to remove and 83 not upgraded."</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-string">"Need to get 4552 kB of archives."</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-string">"After this operation, 23.5 MB of additional disk space will be used."</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-string">"Get:1 http://httpredir.debian.org/debian/ jessie/main liberror-perl all 0.17-1.1 [22.4 kB]"</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-string">"Get:2 http://httpredir.debian.org/debian/ jessie/main git-man all 1:2.1.4-2.1+deb8u2 [1267 kB]"</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-string">"Get:3 http://httpredir.debian.org/debian/ jessie/main git amd64 1:2.1.4-2.1+deb8u2 [3262 kB]"</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-string">"Fetched 4552 kB in 1s (3004 kB/s)"</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-string">"Selecting previously unselected package liberror-perl."</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-string">"(Reading database ... "</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-string">"(Reading database ... 5%"</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-string">"(Reading database ... 10%"</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-string">"(Reading database ... 15%"</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-string">"(Reading database ... 20%"</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-string">"(Reading database ... 25%"</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-string">"(Reading database ... 30%"</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-string">"(Reading database ... 35%"</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-string">"(Reading database ... 40%"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-string">"(Reading database ... 45%"</span>,</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-string">"(Reading database ... 50%"</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-string">"(Reading database ... 55%"</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-string">"(Reading database ... 60%"</span>,</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-string">"(Reading database ... 65%"</span>,</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-string">"(Reading database ... 70%"</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-string">"(Reading database ... 75%"</span>,</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-string">"(Reading database ... 80%"</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-string">"(Reading database ... 85%"</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-string">"(Reading database ... 90%"</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-string">"(Reading database ... 95%"</span>,</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-string">"(Reading database ... 100%"</span>,</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-string">"(Reading database ... 32784 files and directories currently installed.)"</span>,</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-string">"Preparing to unpack .../liberror-perl_0.17-1.1_all.deb ..."</span>,</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-string">"Unpacking liberror-perl (0.17-1.1) ..."</span>,</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-string">"Selecting previously unselected package git-man."</span>,</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-string">"Preparing to unpack .../git-man_1%3a2.1.4-2.1+deb8u2_all.deb ..."</span>,</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-string">"Unpacking git-man (1:2.1.4-2.1+deb8u2) ..."</span>,</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-string">"Selecting previously unselected package git."</span>,</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-string">"Preparing to unpack .../git_1%3a2.1.4-2.1+deb8u2_amd64.deb ..."</span>,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-string">"Unpacking git (1:2.1.4-2.1+deb8u2) ..."</span>,</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-string">"Processing triggers for man-db (2.7.0.2-5) ..."</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-string">"Setting up liberror-perl (0.17-1.1) ..."</span>,</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-string">"Setting up git-man (1:2.1.4-2.1+deb8u2) ..."</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-string">"Setting up git (1:2.1.4-2.1+deb8u2) ..."</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="62"></td><td>}</td></table></code></pre>
<p>Here we specify that a particular package should be <code>state=present</code> or <code>state=absent</code>. Also, note the <code>--become</code> flag, which allows us to become root. If you’re using an RPM-based Linux distro, you can use the <code>yum</code> module in the same way.</p>
<p>Finally, let’s use the <code>git</code> module to check out a project on the server:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible testserver -m git <span class="hljs-_">-a</span> <span class="hljs-string">"repo=https://github.com/matthewbdaly/django_tutorial_blog_ng.git dest=/home/vagrant/example version=HEAD"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>testserver | SUCCESS =&gt; {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"after"</span>: <span class="hljs-string">"3542098e3b01103db4d9cfc724ba3c71c45cb314"</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"before"</span>: null,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"changed"</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">"warnings"</span>: []</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td></table></code></pre>
<p>Here we check out a Git repository. We specify the repo, destination and version.</p>
<p>You can call any installed Ansible module in an ad-hoc fashion in the same way. Refer to the documentation for a list of modules.</p>
<h2 id="playbooks">Playbooks</h2>
<p>Ad-hoc commands are useful, but they don’t offer much extra over using SSH. Playbooks allow you to define a repeatable set of commands for a particular use case. In this example, I’ll show you how to write a playbook that does the following:</p>
<ul>
<li>Installs and configures Nginx</li>
<li>Clones the repository for my site into the web root</li>
</ul>
<p>This is sufficiently complex to demonstrate some more of the functionality of Ansible, while also demonstrating playbooks in action.</p>
<p>Create a new folder called <code>playbooks</code>, and inside it save the following as <code>sitecopy.yml</code>:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">---</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">- name:</span> Copy personal website</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">  hosts:</span> testserver</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">  become:</span> <span class="hljs-literal">True</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">  tasks:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">    - name:</span> Install Nginx</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-attr">      apt:</span> name=nginx update_cache=<span class="hljs-literal">yes</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attr">    - name:</span> Copy config</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-attr">      copy:</span> <span class="hljs-string">&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        src=files/nginx.conf</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        dest=/etc/nginx/sites-available/default</td><tr><td class="linenos" data-pseudo-content="12"></td><td></span><span class="hljs-attr">    - name:</span> Activate config</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-attr">      file:</span> <span class="hljs-string">&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        dest=/etc/nginx/sites-enabled/default</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        src=/etc/nginx/sites-available/default</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        state=link</td><tr><td class="linenos" data-pseudo-content="17"></td><td></span><span class="hljs-attr">    - name:</span> Delete /var/www directory</td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-attr">      file:</span> <span class="hljs-string">&gt;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        path=/var/www</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        state=absent</td><tr><td class="linenos" data-pseudo-content="21"></td><td></span><span class="hljs-attr">    - name:</span> Clone repository</td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-attr">      git:</span> <span class="hljs-string">&gt;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        repo=https://github.com/matthewbdaly/matthewbdaly.github.io.git</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        dest=/var/www</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        version=HEAD</td><tr><td class="linenos" data-pseudo-content="26"></td><td></span><span class="hljs-attr">    - name:</span> Restart Nginx</td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-attr">      service:</span> name=nginx state=restarted</td></table></code></pre>
<p>Note the <code>name</code> fields - these are comments that will show up in the output when each step is run. First we use the <code>apt</code> module to install Nginx, then we copy over the config file and activate it, then we empty the existing <code>/var/www</code> and clone the repository, and finally we restart Nginx.</p>
<p>Also, note the following fields:</p>
<ul>
<li><code>hosts</code> defines the hosts affected</li>
<li><code>become</code> specifies that the commands are run using <code>sudo</code></li>
</ul>
<p>We also need to create the config for Nginx. Create the <code>files</code> directory under <code>playbooks</code> and save this file as <code>playbooks/files/nginx.conf</code>:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server ipv6only=<span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-attribute">root</span> /var/www;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">index</span> index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">server_name</span> localhost;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>}</td></table></code></pre>
<p>Obviously if your Nginx config will be different, feel free to amend it as necessary. Finally, we run the playbook using the <code>ansible-playbook</code> command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ ansible-playbook playbooks/sitecopy.yml</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>PLAY [Copy personal website] ***************************************************</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>TASK [setup] *******************************************************************</td><tr><td class="linenos" data-pseudo-content="6"></td><td>ok: [testserver]</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>TASK [Install Nginx] ***********************************************************</td><tr><td class="linenos" data-pseudo-content="9"></td><td>changed: [testserver]</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>TASK [Copy config] *************************************************************</td><tr><td class="linenos" data-pseudo-content="12"></td><td>changed: [testserver]</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>TASK [Activate config] *********************************************************</td><tr><td class="linenos" data-pseudo-content="15"></td><td>changed: [testserver]</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>TASK [Delete /var/www directory] ***********************************************</td><tr><td class="linenos" data-pseudo-content="18"></td><td>changed: [testserver]</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>TASK [Clone repository] ********************************************************</td><tr><td class="linenos" data-pseudo-content="21"></td><td>changed: [testserver]</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>TASK [Restart Nginx] ***********************************************************</td><tr><td class="linenos" data-pseudo-content="24"></td><td>changed: [testserver]</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>PLAY RECAP *********************************************************************</td><tr><td class="linenos" data-pseudo-content="27"></td><td>testserver                 : ok=7    changed=6    unreachable=0    failed=0</td></table></code></pre>
<p>If we had a playbook that we wanted to run on only a subset of the hosts it applied to, we could use the <code>-l</code> flag, as in this example:</p>
<pre><code class="hljs lang-bash singleline"><table>$ ansible-playbook playbooks/sitecopy.yml <span class="hljs-_">-l</span> testserver</table></code></pre>
<p>Using these same basic concepts, you can invoke many different Ansible modules to achieve many different tasks. You can spin up new servers on supported cloud hosting companies, you can set up a known good fail2ban config, you can configure your firewall, and many more tasks. As your playbooks get bigger, it’s worth moving sections into separate roles that get invoked within multiple playbooks, in order to reduce repetition.</p>
<p>Finally, I mentioned earlier that you can use Ansible to update all of your servers regularly. Here’s the playbook I use for that:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">---</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">- name:</span> Update system</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">  hosts:</span> all</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">  become:</span> <span class="hljs-literal">True</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">  tasks:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">    - name:</span> update system</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-attr">      apt:</span> upgrade=full update_cache=<span class="hljs-literal">yes</span></td></table></code></pre>
<p>This connects to all hosts using the <code>all</code> shortcut we saw earlier, and upgrades all existing packages. Using this method is a lot easier than connecting to each one in turn via SSH and updating it manually.</p>
<h2 id="summary">Summary</h2>
<p>Ansible is an extremely useful tool for managing servers, but to get the most out of it you have to put in a fair bit of work reading the <a href="https://docs.ansible.com/">documentation</a> and writing your own playbooks for your own use cases. It’s simple to get started with, and if you’re willing to put in the time writing your own playbooks then in the long run you’ll save yourself a lot of time and grief by making it easy to set up new servers and administer existing ones. Hopefully this has given you a taster of what you can do with Ansible - from here on the documentation is worth a look as it lists all of the modules that ship with Ansible. If there’s a particular task you dread, such as setting up a mail server, then Ansible is a very good way to automate that away so it’s easier next time.</p>
<p>My experience is that it’s best to make an effort to try to standardise on two or three different stacks for different purposes, and create Ansible playbooks for those stacks. For instance, I’ve tended to use PHP 5, Apache, MySQL, Memcached and Varnish for Wordpress sites, and PHP 7, Nginx, Redis and PostgreSQL for Laravel sites. That way I know that any sites I build with Laravel will be using that stack. Knowing my servers are more consistent makes it easier to work with them and identify problems.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Testing your API documentation with Dredd]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/</guid>
            <pubDate>Mon, 08 Aug 2016 16:05:00 GMT</pubDate>
            <description><![CDATA[<p>Documenting your API is something most developers agree is generally a Good Thing, but it’s a pain in the backside, and somewhat boring to do. What you really need is a tool that allows you to specify the details of your API before you start work, generate documentation from that specification, and test your implementation against that specification.</p>
<p>Fortunately, such a tool exists. The <a href="https://apiblueprint.org/">Blueprint</a> specification allows you to document your API using a Markdown-like syntax. You can then create HTML documentation using a tool like <a href="https://github.com/danielgtaylor/aglio">Aglio</a> or <a href="https://apiary.io/">Apiary</a>, and test it against your implementation using <a href="https://github.com/apiaryio/dredd">Dredd</a>.</p>
<p>In this tutorial we’ll implement a very basic REST API using the Lumen framework. We’ll first specify our API, then we’ll implement routes to match the implementation. In the process, we’ll demonstrate the Blueprint specification in action.</p>
<h2 id="getting-started">Getting started</h2>
<p>Assuming you already have PHP 5.6 or better and Composer installed, run the following command to create our Lumen app skeleton:</p>
<pre><code class="hljs lang-bash singleline"><table>$ composer create-project --prefer-dist laravel/lumen demoapi</table></code></pre>
<p>Once it has finished installing, we’ll also need to add the Dredd hooks:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ <span class="hljs-built_in">cd</span> demoapi</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ composer require ddelnano/dredd-hooks-php</td></table></code></pre>
<p>We need to install Dredd. It’s a Node.js tool, so you’ll need to have that installed. We’ll also install Aglio to generate HTML versions of our documentation:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install -g aglio dredd</table></code></pre>
<p>We also need to create a configuration file for Dredd, which you can do by running <code>dredd init</code>. Or you can just copy the one below:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>dry-<span class="hljs-string">run:</span> <span class="hljs-literal">null</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-string">hookfiles:</span> <span class="hljs-literal">null</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-string">language:</span> php</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-string">sandbox:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-string">server:</span> <span class="hljs-string">'php -S localhost:3000 -t public/'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>server-<span class="hljs-string">wait:</span> <span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-string">init:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-string">custom:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-symbol">  apiaryApiKey:</span> <span class="hljs-string">''</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-string">names:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-string">only:</span> []</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-string">reporter:</span> apiary</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-string">output:</span> []</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-string">header:</span> []</td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-string">sorted:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-string">user:</span> <span class="hljs-literal">null</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>inline-<span class="hljs-string">errors:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-string">details:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-string">method:</span> []</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-string">color:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-string">level:</span> info</td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-string">timestamp:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-string">silent:</span> <span class="hljs-literal">false</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-string">path:</span> []</td><tr><td class="linenos" data-pseudo-content="25"></td><td>hooks-worker-<span class="hljs-string">timeout:</span> <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>hooks-worker-connect-<span class="hljs-string">timeout:</span> <span class="hljs-number">1500</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>hooks-worker-connect-<span class="hljs-string">retry:</span> <span class="hljs-number">500</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>hooks-worker-after-connect-<span class="hljs-string">wait:</span> <span class="hljs-number">100</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>hooks-worker-term-<span class="hljs-string">timeout:</span> <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>hooks-worker-term-<span class="hljs-string">retry:</span> <span class="hljs-number">500</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>hooks-worker-handler-<span class="hljs-string">host:</span> localhost</td><tr><td class="linenos" data-pseudo-content="32"></td><td>hooks-worker-handler-<span class="hljs-string">port:</span> <span class="hljs-number">61321</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td><span class="hljs-string">config:</span> ./dredd.yml</td><tr><td class="linenos" data-pseudo-content="34"></td><td><span class="hljs-string">blueprint:</span> apiary.apib</td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-string">endpoint:</span> <span class="hljs-string">'http://localhost:3000'</span></td></table></code></pre>
<p>If you choose to run <code>dredd init</code>, you’ll see prompts for a number of things, including:</p>
<ul>
<li>The server command</li>
<li>The blueprint file name</li>
<li>The endpoint</li>
<li>Any Apiary API key</li>
<li>The language you want to use</li>
</ul>
<p>There are Dredd hooks for many languages, so if you’re planning on building a REST API in a language other than PHP, don’t worry - you can still test it with Dredd, you’ll just get prompted to install different hooks.</p>
<p>Note the <code>hookfiles</code> section, which specifies a hookfile to run during the test in order to set up the API. We’ll touch on that in a moment. Also, note the <code>server</code> setting - this specifies the command we should call to run the server. In this case we’re using the PHP development server.</p>
<p>If you’re using Apiary with your API (which I highly recommend), you can also set the following parameter to ensure that every time you run Dredd, it submits the results to Apiary:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-symbol">custom:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-symbol">  apiaryApiKey:</span> <span class="hljs-params">&lt;API KEY HERE&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-symbol">  apiaryApiName:</span> <span class="hljs-params">&lt;API NAME HERE&gt;</span></td></table></code></pre>
<h2 id="hookfiles">Hookfiles</h2>
<p>As mentioned, the hooks allow you to set up your API. In our case, we’ll need to set up some fixtures for our tests.  Save this file at <code>tests/dredd/hooks/hookfile.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Dredd</span>\<span class="hljs-title">Hooks</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Artisan</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/../../../vendor/autoload.php'</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>$app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/../../../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>$app-&gt;make(\Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>Hooks::beforeAll(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(&amp;$transaction)</span> <span class="hljs-title">use</span> <span class="hljs-params">($app)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>   putenv(<span class="hljs-string">'DB_CONNECTION=sqlite'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>   putenv(<span class="hljs-string">'DB_DATABASE=:memory:'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>   Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>   Artisan::call(<span class="hljs-string">'db:seed'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Hooks::beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(&amp;$transaction)</span> <span class="hljs-title">use</span> <span class="hljs-params">($app)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>   Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>   Artisan::call(<span class="hljs-string">'db:seed'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>});</td></table></code></pre>
<p>Before the tests run, we set the environment up to use an in-memory SQLite database. We also migrate and seed the database, so we’re working with a clean database. As part of this tutorial, we’ll create seed files for the fixtures we need in the database.</p>
<p>This hookfile assumes that the user does not need to be authenticated to communicate with the API. If that’s not the case for your API, you may want to include something like this in your hookfile’s <code>beforeEach</code> callback:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>   $user = App\User::first();</td><tr><td class="linenos" data-pseudo-content="2"></td><td>   $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>   $transaction-&gt;request-&gt;headers-&gt;Authorization = <span class="hljs-string">'Bearer '</span> . $token;</td></table></code></pre>
<p>Here we’re using the <a href="https://github.com/tymondesigns/jwt-auth">JWT Auth</a> package for Laravel to authenticate users of our API, and we need to set the <code>Authorization</code> header to contain a valid JSON web token for the given user. If you’re using a different method, such as HTTP Basic authentication, you’ll need to amend this code to reflect that.</p>
<p>With that done, we need to create the Blueprint file for our API. Recall the following line in <code>dredd.yml</code>:</p>
<pre><code class="hljs lang-yml singleline"><table><span class="hljs-keyword">blueprint: </span>apiary.apib</table></code></pre>
<p>This specifies the path to our documentation. Let’s create that file:</p>
<pre><code class="hljs lang-bash singleline"><table>$ touch apiary.apib</table></code></pre>
<p>Once this is done, you should be able to run Dredd:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>warn: Parser warning <span class="hljs-keyword">in</span> file <span class="hljs-string">'apiary.apib'</span>: (warning code undefined) Could not recognize API description format. Falling back to API Blueprint by default.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>complete: Tests took 619ms</td><tr><td class="linenos" data-pseudo-content="9"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/4aab4155-cfc4-4fda-983a-fea280933ad4</td><tr><td class="linenos" data-pseudo-content="10"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="11"></td><td>info: Backend server was killed</td></table></code></pre>
<p>With that done, we’re ready to start work on our API.</p>
<h2 id="our-first-route">Our first route</h2>
<p>Dredd is not a testing tool in the usual sense. Under no circumstances should you use it as a substitute for something like PHPUnit - that’s not what it’s for. It’s for ensuring that your documentation and your implementation remain in sync. However, it’s not entirely impractical to use it as a Behaviour-driven development tool in the same vein as Cucumber or Behat - you can use it to plan out the endpoints your API will have, the requests they accept, and the responses they return, and then verify your implementation against the documentation.</p>
<p>We will only have a single endpoint, in order to keep this tutorial as simple and concise as possible. Our endpoint will expose products for a shop, and will allow users to fetch, create, edit and delete products. Note that we won’t be implementing any kind of authentication, which in production is almost certainly not what you want - we’re just going for the simplest possible implementation.</p>
<p>First, we’ll implement getting a list of products:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>FORMAT: 1A</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-section"># Demo API</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section"># Products [/api/products]</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Product object representation</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-section">## Get products [GET /api/products]</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Get a list of products</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">                "id": 1,</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-code">                "name": "Purple widget",</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-code">                "description": "A purple widget",</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">                "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-code">                "attributes": {</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">                    "colour": "Purple",</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">                    "size": "Small"</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">                }</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>A little explanation is called for. First the <code>FORMAT</code> section denotes the version of the API. Then, the <code># Demo API</code> section denotes the name of the API.</p>
<p>Next, we define the <code>Products</code> endpoint, followed by our first method. Then we define what should be contained in the request, and what the response should look like. Blueprint is a little more complex than that, but that’s sufficient to get us started.</p>
<p>Then we run <code>dredd</code> again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd.yml</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>fail: GET /api/products duration: 61ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>info: Displaying failed tests...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>fail: GET /api/products duration: 61ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>fail: headers: Header <span class="hljs-string">'content-type'</span> has value <span class="hljs-string">'text/html; charset=UTF-8'</span> instead of <span class="hljs-string">'application/json'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>body: Can<span class="hljs-string">'t validate real media type '</span>text/plain<span class="hljs-string">' against expected media type '</span>application/json<span class="hljs-string">'.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>statusCode: Status code is not '</span>200<span class="hljs-string">'</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>request: </td><tr><td class="linenos" data-pseudo-content="15"></td><td>method: GET</td><tr><td class="linenos" data-pseudo-content="16"></td><td>uri: /api/products</td><tr><td class="linenos" data-pseudo-content="17"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="18"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    User-Agent: Dredd/1.5.0 (Linux 4.4.0-31-generic; x64)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>expected: </td><tr><td class="linenos" data-pseudo-content="26"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="27"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="30"></td><td>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>  "id": 1,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  "name": "Purple widget",</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  "description": "A purple widget",</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  "price": 5.99,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  "attributes": {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    "colour": "Purple",</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    "size": "Small"</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="39"></td><td>}</td><tr><td class="linenos" data-pseudo-content="40"></td><td>statusCode: 200</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>actual: </td><tr><td class="linenos" data-pseudo-content="44"></td><td>statusCode: 404</td><tr><td class="linenos" data-pseudo-content="45"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="46"></td><td>    host: localhost:3000</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    connection: close</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    x-powered-by: PHP/7.0.8-0ubuntu0.16.04.2</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cache-control: no-cache</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    date: Mon, 08 Aug 2016 10:30:33 GMT</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    content-type: text/html; charset=UTF-8</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="54"></td><td>&lt;!DOCTYPE html&gt;</td><tr><td class="linenos" data-pseudo-content="55"></td><td>&lt;html&gt;</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    &lt;head&gt;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        &lt;meta name="robots" content="noindex,nofollow" /&gt;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        &lt;style&gt;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>            /* Copyright (c) 2010, Yahoo! Inc. All rights reserved. Code licensed under the BSD License: http://developer.yahoo.com/yui/license.html */</td><tr><td class="linenos" data-pseudo-content="60"></td><td>            html{color:#000;background:#FFF;}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0;}table{border-collapse:collapse;border-spacing:0;}fieldset,img{border:0;}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:normal;}li{list-style:none;}caption,th{text-align:left;}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal;}q:before,q:after{content:'</span><span class="hljs-string">';}abbr,acronym{border:0;font-variant:normal;}sup{vertical-align:text-top;}sub{vertical-align:text-bottom;}input,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit;}input,textarea,select{*font-size:100%;}legend{color:#000;}</td><tr><td class="linenos" data-pseudo-content="61"></td><td>            html { background: #eee; padding: 10px }</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            img { border: 0; }</td><tr><td class="linenos" data-pseudo-content="63"></td><td>            #sf-resetcontent { width:970px; margin:0 auto; }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>                        .sf-reset { font: 11px Verdana, Arial, sans-serif; color: #333 }</td><tr><td class="linenos" data-pseudo-content="65"></td><td>            .sf-reset .clear { clear:both; height:0; font-size:0; line-height:0; }</td><tr><td class="linenos" data-pseudo-content="66"></td><td>            .sf-reset .clear_fix:after { display:block; height:0; clear:both; visibility:hidden; }</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            .sf-reset .clear_fix { display:inline-block; }</td><tr><td class="linenos" data-pseudo-content="68"></td><td>            .sf-reset * html .clear_fix { height:1%; }</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            .sf-reset .clear_fix { display:block; }</td><tr><td class="linenos" data-pseudo-content="70"></td><td>            .sf-reset, .sf-reset .block { margin: auto }</td><tr><td class="linenos" data-pseudo-content="71"></td><td>            .sf-reset abbr { border-bottom: 1px dotted #000; cursor: help; }</td><tr><td class="linenos" data-pseudo-content="72"></td><td>            .sf-reset p { font-size:14px; line-height:20px; color:#868686; padding-bottom:20px }</td><tr><td class="linenos" data-pseudo-content="73"></td><td>            .sf-reset strong { font-weight:bold; }</td><tr><td class="linenos" data-pseudo-content="74"></td><td>            .sf-reset a { color:#6c6159; cursor: default; }</td><tr><td class="linenos" data-pseudo-content="75"></td><td>            .sf-reset a img { border:none; }</td><tr><td class="linenos" data-pseudo-content="76"></td><td>            .sf-reset a:hover { text-decoration:underline; }</td><tr><td class="linenos" data-pseudo-content="77"></td><td>            .sf-reset em { font-style:italic; }</td><tr><td class="linenos" data-pseudo-content="78"></td><td>            .sf-reset h1, .sf-reset h2 { font: 20px Georgia, "Times New Roman", Times, serif }</td><tr><td class="linenos" data-pseudo-content="79"></td><td>            .sf-reset .exception_counter { background-color: #fff; color: #333; padding: 6px; float: left; margin-right: 10px; float: left; display: block; }</td><tr><td class="linenos" data-pseudo-content="80"></td><td>            .sf-reset .exception_title { margin-left: 3em; margin-bottom: 0.7em; display: block; }</td><tr><td class="linenos" data-pseudo-content="81"></td><td>            .sf-reset .exception_message { margin-left: 3em; display: block; }</td><tr><td class="linenos" data-pseudo-content="82"></td><td>            .sf-reset .traces li { font-size:12px; padding: 2px 4px; list-style-type:decimal; margin-left:20px; }</td><tr><td class="linenos" data-pseudo-content="83"></td><td>            .sf-reset .block { background-color:#FFFFFF; padding:10px 28px; margin-bottom:20px;</td><tr><td class="linenos" data-pseudo-content="84"></td><td>                -webkit-border-bottom-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="85"></td><td>                -webkit-border-bottom-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="86"></td><td>                -moz-border-radius-bottomright: 16px;</td><tr><td class="linenos" data-pseudo-content="87"></td><td>                -moz-border-radius-bottomleft: 16px;</td><tr><td class="linenos" data-pseudo-content="88"></td><td>                border-bottom-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="89"></td><td>                border-bottom-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="90"></td><td>                border-bottom:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="91"></td><td>                border-right:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="92"></td><td>                border-left:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="93"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="94"></td><td>            .sf-reset .block_exception { background-color:#ddd; color: #333; padding:20px;</td><tr><td class="linenos" data-pseudo-content="95"></td><td>                -webkit-border-top-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="96"></td><td>                -webkit-border-top-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="97"></td><td>                -moz-border-radius-topleft: 16px;</td><tr><td class="linenos" data-pseudo-content="98"></td><td>                -moz-border-radius-topright: 16px;</td><tr><td class="linenos" data-pseudo-content="99"></td><td>                border-top-left-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="100"></td><td>                border-top-right-radius: 16px;</td><tr><td class="linenos" data-pseudo-content="101"></td><td>                border-top:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="102"></td><td>                border-right:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="103"></td><td>                border-left:1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="104"></td><td>                overflow: hidden;</td><tr><td class="linenos" data-pseudo-content="105"></td><td>                word-wrap: break-word;</td><tr><td class="linenos" data-pseudo-content="106"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="107"></td><td>            .sf-reset a { background:none; color:#868686; text-decoration:none; }</td><tr><td class="linenos" data-pseudo-content="108"></td><td>            .sf-reset a:hover { background:none; color:#313131; text-decoration:underline; }</td><tr><td class="linenos" data-pseudo-content="109"></td><td>            .sf-reset ol { padding: 10px 0; }</td><tr><td class="linenos" data-pseudo-content="110"></td><td>            .sf-reset h1 { background-color:#FFFFFF; padding: 15px 28px; margin-bottom: 20px;</td><tr><td class="linenos" data-pseudo-content="111"></td><td>                -webkit-border-radius: 10px;</td><tr><td class="linenos" data-pseudo-content="112"></td><td>                -moz-border-radius: 10px;</td><tr><td class="linenos" data-pseudo-content="113"></td><td>                border-radius: 10px;</td><tr><td class="linenos" data-pseudo-content="114"></td><td>                border: 1px solid #ccc;</td><tr><td class="linenos" data-pseudo-content="115"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="116"></td><td>        &lt;/style&gt;</td><tr><td class="linenos" data-pseudo-content="117"></td><td>    &lt;/head&gt;</td><tr><td class="linenos" data-pseudo-content="118"></td><td>    &lt;body&gt;</td><tr><td class="linenos" data-pseudo-content="119"></td><td>                    &lt;div id="sf-resetcontent" class="sf-reset"&gt;</td><tr><td class="linenos" data-pseudo-content="120"></td><td>                &lt;h1&gt;Sorry, the page you are looking for could not be found.&lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="121"></td><td>                                        &lt;h2 class="block_exception clear_fix"&gt;</td><tr><td class="linenos" data-pseudo-content="122"></td><td>                            &lt;span class="exception_counter"&gt;1/1&lt;/span&gt;</td><tr><td class="linenos" data-pseudo-content="123"></td><td>                            &lt;span class="exception_title"&gt;&lt;abbr title="Symfony\Component\HttpKernel\Exception\NotFoundHttpException"&gt;NotFoundHttpException&lt;/abbr&gt; in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 450" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 450&lt;/a&gt;:&lt;/span&gt;</td><tr><td class="linenos" data-pseudo-content="124"></td><td>                            &lt;span class="exception_message"&gt;&lt;/span&gt;</td><tr><td class="linenos" data-pseudo-content="125"></td><td>                        &lt;/h2&gt;</td><tr><td class="linenos" data-pseudo-content="126"></td><td>                        &lt;div class="block"&gt;</td><tr><td class="linenos" data-pseudo-content="127"></td><td>                            &lt;ol class="traces list_exception"&gt;</td><tr><td class="linenos" data-pseudo-content="128"></td><td>       &lt;li&gt; in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 450" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 450&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="129"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;handleDispatcherResponse(&lt;em&gt;array&lt;/em&gt;('</span>0<span class="hljs-string">')) in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 387" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 387&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="130"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;Laravel\Lumen\Concerns\{closure}() in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 636" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 636&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="131"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;sendThroughPipeline(&lt;em&gt;array&lt;/em&gt;(), &lt;em&gt;object&lt;/em&gt;(&lt;abbr title="Closure"&gt;Closure&lt;/abbr&gt;)) in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 389" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 389&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="132"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;dispatch(&lt;em&gt;null&lt;/em&gt;) in &lt;a title="/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 334" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;RoutesRequests.php line 334&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="133"></td><td>       &lt;li&gt;at &lt;abbr title="Laravel\Lumen\Application"&gt;Application&lt;/abbr&gt;-&gt;run() in &lt;a title="/home/matthew/Projects/demoapi/public/index.php line 28" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;"&gt;index.php line 28&lt;/a&gt;&lt;/li&gt;</td><tr><td class="linenos" data-pseudo-content="134"></td><td>    &lt;/ol&gt;</td><tr><td class="linenos" data-pseudo-content="135"></td><td>&lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="136"></td><td></td><tr><td class="linenos" data-pseudo-content="137"></td><td>            &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="138"></td><td>    &lt;/body&gt;</td><tr><td class="linenos" data-pseudo-content="139"></td><td>&lt;/html&gt;</td><tr><td class="linenos" data-pseudo-content="140"></td><td></td><tr><td class="linenos" data-pseudo-content="141"></td><td></td><tr><td class="linenos" data-pseudo-content="142"></td><td></td><tr><td class="linenos" data-pseudo-content="143"></td><td>complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total</td><tr><td class="linenos" data-pseudo-content="144"></td><td>complete: Tests took 533ms</td><tr><td class="linenos" data-pseudo-content="145"></td><td>[Mon Aug  8 11:30:33 2016] 127.0.0.1:44472 [404]: /api/products</td><tr><td class="linenos" data-pseudo-content="146"></td><td>complete: See results in Apiary at: https://app.apiary.io/public/tests/run/0153d5bf-6efa-4fdb-b02a-246ddd75cb14</td><tr><td class="linenos" data-pseudo-content="147"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="148"></td><td>info: Backend server was killed</span></td></table></code></pre>
<p>Our route is returning HTML, not JSON, and is also raising a 404 error. So let’s fix that. First, let’s create our <code>Product</code> model at <code>app/Product.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>Next, we need to create a migration for the database tables for the <code>Product</code> model:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan make:migration create_product_table</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Created Migration: 2016_08_08_105737_create_product_table</td></table></code></pre>
<p>This will create a new file under <code>database/migrations</code>. Open this file and paste in the following:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateProductTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Create products table</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'products'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;text(<span class="hljs-string">'description'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            $table-&gt;float(<span class="hljs-string">'price'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            $table-&gt;json(<span class="hljs-string">'attributes'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment">// Drop products table</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        Schema::drop(<span class="hljs-string">'products'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}</td></table></code></pre>
<p>Note that we create fields that map to the attributes our API exposes. Also, note the use of the JSON field. In databases that support it, like PostgreSQL, it uses the native JSON support, otherwise it works like a text field. Next, we run the migration to create the table:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrated: 2016_08_08_105737_create_product_table</td></table></code></pre>
<p>With our model done, we now need to ensure that when Dredd runs, there is some data in the database, so we’ll create a seeder file at <code>database/seeds/ProductSeeder</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Add product</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::table(<span class="hljs-string">'products'</span>)-&gt;insert([</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Purple widget'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'description'</span> =&gt; <span class="hljs-string">'A purple widget'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'price'</span> =&gt; <span class="hljs-number">5.99</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'attributes'</span> =&gt; json_encode([</td><tr><td class="linenos" data-pseudo-content="21"></td><td>                <span class="hljs-string">'colour'</span> =&gt; <span class="hljs-string">'purple'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>                <span class="hljs-string">'size'</span> =&gt; <span class="hljs-string">'Small'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            ]),</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>You also need to amend <code>database/seeds/DatabaseSeeder</code> to call it:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'ProductSeeder'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>I found I also had to run the following command to find the new seeder:</p>
<pre><code class="hljs lang-bash singleline"><table>$ composer dump-autoload</table></code></pre>
<p>Then, call the seeder:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan db:seed</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Seeded: ProductSeeder</td></table></code></pre>
<p>We also need to enable Eloquent, as Lumen disables it by default. Uncomment the following line in <code>bootstrap/app.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;withEloquent();</table></code></pre>
<p>With that done, we can move onto the controller.</p>
<h2 id="creating-the-controller">Creating the controller</h2>
<p>Create the following file at <code>app/Http/Controllers/ProductController</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Product</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">private</span> $product;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Product $product)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;product = $product;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// Get all products</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        $products = <span class="hljs-keyword">$this</span>-&gt;product-&gt;all();</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($products, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td></table></code></pre>
<p>This implements the <code>index</code> route. Note that we inject the <code>Product</code> instance into the controller. Next, we need to hook it up in <code>app/Http/routes.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">/*</td><tr><td class="linenos" data-pseudo-content="4"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>| Application Routes</td><tr><td class="linenos" data-pseudo-content="6"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>|</td><tr><td class="linenos" data-pseudo-content="8"></td><td>| Here is where you can register all of the routes for an application.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>| It is a breeze. Simply tell Lumen the URIs it should respond to</td><tr><td class="linenos" data-pseudo-content="10"></td><td>| and give it the Closure to call when that URI is requested.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>|</td><tr><td class="linenos" data-pseudo-content="12"></td><td>*/</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>$app-&gt;get(<span class="hljs-string">'/api/products'</span>, <span class="hljs-string">'ProductController@index'</span>);</td></table></code></pre>
<p>Then we run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>[Mon Aug  8 12:36:28 2016] 127.0.0.1:45466 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="8"></td><td>fail: GET /api/products duration: 131ms</td><tr><td class="linenos" data-pseudo-content="9"></td><td>info: Displaying failed tests...</td><tr><td class="linenos" data-pseudo-content="10"></td><td>fail: GET /api/products duration: 131ms</td><tr><td class="linenos" data-pseudo-content="11"></td><td>fail: body: At <span class="hljs-string">''</span> Invalid <span class="hljs-built_in">type</span>: array (expected object)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>request: </td><tr><td class="linenos" data-pseudo-content="14"></td><td>method: GET</td><tr><td class="linenos" data-pseudo-content="15"></td><td>uri: /api/products</td><tr><td class="linenos" data-pseudo-content="16"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    User-Agent: Dredd/1.5.0 (Linux 4.4.0-31-generic; x64)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>expected: </td><tr><td class="linenos" data-pseudo-content="25"></td><td>headers: </td><tr><td class="linenos" data-pseudo-content="26"></td><td>    Content-Type: application/json</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>body: </td><tr><td class="linenos" data-pseudo-content="29"></td><td>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  <span class="hljs-string">"id"</span>: 1,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>  <span class="hljs-string">"name"</span>: <span class="hljs-string">"Purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  <span class="hljs-string">"description"</span>: <span class="hljs-string">"A purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  <span class="hljs-string">"price"</span>: 5.99,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  <span class="hljs-string">"attributes"</span>: {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-string">"colour"</span>: <span class="hljs-string">"Purple"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-string">"size"</span>: <span class="hljs-string">"Small"</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="38"></td><td>}</td><tr><td class="linenos" data-pseudo-content="39"></td><td>statusCode: 200</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>actual:</td><tr><td class="linenos" data-pseudo-content="43"></td><td>statusCode: 200</td><tr><td class="linenos" data-pseudo-content="44"></td><td>headers:</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    host: localhost:3000</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    connection: close</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    x-powered-by: PHP/7.0.8-0ubuntu0.16.04.2</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    cache-control: no-cache</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    content-type: application/json</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    date: Mon, 08 Aug 2016 11:36:28 GMT</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>body:</td><tr><td class="linenos" data-pseudo-content="53"></td><td>[ </td><tr><td class="linenos" data-pseudo-content="54"></td><td>  { </td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-string">"id"</span>: 1,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-string">"name"</span>: <span class="hljs-string">"Purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-string">"description"</span>: <span class="hljs-string">"A purple widget"</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-string">"price"</span>: <span class="hljs-string">"5.99"</span>,</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-string">"attributes"</span>: <span class="hljs-string">"{\"colour\":\"purple\",\"size\":\"Small\"}"</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>    <span class="hljs-string">"created_at"</span>: <span class="hljs-string">"2016-08-08 11:32:24"</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-string">"updated_at"</span>: <span class="hljs-string">"2016-08-08 11:32:24"</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="63"></td><td>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td>complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total</td><tr><td class="linenos" data-pseudo-content="68"></td><td>complete: Tests took 582ms</td><tr><td class="linenos" data-pseudo-content="69"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/83da2d67-c846-4356<span class="hljs-_">-a</span>3b8-4d7c32daa7ef</td><tr><td class="linenos" data-pseudo-content="70"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="71"></td><td>info: Backend server was killed</td></table></code></pre>
<p>Whoops, looks like we made a mistake here. The index route returns an array of objects, but we’re looking for a single object in the blueprint. We also need to wrap our attributes in quotes, and add the <code>created_at</code> and <code>updated_at</code> attributes. Let’s fix the blueprint:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>FORMAT: 1A</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-section"># Demo API</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section"># Products [/api/products]</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Product object representation</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-section">## Get products [GET /api/products]</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Get a list of products</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">            [</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">                {</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-code">                    "id": 1,</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-code">                    "name": "Purple widget",</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">                    "description": "A purple widget",</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-code">                    "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">                    "attributes": "{\"colour\": \"Purple\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">                    "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">                    "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">                }</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-code">            ]</span></td></table></code></pre>
<p>Let’s run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 65ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>complete: 1 passing, 0 failing, 0 errors, 0 skipped, 1 total</td><tr><td class="linenos" data-pseudo-content="9"></td><td>complete: Tests took 501ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 13:05:54 2016] 127.0.0.1:45618 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="11"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/7c23d4ae-aff2-4daf-bbdf-9fd76<span class="hljs-built_in">fc</span>58b97</td><tr><td class="linenos" data-pseudo-content="12"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="13"></td><td>info: Backend server was killed</td></table></code></pre>
<p>And now we can see that our test passes.</p>
<p>Next, we’ll implement a test for fetching a single product:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Get a product [GET /api/products/1]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Get a single product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">              "id": 1,</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-code">              "name": "Purple widget",</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-code">              "description": "A purple widget",</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-code">              "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">              "attributes": "{\"colour\": \"Purple\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-code">              "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">              "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>Note the same basic format - we define the URL that should be fetched, the content of the request, and the response, including the status code.</p>
<p>Let’s hook up our route in <code>app/Http/routes.php</code>:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;get(<span class="hljs-string">'/api/products/{id}'</span>, <span class="hljs-string">'ProductController@show'</span>);</table></code></pre>
<p>And add the <code>show()</code> method to the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Get individual product</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $product = <span class="hljs-keyword">$this</span>-&gt;product-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($product, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td></table></code></pre>
<p>Running Dredd again should show this method has been implemented:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 66ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 13:21:31 2016] 127.0.0.1:45750 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 17ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>complete: 2 passing, 0 failing, 0 errors, 0 skipped, 2 total</td><tr><td class="linenos" data-pseudo-content="11"></td><td>complete: Tests took 521ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Mon Aug  8 13:21:31 2016] 127.0.0.1:45752 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="13"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/bb6d03c3-8fad-477c-b140-af6e0cc8b96c</td><tr><td class="linenos" data-pseudo-content="14"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="15"></td><td>info: Backend server was killed</td></table></code></pre>
<p>That’s our read support done. We just need to add support for <code>POST</code>, <code>PATCH</code> and <code>DELETE</code> methods.</p>
<h2 id="our-remaining-methods">Our remaining methods</h2>
<p>Let’s set up the test for our <code>POST</code> method first:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Create products [POST /api/products]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Create a new product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>name (string) - The product name</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-bullet">+ </span>description (string) - The product description</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>price (float) - The product price</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-bullet">+ </span>attributes (string) - The product attributes</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-code">                "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">                "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-code">                "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">                "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">            }</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-bullet">+ </span>Response 201 (application/json)</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">              "id": 2,</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">              "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">              "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-code">              "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-code">              "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-code">              "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-code">              "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>Note we specify the format of the parameters that should be passed through, and that our status code should be 201, not 200 - this is arguably a more correct choice for creating a resource. Be careful of the whitespace - I had some odd issues with it. Next, we add our route:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;post(<span class="hljs-string">'/api/products'</span>, <span class="hljs-string">'ProductController@store'</span>);</table></code></pre>
<p>And the <code>store()</code> method in the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'description'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'price'</span> =&gt; <span class="hljs-string">'required|numeric'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'attributes'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Create product</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $product = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;product;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        $product-&gt;name = $request-&gt;input(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $product-&gt;description = $request-&gt;input(<span class="hljs-string">'description'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $product-&gt;price = $request-&gt;input(<span class="hljs-string">'price'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        $product-&gt;attributes = $request-&gt;input(<span class="hljs-string">'attributes'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">// Save product</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $product-&gt;save();</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($product, <span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td></table></code></pre>
<p>Note that we validate the attributes, to ensure they are correct and that the required ones exist. Running Dredd again should show the route is now in place:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 69ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 15:17:35 2016] 127.0.0.1:47316 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 18ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 15:17:35 2016] 127.0.0.1:47318 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="11"></td><td>pass: POST /api/products duration: 42ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>complete: 3 passing, 0 failing, 0 errors, 0 skipped, 3 total</td><tr><td class="linenos" data-pseudo-content="13"></td><td>complete: Tests took 575ms</td><tr><td class="linenos" data-pseudo-content="14"></td><td>[Mon Aug  8 15:17:35 2016] 127.0.0.1:47322 [201]: /api/products</td><tr><td class="linenos" data-pseudo-content="15"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/cb5971cf-180d-47ed-abf4-002378941134</td><tr><td class="linenos" data-pseudo-content="16"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="17"></td><td>info: Backend server was killed</td></table></code></pre>
<p>Next, we’ll implement <code>PATCH</code>. This targets an existing object, but accepts parameters in the same way as <code>POST</code>:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Update existing products [PATCH /api/products/1]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Update an existing product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>name (string) - The product name</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-bullet">+ </span>description (string) - The product description</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>price (float) - The product price</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-bullet">+ </span>attributes (string) - The product attributes</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-code">                "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-code">                "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-code">                "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-code">                "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-code">            }</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-code">              "id": 2,</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-code">              "name": "Blue widget",</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-code">              "description": "A blue widget",</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-code">              "price": 5.99,</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-code">              "attributes": "{\"colour\": \"blue\",\"size\": \"Small\"}",</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-code">              "created_at": "*",</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-code">              "updated_at": "*"</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>We add our new route:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;patch(<span class="hljs-string">'/api/products/{id}'</span>, <span class="hljs-string">'ProductController@update'</span>);</table></code></pre>
<p>And our <code>update()</code> method:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'description'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'price'</span> =&gt; <span class="hljs-string">'numeric'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'attributes'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Get product</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $product = <span class="hljs-keyword">$this</span>-&gt;product-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Update it</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'name'</span>)) {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            $product-&gt;name = $request-&gt;input(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'description'</span>)) {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $product-&gt;description = $request-&gt;input(<span class="hljs-string">'description'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'price'</span>)) {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $product-&gt;price = $request-&gt;input(<span class="hljs-string">'price'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">'attributes'</span>)) {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            $product-&gt;attributes = $request-&gt;input(<span class="hljs-string">'attributes'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment">// Save product</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        $product-&gt;save();</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($product, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td></table></code></pre>
<p>Here we can’t guarantee every parameter will exist, so we test for it. We run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 74ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47464 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 19ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47466 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="11"></td><td>pass: POST /api/products duration: 36ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47470 [201]: /api/products</td><tr><td class="linenos" data-pseudo-content="13"></td><td>[Mon Aug  8 15:27:14 2016] 127.0.0.1:47474 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="14"></td><td>pass: PATCH /api/products/1 duration: 34ms</td><tr><td class="linenos" data-pseudo-content="15"></td><td>complete: 4 passing, 0 failing, 0 errors, 0 skipped, 4 total</td><tr><td class="linenos" data-pseudo-content="16"></td><td>complete: Tests took 2579ms</td><tr><td class="linenos" data-pseudo-content="17"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/eae98644-44ad-432f-90<span class="hljs-built_in">fc</span>-5f73fa674f66</td><tr><td class="linenos" data-pseudo-content="18"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="19"></td><td>info: Backend server was killed</td></table></code></pre>
<p>One last method to implement - the <code>DELETE</code> method. Add this to <code>apiary.apib</code>:</p>
<pre><code class="hljs lang-markdown"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">## Delete products [DELETE /api/products/1]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Delete an existing product</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-bullet">+ </span>Request (application/json)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">+ </span>Response 200 (application/json)</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-code">    + Body</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-code">            {</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-code">                "status": "Deleted"</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-code">            }</span></td></table></code></pre>
<p>Next, add the route:</p>
<pre><code class="hljs lang-php singleline"><table>$app-&gt;delete(<span class="hljs-string">'/api/products/{id}'</span>, <span class="hljs-string">'ProductController@destroy'</span>);</table></code></pre>
<p>And the <code>destroy()</code> method in the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment">// Get product</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $product = <span class="hljs-keyword">$this</span>-&gt;product-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Delete product</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $product-&gt;delete();</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Return empty response</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'status'</span> =&gt; <span class="hljs-string">'deleted'</span>], <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td></table></code></pre>
<p>And let’s run Dredd again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ dredd</td><tr><td class="linenos" data-pseudo-content="2"></td><td>info: Configuration <span class="hljs-string">'./dredd.yml'</span> found, ignoring other arguments.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>info: Using apiary reporter.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>info: Starting server with <span class="hljs-built_in">command</span>: php -S localhost:3000 -t public/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>info: Waiting 3 seconds <span class="hljs-keyword">for</span> server <span class="hljs-built_in">command</span> to start...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>info: Beginning Dredd testing...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>pass: GET /api/products duration: 66ms</td><tr><td class="linenos" data-pseudo-content="8"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48664 [200]: /api/products</td><tr><td class="linenos" data-pseudo-content="9"></td><td>pass: GET /api/products/1 duration: 19ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48666 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="11"></td><td>pass: POST /api/products duration: 45ms</td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48670 [201]: /api/products</td><tr><td class="linenos" data-pseudo-content="13"></td><td>pass: PATCH /api/products/1 duration: 24ms</td><tr><td class="linenos" data-pseudo-content="14"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48674 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="15"></td><td>pass: DELETE /api/products/1 duration: 27ms</td><tr><td class="linenos" data-pseudo-content="16"></td><td>complete: 5 passing, 0 failing, 0 errors, 0 skipped, 5 total</td><tr><td class="linenos" data-pseudo-content="17"></td><td>complete: Tests took 713ms</td><tr><td class="linenos" data-pseudo-content="18"></td><td>[Mon Aug  8 15:57:44 2016] 127.0.0.1:48678 [200]: /api/products/1</td><tr><td class="linenos" data-pseudo-content="19"></td><td>complete: See results <span class="hljs-keyword">in</span> Apiary at: https://app.apiary.io/public/tests/run/a3e11d59-1dad-404b-9319-61ca5c0fcd15</td><tr><td class="linenos" data-pseudo-content="20"></td><td>info: Sending SIGTERM to the backend server</td><tr><td class="linenos" data-pseudo-content="21"></td><td>info: Backend server was killed</td></table></code></pre>
<p>Our REST API is now finished.</p>
<h2 id="generating-html-version-of-your-documentation">Generating HTML version of your documentation</h2>
<p>Now we have finished documenting and implementing our API, we need to generate an HTML version of it. One way is to use <code>aglio</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ aglio -i apiary.apib -o output.html</table></code></pre>
<p>This will write the documentation to <code>output.html</code>. There’s also scope for choosing different themes if you wish.</p>
<p>You can also use Apiary, which has the advantage that they’ll create a stub of your API so that if you need to work with the API before it’s finished being implemented, you can use that as a placeholder.</p>
<h2 id="summary">Summary</h2>
<p>The Blueprint language is a useful way of documenting your API, and makes it simple enough that it’s hard to weasel out of doing so. It’s worth taking a closer look at <a href="https://apiblueprint.org/">the specification</a> as it goes into quite a lot of detail. It’s hard to ensure that the documentation and implementation remain in sync, so it’s a good idea to use Dredd to ensure that any changes you make don’t invalidate the documentation. With Aglio or Apiary, you can easily convert the documentation into a more attractive format.</p>
<p>You’ll find the source code for this demo API <a href="https://github.com/matthewbdaly/demoapi">on Github</a>, so if you get stuck, take a look at that. I did have a fair few issues with whitespace, so bear that in mind if it behaves oddly. I’ve also noticed a few quirks, such as Dredd not working properly if a route returns a 204 response code, which is why I couldn’t use that for deleting - this <a href="https://github.com/apiaryio/dredd/issues/468">appears to be a bug</a>, but hopefully this will be resolved soon.</p>
<p>I’ll say it again, Dredd is not a substitute for proper unit tests, and under no circumstances should you use it as one. However, it can be very useful as a way to plan how your API will work and ensure that it complies with that plan, and to ensure that the implementation and documentation don’t diverge. Used as part of your normal continuous integration setup, Dredd can make sure that any divergence between the docs and the application is picked up on and fixed as quickly as possible, while also making writing documentation less onerous.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Using Jenkins pipelines]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/06/05/using-jenkins-pipelines/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/06/05/using-jenkins-pipelines/</guid>
            <pubDate>Sun, 05 Jun 2016 15:32:15 GMT</pubDate>
            <description><![CDATA[<p>I use Jenkins as my main continuous integration solution at work, largely for two reasons:</p>
<ul>
<li>It generally works out cheaper to host it ourselves than to use one of the paid CI solutions for closed-source projects</li>
<li>The size of the plugin ecosystem</li>
</ul>
<p>However, we also use Travis CI for testing one or two open-source projects, and one distinct advantage Travis has is the way you can configure it using a single text file.</p>
<p>With the Pipeline plugin, it’s possible to define the steps required to run your tests in a <code>Jenkinsfile</code> and then set up a Pipeline job which reads that file from the version control system and runs it accordingly. Here’s a sample <code>Jenkinsfile</code> for a Laravel project:</p>
<pre><code class="hljs lang-groovy"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>node {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>   <span class="hljs-comment">// Mark the code checkout 'stage'....</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>   stage <span class="hljs-string">'Checkout'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-comment">// Get some code from a Bitbucket repository</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>   git <span class="hljs-string">credentialsId:</span> <span class="hljs-string">'5239c33e-10ab-4c1b-a4a0-91b96a07955e'</span>, <span class="hljs-string">url:</span> <span class="hljs-string">'git@bitbucket.org:matthewbdaly/my-app.git'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>   <span class="hljs-comment">// Install dependencies</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>   stage <span class="hljs-string">'Install dependencies'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>   <span class="hljs-comment">// Run Composer</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   sh <span class="hljs-string">'composer install'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>   <span class="hljs-comment">// Test stage</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>   stage <span class="hljs-string">'Test'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>   <span class="hljs-comment">// Run the tests</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>   sh <span class="hljs-string">"vendor/bin/phpunit"</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>}</td></table></code></pre>
<p>Note the steps it’s broken down into:</p>
<ul>
<li><code>stage</code> defines the start of a new stage in the build</li>
<li><code>git</code> defines a point where we check out the code from the repository</li>
<li><code>sh</code> defines a point where we run a shell command</li>
</ul>
<p>Using these three commands it’s straightforward to define a fairly simple build process for your application in a way that’s more easily repeatable when creating new projects - for instance, you can copy this over to a new project and change the source repository URL and you’re pretty much ready to go.</p>
<p>Unfortunately, support for the Pipeline plugin is missing from a lot of Jenkins plugins - for instance, I can’t publish the XML coverage reports. This is something of a deal-breaker for most of my projects as I use these kind of report plugins a lot - it’s one of the reasons I chose Jenkins over Travis. Still, this is definitely a big step forward, and if you don’t need this kind of reporting then there’s no reason not to consider using the Pipeline plugin for your Jenkins jobs. Hopefully in future more plugins will be amended to work with Pipeline so that it’s more widely usable.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Adding Google AMP support to my site]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/05/22/adding-google-amp-support-to-my-site/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/05/22/adding-google-amp-support-to-my-site/</guid>
            <pubDate>Sun, 22 May 2016 22:29:34 GMT</pubDate>
            <description><![CDATA[<p>You may have heard of Google’s <a href="https://www.ampproject.org/">AMP Project</a>, which allows you to create mobile-optimized pages using a subset of HTML. After seeing the sheer speed at which you can load an AMP page (practically instantaneous in many cases), I was eager to see if I could apply it to my own site.</p>
<p>I still wanted to retain the existing functionality for my site, such as comments and search, so I elected not to rewrite the whole thing to make it AMP-compliant. Instead, I opted to create AMP versions of every blog post, and link to them from the original. This preserves the advantages of AMP since search engines will be able to discover it from the header of the original, while allowing those wanting a richer experience to view the original, where the comments are hosted. You can now view the AMP version of any post by appending <code>amp/</code> to its URL.</p>
<p>The biggest problem was the images in the post body, as the <code>&lt;img&gt;</code> tag needs to be replaced by the <code>&lt;amp-img&gt;</code> tag, which also requires an explicit height and width. I wound up amending the renderer for AMP pages to render an image tag as an empty string, since I have only ever used one image in the post body and I think I can live without them.</p>
<p>It’s also a bit of a pain styling it as it will be awkward to use Bootstrap. I’ve therefore opted to skip Bootstrap for now and write my own fairly basic theme for the AMP pages instead.</p>
<p>It’ll be interesting to see what effect having the AMP versions of the pages available will have on my site in terms of search results. It obviously takes some time before the page gets crawled, and until then the AMP version won’t be served from the CDN used by AMP, so I really can’t guess what effect it will have right now.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Broadcasting events with Laravel and Socket.io]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</guid>
            <pubDate>Sat, 14 May 2016 20:00:00 GMT</pubDate>
            <description><![CDATA[<p>PHP frameworks like Laravel aren’t really set up to handle real-time events properly, so if you want to build a real-time app, you’re generally better off with another platform, such as Node.js. However, if that only forms a small part of your application, you may still prefer to work with PHP. Fortunately it’s fairly straightforward to hand off the real-time aspects of your application to a dedicated microservice written using Node.js and still use Laravel to handle the rest of the functionality.</p>
<p>Here I’ll show you how I built a Laravel app that uses a separate Node.js script to handle sending real-time updates to the user.</p>
<h2 id="events-in-laravel">Events in Laravel</h2>
<p>In this case, I was building a REST API to serve as the back end for a Phonegap app that allowed users to message each other. The API includes an endpoint that allows users to create and fetch messages. Now, in theory, we could just repeatedly poll the endpoint for new messages, but that would be inefficient. What we needed was a way to notify users of new messages in real time, which seemed like the perfect opportunity to use Socket.io.</p>
<p>Laravel comes with a simple, but robust system that allows you to broadcast events to a Redis server. Another service can then listen for these events and carry out jobs on them, and there is no reason why this service has to be written in PHP. This makes it easy to decouple your application into smaller parts. In essence the functionality we wanted was as follows:</p>
<ul>
<li>Receive message</li>
<li>Push message to Redis</li>
<li>Have a separate service pick up message on Redis</li>
<li>Push message to clients</li>
</ul>
<p>First off, we need to define an event in our Laravel app. You can create a boilerplate with the following Artisan command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ php artisan make:event NewMessage</table></code></pre>
<p>This will create the file <code>app/Events/NewMessage.php</code>. You can then customise this as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">Event</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Message</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">ShouldBroadcast</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcast</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> $message;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     * Create a new event instance.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Message $message)</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Get message</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;message = $message;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     * Get the channels the event should be broadcast on.</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     * <span class="hljs-doctag">@return</span> array</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> [<span class="hljs-string">'room_'</span>.<span class="hljs-keyword">$this</span>-&gt;message-&gt;room_id];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}</td></table></code></pre>
<p>This particular event is a class that accepts a single argument, which is an instance of the <code>Message</code> model. This model includes an attribute of <code>room_id</code> that is used to determine which room the message is posted to - note that this is returned in the <code>broadcastOn()</code> method.</p>
<p>When we want to trigger our new event, we can do so as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">NewMessage</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Event::fire(<span class="hljs-keyword">new</span> NewMessage($message));</td></table></code></pre>
<p>Here, <code>$message</code> is the saved Eloquent object containing the message. Note the use of <code>SerializesModels</code> - this means that the Eloquent model is serialized into JSON when broadcasting the event.</p>
<p>We also need to make sure Redis is set as our broadcast driver. Ensure the Composer package <code>predis/predis</code> is installed, and set <code>BROADCAST_DRIVER=redis</code> in your <code>.env</code> file. Also, please note that I found that setting <code>QUEUE_DRIVER=redis</code> in <code>.env</code> as well broke the broadcasting system, so it looks like you can’t use Redis as both a queue and a broadcasting system unless you set up multiple connections.</p>
<p>Next, we need another server-side script to handle processing the received events and pushing the messages out. In my case, this was complicated by the fact that we were using HTTPS, courtesy of Let’s Encrypt. I installed the required dependencies for the Node.js script as follows:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install socket.io socket.io-client ioredis --save-dev</table></code></pre>
<p>Here’s an example Node.js script for processing the events:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> pkey = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/privkey.pem'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> pcert = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/fullchain.pem'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> options = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  key: pkey,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  cert: pcert</td><tr><td class="linenos" data-pseudo-content="8"></td><td>};</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">'https'</span>).createServer(options);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)(app);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ioredis'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> redis = <span class="hljs-keyword">new</span> Redis();</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>app.listen(<span class="hljs-number">9000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Server is running!'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handler</span>(<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    res.setHeader(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    res.writeHead(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    res.end(<span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>}</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>io.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>redis.psubscribe(<span class="hljs-string">'*'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, count</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>});</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>redis.on(<span class="hljs-string">'pmessage'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">subscribed, channel, message</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    message = <span class="hljs-built_in">JSON</span>.parse(message);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Channel is '</span> + channel + <span class="hljs-string">' and message is '</span> + message);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    io.emit(channel, message.data);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>});</td></table></code></pre>
<p>Note we use the <code>https</code> module instead of the <code>http</code> one, and we pass the key and certificate as options to the server. This server runs on port 9000, but feel free to move it to any arbitrary port you wish. In production, you’d normally use something like Supervisor or systemd to run a script like this as a service.</p>
<p>Next, we need a client-side script to connect to the Socket.io instance and handle any incoming messages. Here’s a very basic example that just dumps them to the browser console:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.location.protocol + <span class="hljs-string">'//'</span> + <span class="hljs-built_in">window</span>.location.hostname;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> socket = io(url, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-string">'secure'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-string">'reconnect'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-string">'reconnection delay'</span>: <span class="hljs-number">500</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-string">'max reconnection attempts'</span>: <span class="hljs-number">10</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>});</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> chosenEvent = <span class="hljs-string">'room_'</span> + room.id;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>socket.on(chosenEvent, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-built_in">console</span>.log(data);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>});</td></table></code></pre>
<p>Finally, we need to configure our web server. I’m using Nginx with PHP-FPM and PHP 7, and this is how I configured it:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">upstream</span> websocket {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9000</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">listen</span>         <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">add_header</span> X-Frame-Options SAMEORIGIN;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">gzip_proxied</span> any;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-attribute">gzip_types</span> text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml-rss text/javascript text/js application/json;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-attribute">fastcgi_index</span> index.php;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.well-known</span> {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-attribute">allow</span> all;</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-attribute">location</span> /socket.io {</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">"upgrade"</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-attribute">proxy_pass</span> https://websocket;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>}</td></table></code></pre>
<p>Any requests to <code>/socket.io</code> are proxied to port 9000, where our chat handling script is listening. Note that we allow the HTTPS connection to be upgraded to a WebSocket one.</p>
<p>Once that’s done, you just need to restart your PHP application and Nginx, and start running your chat script, and everything should be working fine. If it isn’t, the command <code>redis-cli monitor</code> is invaluable in verifying that the event is being published correctly.</p>
<h2 id="summary">Summary</h2>
<p>Getting this all working together did take quite a bit of trial and error, but that was mostly a matter of configuration. Actually implementing this is pretty straightforward, and it’s an easy way to add some basic real-time functionality to an existing Laravel application.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Writing faster Laravel tests]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/04/04/writing-faster-laravel-tests/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/04/04/writing-faster-laravel-tests/</guid>
            <pubDate>Mon, 04 Apr 2016 19:55:15 GMT</pubDate>
            <description><![CDATA[<p>Nowadays, Laravel tends to be my go-to PHP framework, to the point that we use it as our default framework at work. A big part of this is that Laravel is relatively easy to test, making practicing TDD a lot easier.</p>
<p>Out of the box running Laravel tests can be quite slow, which is a big issue - if your test suite takes several minutes to run, that’s a huge disruption. Also, Laravel doesn’t create a dedicated test database - instead it runs the tests against the same database you’re using normally, which is almost always not what you want. I’ll show you how to set up a dedicated test database, and how to use an in-memory SQLite database for faster tests. This results in cleaner and easier-to-maintain tests, since you can be sure the test database is restored to a clean state at the end of every test.</p>
<h2 id="setup">Setup</h2>
<p>Our first step is to make sure that when a new test begins, the following should happen:</p>
<ul>
<li>We should create a new transaction</li>
<li>We should empty and migrate our database</li>
</ul>
<p>Then, at the end of each test:</p>
<ul>
<li>We should roll back our transaction to restore the database to its prior state</li>
</ul>
<p>To do so, we can create custom <code>setUp()</code> and <code>tearDown()</code> methods for our base <code>TestCase</code> class. Save this in <code>tests/TestCase.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="6"></td><td>     * The base URL to use while testing the application.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">protected</span> $baseUrl = <span class="hljs-string">'http://localhost'</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * Creates the application.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Foundation\Application</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createApplication</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        $app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> $app;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">parent</span>::setUp();</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::beginTransaction();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        Artisan::call(<span class="hljs-string">'migrate:refresh'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        DB::rollBack();</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">parent</span>::tearDown();</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>}</td></table></code></pre>
<p>That takes care of building up and tearing down our database for each test.</p>
<p>EDIT: Turns out there’s actually a much easier way of doing this already included in Laravel. Just import and add either <code>use DatabaseMigrations;</code> or <code>use DatabaseTransactions;</code> to the <code>TestCase</code> class. The first will roll back the database and migrate it again after each test, while the second wraps each test in a transaction.</p>
<h2 id="using-an-in-memory-sqlite-database-for-testing-purposes">Using an in-memory SQLite database for testing purposes</h2>
<p>It’s not always practical to do this, especially if you rely on database features in PostgreSQL that aren’t available in SQLite, but if it is, it’s probably worth using an in-memory SQLite database for your tests. If you want to do so, here’s some example settings you might want to use in <code>phpunit.xml</code>:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"APP_ENV"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testing"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CACHE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"array"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_CONNECTION"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlite"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_DATABASE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">":memory:"</span>/&gt;</span></td></table></code></pre>
<p>This can result in a very significant speed boost.</p>
<p>I would still recommend that you test against your production database, but this can be easily handed off to a continuous integration server such as Jenkins, since that way it won’t disrupt your workflow. </p>
<p>During TDD, you’ll typically run your tests several times for any change you make, so if they’re too slow it can have a disastrous effect on your productivity. But with a few simple changes like this, you can ensure your tests run as quickly as possible. This approach should also be viable for Lumen apps.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Building a location aware web app with GeoDjango]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/</guid>
            <pubDate>Sat, 26 Mar 2016 21:30:29 GMT</pubDate>
            <description><![CDATA[<p>PostgreSQL has excellent support for geographical data thanks to the PostGIS extension, and Django allows you to take full advantage of it thanks to GeoDjango. In this tutorial, I’ll show you how to use GeoDjango to build a web app that allows users to search for gigs and events near them.</p>
<h2 id="requirements">Requirements</h2>
<p>I’ve made the jump to Python 3, and if you haven’t done so yet, I highly recommend it - it’s not hard, and there’s very few modules left that haven’t been ported across. As such, this tutorial assumes you’re using Python 3. You’ll also need to have Git, PostgreSQL and PostGIS installed - I’ll leave the details of doing so up to you as it varies by platform, but you can generally do so easily with a package manager on most Linux distros. On Mac OS X I recommend using Homebrew. If you’re on Windows I think your best bet is probably to use a Vagrant VM.</p>
<p>We’ll be using Django 1.9 - if by the time you read this a newer version of Django is out, it’s quite possible that some things may have changed and you’ll need to work around any problems caused. Generally search engines are the best place to look for this, and I’ll endeavour to keep the resulting Github repository as up to date as I can, so try those if you get stuck.</p>
<h2 id="getting-started">Getting started</h2>
<p>First of all, let’s create our database. Make sure you’re running as a user that has the required privileges to create users and databases for PostgreSQL and run the following command:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createdb gigfinder</table></code></pre>
<p>This creates the database. Next, we create the user:</p>
<pre><code class="hljs lang-bash singleline"><table>$ createuser <span class="hljs-_">-s</span> giguser -P</table></code></pre>
<p>You’ll be prompted to enter a password for the new user. Next, we want to use the <code>psql</code> command-line client to interact with our new database:</p>
<pre><code class="hljs lang-bash singleline"><table>$ psql gigfinder</table></code></pre>
<p>This connects to the database. Run these commands to set up access to the database and install the PostGIS extension:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE gigfinder TO giguser;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># CREATE EXTENSION postgis;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>With our database set up, it’s time to start work on our project. Let’s create our virtualenv in a new folder:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pyvenv venv</table></code></pre>
<p>Then activate it:</p>
<pre><code class="hljs lang-bash singleline"><table>$ <span class="hljs-built_in">source</span> venv/bin/activate</table></code></pre>
<p>Then we install Django, along with a few other production dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip install django-toolbelt</table></code></pre>
<p>And record our dependencies:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip freeze &gt; requirements.txt</table></code></pre>
<p>Next, we create our application skeleton:</p>
<pre><code class="hljs lang-bash singleline"><table>$ django-admin.py startproject gigfinder .</table></code></pre>
<p>We’ll also create a <code>.gitignore</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>.DS_Store</td><tr><td class="linenos" data-pseudo-content="3"></td><td>*.swp</td><tr><td class="linenos" data-pseudo-content="4"></td><td>node_modules/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>*.pyc</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git init</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git add .gitignore requirements/txt manage.py gigfinder</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git commit -m <span class="hljs-string">'Initial commit'</span></td></table></code></pre>
<p>Next, let’s create our first app, which we will call <code>gigs</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py startapp gigs</table></code></pre>
<p>We need to add our new app to the <code>INSTALLED_APPS</code> setting. While we’re there we’ll also add GIS support and set up the database connection. First, add the required apps to <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>]</td></table></code></pre>
<p>Next, configure the database:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>         <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.contrib.gis.db.backends.postgis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>         <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'gigfinder'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>         <span class="hljs-string">'USER'</span>: <span class="hljs-string">'giguser'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>         <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Let’s run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: sessions, contenttypes, admin, auth</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  Applying admin.0002_logentry_remove_auto_add... OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Applying contenttypes.0002_remove_content_type_name... OK</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0007_alter_validators_add_error_messages... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying sessions.0001_initial... OK</td></table></code></pre>
<p>And create our superuser account:</p>
<pre><code class="hljs lang-bash singleline"><table>$ python manage.py createsuperuser</table></code></pre>
<p>Now, we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Created gigs app'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master e72a846] Created gigs app</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 8 files changed, 24 insertions(+), 3 deletions(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/__init__.py</td><tr><td class="linenos" data-pseudo-content="6"></td><td> create mode 100644 gigs/admin.py</td><tr><td class="linenos" data-pseudo-content="7"></td><td> create mode 100644 gigs/apps.py</td><tr><td class="linenos" data-pseudo-content="8"></td><td> create mode 100644 gigs/migrations/__init__.py</td><tr><td class="linenos" data-pseudo-content="9"></td><td> create mode 100644 gigs/models.py</td><tr><td class="linenos" data-pseudo-content="10"></td><td> create mode 100644 gigs/tests.py</td><tr><td class="linenos" data-pseudo-content="11"></td><td> create mode 100644 gigs/views.py</td></table></code></pre>
<h2 id="our-first-model">Our first model</h2>
<p>At this point, it’s worth thinking about the models we plan for our app to have. First we’ll have a <code>Venue</code> model that contains details of an individual venue, which will include a name and a geographical location. We’ll also have an <code>Event</code> model that will represent an individual gig or event at a venue, and will include a name, date/time and a venue as a foreign key.</p>
<p>Before we start writing our first model, we need to write a test for it, but we also need to be able to create objects easily in our tests. We also want to be able to easily examine our objects, so we’ll install iPDB and Factory Boy:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install ipdb factory-boy</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Next, we write a test for the <code>Venue</code> model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Note that we randomly generate our location - this is done as suggested in <a href="http://stackoverflow.com/questions/32828890/using-factory-boy-with-geodjango-pointfields">this Stack Overflow post</a>.</p>
<p>Now, running our tests brings up an expected error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Venue'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s create our <code>Venue</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>For now, we’re just creating a simple dummy model. Note that we import <code>models</code> from <code>django.contrib.gis.db</code> instead of the usual place - this gives us access to the additional geographical fields.</p>
<p>If we run our tests again we get an error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_venue"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_venue"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_venue"</span> ORDER BY <span class="hljs-string">"gigs_ve...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_venue<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_venue<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_venue<span class="hljs-string">" ORDER BY "</span>gigs_ve...</td></table></code></pre>
<p>Let’s update our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td></table></code></pre>
<p>Then create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0001_initial.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Venue</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: gigs, sessions, contenttypes, auth, admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0001_initial... OK</td></table></code></pre>
<p>Then if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.362s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They should pass. Note that Django may complain about needing to delete the test database before running the tests, but this should not cause any problems. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Venue model in place'</span></td></table></code></pre>
<p>With our venue done, let’s turn to our <code>Event</code> model. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Then we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue, Event</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Event'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>As expected, this fails, so create an empty <code>Event</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests now will raise an error due to the table not existing:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_event"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_event"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_event"</span> ORDER BY <span class="hljs-string">"gigs_ev...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_event<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_event<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_event<span class="hljs-string">" ORDER BY "</span>gigs_ev...</td></table></code></pre>
<p>So let’s populate our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    venue = models.ForeignKey(Venue)</td></table></code></pre>
<p>And create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0002_event.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Event</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: auth, admin, sessions, contenttypes, gigs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0002_event... OK</td></table></code></pre>
<p>And run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.033s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Again, you may be prompted to delete the test database, but this should not be an issue.</p>
<p>With this done, let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Event model'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 47ba686] Added Event model</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 67 insertions(+), 1 deletion(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/migrations/0002_event.py</td></table></code></pre>
<h2 id="setting-up-the-admin">Setting up the admin</h2>
<p>For an application like this, you’d expect the curators of the site to maintain the gigs and venues stored in the database, and that’s an obvious use case for the Django admin. So let’s set our models up to be available in the admin. Open up <code>gigs/admin.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(Venue)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Now, if you start up the dev server as usual with <code>python manage.py runserver</code> and visit <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a>, you can see that our <code>Event</code> and <code>Venue</code> models are now available. However, the string representations of them are pretty useless. Let’s fix that. First, we amend our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td></table></code></pre>
<p>Next, we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>FF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_event (gigs.tests.EventTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 74, <span class="hljs-keyword">in</span> test_create_event</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: <span class="hljs-string">'Event object'</span> != <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>- Event object</td><tr><td class="linenos" data-pseudo-content="12"></td><td>+ Queens of the Stone Age - Wembley Arena</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="16"></td><td>FAIL: test_create_venue (gigs.tests.VenueTest)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 52, <span class="hljs-keyword">in</span> test_create_venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>AssertionError: <span class="hljs-string">'Venue object'</span> != <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>- Venue object</td><tr><td class="linenos" data-pseudo-content="23"></td><td>+ Wembley Arena</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.059s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (failures=2)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They fail as expected. So let’s update <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> self.name</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    venue = models.ForeignKey(Venue)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"%s - %s"</span> % (self.name, self.venue.name)</td></table></code></pre>
<p>For the venue, we just use the name. For the event, we use the event name and the venue name.</p>
<p>Now, we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.048s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added models to admin'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 65d051f] Added models to admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 15 insertions(+), 1 deletion(-)</td></table></code></pre>
<p>Our models are now in place, so you may want to log into the admin and create a few venues and events so you can see it in action. Note that the location field for the <code>Venue</code> model creates a map widget that allows you to select a geographical location. It is a bit basic, however, so let’s make it better. Let’s install <code>django-floppyforms</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip install django-floppyforms</table></code></pre>
<p>And add it to our requirements:</p>
<pre><code class="hljs lang-bash singleline"><table>$ pip install -r requirements.txt</table></code></pre>
<p>Then add it to <code>INSTALLED_APPS</code> in <code>gigfinder/setttings.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'floppyforms'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>]</td></table></code></pre>
<p>Now we create a custom point widget for our admin, a custom form for the venues, and a custom venue admin:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> ModelForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> floppyforms.gis <span class="hljs-keyword">import</span> PointWidget, BaseGMapWidget</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPointWidget</span><span class="hljs-params">(PointWidget, BaseGMapWidget)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Media</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        js = (<span class="hljs-string">'/static/floppyforms/js/MapWidget.js'</span>,)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdminForm</span><span class="hljs-params">(ModelForm)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        fields = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'location'</span>]</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        widgets = {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'location'</span>: CustomPointWidget()</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    form = VenueAdminForm</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>admin.site.register(Venue, VenueAdmin)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Note in particular that we define the media for our widget so we can include some required Javascript. If you run the dev server again, you should see that the map widget in the admin is now provided by Google Maps, making it much easier to identify the correct location of the venue.</p>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/ requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Customised location widget'</span></td></table></code></pre>
<p>With our admin ready, it’s time to move on to the user-facing part of the web app.</p>
<h2 id="creating-our-views">Creating our views</h2>
<p>We will keep the front end for this app as simple as possible for the purposes of this tutorial, but of course you should feel free to expand upon this as you see fit. What we’ll do is create a form that uses HTML5 geolocation to get the user’s current geographical coordinates. It will then return events in the next week, ordered by how close the venue is. Please note that there are plans afoot in some browsers to prevent HTML5 geolocation from working unless content is server over HTTPS, so that may complicate things.</p>
<p>How do we query the database to get this data? It’s not too difficult, as shown in this example:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py shell</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Python 3.5.1 (default, Mar 25 2016, 00:17:15)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Type <span class="hljs-string">"copyright"</span>, <span class="hljs-string">"credits"</span> or <span class="hljs-string">"license"</span> <span class="hljs-keyword">for</span> more information.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>IPython 4.1.2 -- An enhanced Interactive Python.</td><tr><td class="linenos" data-pseudo-content="6"></td><td>?         -&gt; Introduction and overview of IPython<span class="hljs-string">'s features.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>%quickref -&gt; Quick reference.</td><tr><td class="linenos" data-pseudo-content="8"></td><td>help      -&gt; Python'</span>s own <span class="hljs-built_in">help</span> system.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>object?   -&gt; Details about <span class="hljs-string">'object'</span>, use <span class="hljs-string">'object??'</span> <span class="hljs-keyword">for</span> extra details.</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>In [1]: from gigs.models import *</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>In [2]: from django.contrib.gis.geos import Point</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>In [3]: from django.contrib.gis.db.models.functions import Distance</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>In [4]: location = Point(52.3749159, 1.1067473, srid=4326)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>In [5]: Venue.objects.all().annotate(distance=Distance(<span class="hljs-string">'location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Out[5]: [&lt;Venue: Diss Corn Hall&gt;, &lt;Venue: Waterfront Norwich&gt;, &lt;Venue: UEA Norwich&gt;, &lt;Venue: Wembley Arena&gt;]</td></table></code></pre>
<p>I’ve set up a number of venues using the admin, one round the corner, two in Norwich, and one in London. I then imported the models, the <code>Point</code> class, and the <code>Distance</code> function, and created a <code>Point</code> object. Note that the <code>Point</code> is passed three fields - the first and second are the latitude and longitude, respectively, while the <code>srid</code> field takes a value of <code>4326</code>. This field represents the <a href="https://en.wikipedia.org/wiki/SRID">Spatial Reference System Identifier</a> used for this query - we’ve gone for <a href="https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84">WGS 84</a>, which is a common choice and is referred to with the SRID 4326.</p>
<p>Now, we want the user to be able to submit the form and get the 5 nearest events in the next week. We can get the date for this time next week as follows:</p>
<pre><code class="hljs lang-python singleline"><table>In [<span class="hljs-number">6</span>]: next_week = timezone.now() + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</table></code></pre>
<p>Then we can get the events we want, sorted by distance, like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">7</span>]: Event.objects.filter(datetime__gte=timezone.now()).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">7</span>]: [&lt;Event: Primal Scream - UEA Norwich&gt;, &lt;Event: Queens of the Stone Age - Wembley Arena&gt;]</td></table></code></pre>
<p>With that in mind, let’s write the test for our view. The view should contain a single form that accepts a user’s geographical coordinates - for convenience we’ll autocomplete this with HTML5 geolocation. On submit, the user should see a list of the five closest events in the next week.</p>
<p>First, let’s test the GET request. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    Test lookup view</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py test gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to <span class="hljs-keyword">import</span> test module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">428</span>, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">369</span>, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot <span class="hljs-keyword">import</span> name <span class="hljs-string">'LookupView'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our first issue is that we can’t import the view in the test. Let’s fix that by amending <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests again results in the following:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 88, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 600, <span class="hljs-keyword">in</span> reverse</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> force_text(iri_to_uri(resolver._reverse_with_prefix(view, prefix, *args, **kwargs)))</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 508, <span class="hljs-keyword">in</span> _reverse_with_prefix</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    (lookup_view_s, args, kwargs, len(patterns), patterns))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>django.core.urlresolvers.NoReverseMatch: Reverse <span class="hljs-keyword">for</span> <span class="hljs-string">'lookup'</span> with arguments <span class="hljs-string">'()'</span> and keyword arguments <span class="hljs-string">'{}'</span> not found. 0 pattern(s) tried: []</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.154s</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can’t resolve the URL for our new view, so we need to add it to our URLconf. First of all, save this as <code>gigs/urls.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Lookup</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    url(<span class="hljs-string">r''</span>, LookupView.as_view(), name=<span class="hljs-string">'lookup'</span>),</td><tr><td class="linenos" data-pseudo-content="7"></td><td>]</td></table></code></pre>
<p>Then amend <code>gigfinder/urls.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Gig URLs</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'gigs.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>]</td></table></code></pre>
<p>Then run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 90, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.417s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We get a 405 response because the view does not accept GET requests. Let’s resolve that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>If we run our tests now:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 89, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 6, <span class="hljs-keyword">in</span> get</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookup.html</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.409s</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We see that the template is not defined. Save the following as <code>gigs/templates/gigs/includes/base.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Gig finder<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Gig Finder<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-2.2.2.min.js"</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha256-36cp2Co+/62rEAAYHLmRCPIych47CvdM+uTBJwSzWjI="</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>And the following as <code>gigs/templates/gigs/lookup.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"latitude"</span>&gt;</span>Latitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_latitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"latitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"longitude"</span>&gt;</span>Longitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_longitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"longitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        navigator.geolocation.getCurrentPosition(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">var</span> lat = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_latitude'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-keyword">var</span> lon = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_longitude'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            lat.value = position.coords.latitude;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            lon.value = position.coords.longitude;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Note the JavaScript to populate the latitude and longitude. Now, if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 1.814s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Success! We now render our form as expected. Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs gigfinder</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented GET handler'</span></td></table></code></pre>
<h2 id="handling-post-requests">Handling POST requests</h2>
<p>Now we need to be able to handle POST requests and return the appropriate results. First, let’s write a test for it in our existing <code>LookupViewTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create venues to return</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        v1 = VenueFactory(name=<span class="hljs-string">'Venue1'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        v2 = VenueFactory(name=<span class="hljs-string">'Venue2'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        v3 = VenueFactory(name=<span class="hljs-string">'Venue3'</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        v4 = VenueFactory(name=<span class="hljs-string">'Venue4'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        v5 = VenueFactory(name=<span class="hljs-string">'Venue5'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        v6 = VenueFactory(name=<span class="hljs-string">'Venue6'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        v7 = VenueFactory(name=<span class="hljs-string">'Venue7'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        v8 = VenueFactory(name=<span class="hljs-string">'Venue8'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        v9 = VenueFactory(name=<span class="hljs-string">'Venue9'</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        v10 = VenueFactory(name=<span class="hljs-string">'Venue10'</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Create events to return</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        e1 = EventFactory(name=<span class="hljs-string">'Event1'</span>, venue=v1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        e2 = EventFactory(name=<span class="hljs-string">'Event2'</span>, venue=v2)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        e3 = EventFactory(name=<span class="hljs-string">'Event3'</span>, venue=v3)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        e4 = EventFactory(name=<span class="hljs-string">'Event4'</span>, venue=v4)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        e5 = EventFactory(name=<span class="hljs-string">'Event5'</span>, venue=v5)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        e6 = EventFactory(name=<span class="hljs-string">'Event6'</span>, venue=v6)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        e7 = EventFactory(name=<span class="hljs-string">'Event7'</span>, venue=v7)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        e8 = EventFactory(name=<span class="hljs-string">'Event8'</span>, venue=v8)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        e9 = EventFactory(name=<span class="hljs-string">'Event9'</span>, venue=v9)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        e10 = EventFactory(name=<span class="hljs-string">'Event10'</span>, venue=v10)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Set parameters</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        lat = <span class="hljs-number">52.3749159</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        lon = <span class="hljs-number">1.1067473</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Put together request</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'latitude'</span>: lat,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'longitude'</span>: lon</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'lookup'</span>), data)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookupresults.html'</span>)</td></table></code></pre>
<p>If we now run this test:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 117, <span class="hljs-keyword">in</span> test_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 1.281s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can see that it fails because the POST method is not supported. Now we can start work on implementing it. First, let’s create a form in <code>gigs/forms.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> Form, FloatField</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupForm</span><span class="hljs-params">(Form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    latitude = FloatField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    longitude = FloatField()</td></table></code></pre>
<p>Next, edit <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            })</td></table></code></pre>
<p>Note that we’re switching from a <code>View</code> to a <code>FormView</code> so that it can more easily handle our form. We could render the form using this as well, but as it’s a simple form I decided it wasn’t worth the bother. Also, note that the longitude goes first - this caught me out as I expected the latitude to be the first argument.</p>
<p>Now, if we run our tests, they should complain about our missing template:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 116, <span class="hljs-keyword">in</span> test_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/edit.py"</span>, line 222, <span class="hljs-keyword">in</span> post</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> self.form_valid(form)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 31, <span class="hljs-keyword">in</span> form_valid</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookupresults.html</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.506s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So let’s create <code>gigs/templates/gigs/lookupresults.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> event <span class="hljs-keyword">in</span> events %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ event.name }}</span><span class="xml"> - </span><span class="hljs-template-variable">{{ event.venue.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.728s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>However, if we try actually submitting the form by hand, we get the error <code>CSRF token missing or incorrect</code>. Edit <code>views.py</code> as follows to resolve this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> RequestContext</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>, RequestContext(request))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            })</td></table></code></pre>
<p>Here we’re adding the request context so that the CSRF token is available.</p>
<p>If you run the dev server, add a few events and venues via the admin, and submit a search, you’ll see that you’re returning events closest to you first.</p>
<p>Now that we can submit searches, we’re ready to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Can now retrieve search results'</span></td></table></code></pre>
<p>And we’re done! Of course, you may want to expand on this by plotting each gig venue on a map, or something like that, in which case there’s plenty of methods of doing so - you can retrieve the latitude and longitude in the template and use Google Maps to display them. I’ll leave doing so as an exercise for the reader.</p>
<p>I can’t say that working with GeoDjango isn’t a bit of a struggle at times, but being able to make spatial queries in this fashion is very useful. With more and more people carrying smartphones, you’re more likely than ever to be asked to build applications that return data based on someone’s geographical location, and GeoDjango is a great way to do this with a Django application. You can find the source on <a href="https://github.com/matthewbdaly/gigfinder">Github</a>.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[My experience using PHP 7 in production]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/03/18/my-experience-using-php-7-in-production/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/03/18/my-experience-using-php-7-in-production/</guid>
            <pubDate>Fri, 18 Mar 2016 19:42:37 GMT</pubDate>
            <description><![CDATA[<p>In the last couple of weeks I’ve been working on a PHP web app. Nothing unusual there, except this was the first time we’d used PHP 7 in production. We discussed the possibility a while back, and eventually decided that for certain projects we’d use PHP 7 without waiting another year or so (or maybe longer) for a version of Debian stable with it by default. I wanted to talk about how our experience has been using it in production.</p>
<h2 id="background">Background</h2>
<p>We’ve never really had a fixed stack that we work with at work before until recently - it was largely based on personal preferences and experience. For many jobs, especially content-based sites, we generally used WordPress - it has its issues, but it does fine for a lot of work. For more complex websites, I tended to use CodeIgniter because I’d learned it during my previous job and knew it fairly well, but I was not terribly happy with it - it’s a bit too basic and simplistic, as well as being somewhat behind the times, and I only really kept using it through inertia. For mobile app backends, I tended to use Django, partly for the admin interface, and partly because Django REST Framework makes it easy to build a REST API quickly and easily in a way that wasn’t viable with CodeIgniter.</p>
<p>This state of affairs couldn’t really continue. I love Python and Django, but I was the only one at work who had ever used Python, so in the event I got hit by a bus there would have been no-one who could have taken over from me. As for CodeIgniter, it was clearly falling further and further behind the curve, and I was sick of it and looking to replace it. Ideally we needed a PHP framework as both myself and my colleague knew it.</p>
<p>I’d also been playing around with Laravel on a few little projects, but I didn’t get the chance to use it for a new web app until autumn last year. Around the same time, we hired a third developer, who also had some experience using Laravel. In addition, the presence of Lumen meant that we could use that for smaller apps or services that were too small to use Laravel. We therefore decided to adopt Laravel as our default framework - in future we’d only use something else if there was a particular justification for it. I was rather sad to have to abandon Django for work, but pleased to have something more modern than CodeIgniter for PHP projects.</p>
<p>This also enabled us to standardize our new server builds. Over the last year or so I’ve been pushing to automate what we can of our server setup using Ansible. We now have two standard stacks that we plan to use for future projects. One is for WordPress sites and consists of:</p>
<ul>
<li>Debian stable</li>
<li>Apache</li>
<li>MySQL</li>
<li>PHP 5.6</li>
<li>Memcached</li>
<li>Varnish</li>
</ul>
<p>The other is for Laravel or Lumen web apps or APIs and consists of:</p>
<ul>
<li>Debian stable</li>
<li>Nginx</li>
<li>PHP 7</li>
<li>PostgreSQL</li>
<li>Redis</li>
</ul>
<p>It took some time to decide what we wanted to settle on, and indeed we had a mobile app backend that went up around Christmas time that we wrote with Laravel, but deployed to Apache with PHP 5.6 because when we first pushed it up PHP 7 wasn’t out yet. However, given that Laravel 5 already had good support for PHP 7, we decided we’d consider it for the next app. I tend to use PostgreSQL rather than MySQL these days because it has a lot of nifty features like JSON fields and full text search, and using an ORM minimises the learning curve in switching, and Redis is much more versatile than Memcached, so they were vital parts of our stack.</p>
<h2 id="our-first-php-7-app">Our first PHP 7 app</h2>
<p>As it happened, we had a Laravel app in the pipeline that was ideal. In the summer of last year, we were hired to make an existing site responsive. In the end, it turned out not to be viable - it was built with Zend Framework, which none of us had ever touched before, and the front end used a lot of custom widgets and fields tied together with RequireJS. The whole thing was rather unwieldy and extremely difficult to maintain and develop. In the end, we decided to tell the client it wasn’t worth developing further and offer to rewrite the whole thing from scratch using Laravel and AngularJS, with Browserify used to handle JavaScript modules - the basic idea was quite simple, it was just the implementation that was overly complex, and AngularJS made it possible to do the same kind of thing with a fraction of the code, so a rewrite in only a few weeks was perfectly viable.</p>
<p>I’d already built a simple prototype to demonstrate the viability of a from-scratch rewrite using Laravel and Angular, and once the client had agreed to the rewrite, we were able to work on this further. As the web app was going to be particularly useful on mobile devices, I wanted to ensure that the performance was as good as I could possibly make it. By the time we were looking at deploying it to a server, three months had passed since PHP 7 had been first released, and I figured that was long enough for the most serious issues to be resolved, and we could definitely do with the very significant speed boost we’d get from using PHP 7 for this app.</p>
<p>I use Jenkins to run my unit tests, and so I decided to try installing PHP 7 on the Jenkins server and using that to run the tests. The results were encouraging - nothing broke as a result of the switch. So we therefore decided that when we deployed it, we’d try it with PHP 7, and if it failed, we’d switch to PHP 5.6.</p>
<p>I opted to use FPM with Nginx rather than Apache and <code>mod_php</code> as since the web app was purely custom we didn’t really need things like <code>.htaccess</code>, and while the amount of static content was limited, Nginx might well perform better for this use case. The results are fairly encouraging - the document for the home page is typically being returned in under 40ms, with the uncached homepage taking around 1.5s in total to load, despite having to load several external fonts. In its current state, the web app scores a solid 93% on YSlow, which I’m very happy with. I don’t know how much of that is down to using PHP 7, but choosing to use it was definitely a good call. I have had absolutely zero issues with it during that time.</p>
<h2 id="summary">Summary</h2>
<p>As always, you should bear in mind that your needs may not be the same as mine, and it could well be that you need something that PHP 7 doesn’t yet provide. However, I have had a very good experience with PHP 7 in production. I may have had to jump through a few more hoops to get it up and running, and there may be some level of risk associated with using PHP 7 when it’s only been available for three months, but it’s more than justified by the speed we get from our web app. Using a configuration management system like Ansible means that even if you do have to jump through some extra hoops, it’s relatively easy to automate that process so it’s not as much of an issue as you might think. For me, using PHP 7 with a Laravel app has worked as well as I could have possibly hoped.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Mocking external APIs in Python]]></title>
            <link>http://matthewdaly.co.uk/blog/2016/01/26/mocking-external-apis-in-python/</link>
            <guid>http://matthewdaly.co.uk/blog/2016/01/26/mocking-external-apis-in-python/</guid>
            <pubDate>Tue, 26 Jan 2016 23:40:25 GMT</pubDate>
            <description><![CDATA[<p>It’s quite common to have to integrate an external API into your web app for some of your functionality. However, it’s a really bad idea to have requests be sent to the remote API when running your tests. At best, it means your tests may fail due to unexpected circumstances, such as a network outage. At worst, you could wind up making requests to paid services that will cost you money, or sending push notifications to clients. It’s therefore a good idea to mock these requests in some way, but it can be fiddly.</p>
<p>In this post I’ll show you several ways you can mock an external API so as to prevent requests being sent when running your test suite. I’m sure there are many others, but these have worked for me recently.</p>
<h2 id="mocking-the-client-library">Mocking the client library</h2>
<p>Nowadays many third-party services realise that providing developers with client libraries in a variety of languages is a good idea, so it’s quite common to find a library for interfacing with a third-party service. Under these circumstances, the library itself is usually already thoroughly tested, so there’s no point in you writing additional tests for that functionality. Instead, you can just mock the client library so that the request is never sent, and if you need a response, then you can specify one that will remain constant.</p>
<p>I recently had to integrate Stripe with a mobile app backend, and I used their client library. I needed to ensure that I got the right result back. In this case I only needed to use the <code>Token</code> object’s <code>create()</code> method. I therefore created a new <code>MockToken</code> class that inherited from <code>Token</code>, and overrode its <code>create()</code> method so that it only accepted one card number and returned a hard-coded response for it:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> stripe.resource <span class="hljs-keyword">import</span> Token, convert_to_stripe_object</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> stripe.error <span class="hljs-keyword">import</span> CardError</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockToken</span><span class="hljs-params">(Token)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-meta">    @classmethod</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(cls, api_key=None, idempotency_key=None,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>               stripe_account=None, **params)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">if</span> params[<span class="hljs-string">'card'</span>][<span class="hljs-string">'number'</span>] != <span class="hljs-string">'4242424242424242'</span>:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-keyword">raise</span> CardError(<span class="hljs-string">'Invalid card number'</span>, <span class="hljs-keyword">None</span>, <span class="hljs-number">402</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        response = {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">"card"</span>: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>              <span class="hljs-string">"address_city"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>              <span class="hljs-string">"address_country"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>              <span class="hljs-string">"address_line1"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>              <span class="hljs-string">"address_line1_check"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>              <span class="hljs-string">"address_line2"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>              <span class="hljs-string">"address_state"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>              <span class="hljs-string">"address_zip"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>              <span class="hljs-string">"address_zip_check"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>              <span class="hljs-string">"brand"</span>: <span class="hljs-string">"Visa"</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>              <span class="hljs-string">"country"</span>: <span class="hljs-string">"US"</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>              <span class="hljs-string">"cvc_check"</span>: <span class="hljs-string">"unchecked"</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>              <span class="hljs-string">"dynamic_last4"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>              <span class="hljs-string">"exp_month"</span>: <span class="hljs-number">12</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>              <span class="hljs-string">"exp_year"</span>: <span class="hljs-number">2017</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>              <span class="hljs-string">"fingerprint"</span>: <span class="hljs-string">"49gS1c4YhLaGEQbj"</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>              <span class="hljs-string">"funding"</span>: <span class="hljs-string">"credit"</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>              <span class="hljs-string">"id"</span>: <span class="hljs-string">"card_17XXdZGzvyST06Z022EiG1zt"</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>              <span class="hljs-string">"last4"</span>: <span class="hljs-string">"4242"</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>              <span class="hljs-string">"metadata"</span>: {},</td><tr><td class="linenos" data-pseudo-content="34"></td><td>              <span class="hljs-string">"name"</span>: <span class="hljs-keyword">None</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>              <span class="hljs-string">"object"</span>: <span class="hljs-string">"card"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>              <span class="hljs-string">"tokenization_method"</span>: <span class="hljs-keyword">None</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>          },</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">"client_ip"</span>: <span class="hljs-string">"192.168.1.1"</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            <span class="hljs-string">"created"</span>: <span class="hljs-number">1453817861</span>,</td><tr><td class="linenos" data-pseudo-content="40"></td><td>            <span class="hljs-string">"id"</span>: <span class="hljs-string">"tok_42XXdZGzvyST06Z0LA6h5gJp"</span>,</td><tr><td class="linenos" data-pseudo-content="41"></td><td>            <span class="hljs-string">"livemode"</span>: <span class="hljs-keyword">False</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-string">"object"</span>: <span class="hljs-string">"token"</span>,</td><tr><td class="linenos" data-pseudo-content="43"></td><td>            <span class="hljs-string">"type"</span>: <span class="hljs-string">"card"</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">"used"</span>: <span class="hljs-keyword">False</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-keyword">return</span> convert_to_stripe_object(response, api_key, stripe_account)</td></table></code></pre>
<p>Much of this was lifted straight from the source code for the library. I then wrote a test for the payment endpoint and patched the <code>Token</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">    @mock.patch('stripe.Token', MockToken)</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_payments</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">"number"</span>: <span class="hljs-string">'1111111111111111'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">"exp_month"</span>: <span class="hljs-number">12</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">"exp_year"</span>: <span class="hljs-number">2017</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">"cvc"</span>: <span class="hljs-string">'123'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.post(reverse(<span class="hljs-string">'payments'</span>), data=data, format=<span class="hljs-string">'json'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)</td></table></code></pre>
<p>This replaced <code>stripe.Token</code> with <code>MockToken</code> so that in this test, the response from the client library was always going to be the expected one.</p>
<p>If the response doesn’t matter and all you need to do is be sure that the right method would have been called, this is easier. You can just mock the method in question using <code>MagicMock</code> and assert that it has been called afterwards, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReminderTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_send_reminder</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Mock PushService.create_message()</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        PushService.create_message = mock.MagicMock(name=<span class="hljs-string">"create_message"</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Call reminder task</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        send_reminder()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Check user would have received a push notification</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        PushService.create_message.assert_called_with([{<span class="hljs-string">'text'</span>: <span class="hljs-string">'My push'</span>, <span class="hljs-string">'conditions'</span>: [<span class="hljs-string">'UserID'</span>, <span class="hljs-string">'EQ'</span>, <span class="hljs-number">1</span>]}])</td></table></code></pre>
<h2 id="mocking-lower-level-requests">Mocking lower-level requests</h2>
<p>Sometimes, no client library is available, or it’s not worth using one as you only have to make one or two requests. Under these circumstances, there are ways to mock the actual request to the external API. If you’re using the <code>requests</code> module, then there’s a <code>responses</code> module that’s ideal for mocking the API request.</p>
<p>Suppose we have the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> json, requests</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_request_to_api</span><span class="hljs-params">(data)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment"># Put together the request</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    params = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'auth'</span>: settings.AUTH_KEY,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-string">'data'</span>: data</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = requests.post(settings.API_URL, data={<span class="hljs-string">'params'</span>: json.dumps(params)})</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">return</span> response</td></table></code></pre>
<p>Using <code>responses</code> we can mock the response from the server in our test:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APITest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">    @responses.activate</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_send_request</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-comment"># Mock the API</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        responses.add(responses.POST,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            settings.API_URL,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            status=<span class="hljs-number">200</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            content_type=<span class="hljs-string">"application/json"</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            body=<span class="hljs-string">'{"item_id": "12345678"}'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Call function</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">"surname"</span>: <span class="hljs-string">"Smith"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">"location"</span>: <span class="hljs-string">"London"</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        send_request_to_api(data)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check request went to correct URL</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">assert</span> responses.calls[<span class="hljs-number">0</span>].request.url == settings.API_URL</td></table></code></pre>
<p>Note the use of the <code>@responses.activate</code> decorator. We use <code>responses.add()</code> to set up each URL we want to be able to mock, and pass through details of the response we want to return. We then make the request, and check that it was made as expected.</p>
<p>You can find more details of the <code>responses</code> module <a href="https://github.com/getsentry/responses">here</a>.</p>
<h2 id="summary">Summary</h2>
<p>I’m pretty certain that there are other ways you can mock an external API in Python, but these ones have worked for me recently. If you use another method, please feel free to share it in the comments.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Learning more about React.js and Flux]]></title>
            <link>http://matthewdaly.co.uk/blog/2015/11/18/learning-more-about-react-dot-js-and-flux/</link>
            <guid>http://matthewdaly.co.uk/blog/2015/11/18/learning-more-about-react-dot-js-and-flux/</guid>
            <pubDate>Wed, 18 Nov 2015 19:52:48 GMT</pubDate>
            <description><![CDATA[<p>Udemy have very kindly provided some vouchers for free access to their course, <a href="https://www.udemy.com/learn-and-understand-reactjs/">“Build Web Apps with ReactJS and Flux”</a> for me to give away to subscribers. To redeem them, follow the link above and use the voucher code <code>MatthewDalysBlog</code>.</p>
<p>There’s only 50 in total, and they are on a first-come, first-serve basis, so I suggest you redeem them sooner rather than later.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Building a real-time Twitter stream with Node.js, React.js and Redis]]></title>
            <link>http://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/</link>
            <guid>http://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/</guid>
            <pubDate>Mon, 28 Sep 2015 19:00:55 GMT</pubDate>
            <description><![CDATA[<p>In the last year or so, React.js has taken the world of web development by storm. A major reason for this is that it makes it possible to build <strong>isomorphic web applications</strong> - web apps where the same code can run on the client and the server. Using React.js, you can create a template that will be executed on the server when the page first loads, and then the same template can be used to re-render the content when it’s updated, whether that’s via AJAX, WebSockets or another method entirely.</p>
<p>In this tutorial, I’ll show you how to build a simple Twitter streaming app using Node.js. I’m actually <a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">not the only person to have built this to demonstrate React.js</a>, but this is my own particular take on this idea, since it’s such an obvious use case for React.</p>
<h2 id="what-is-react-js-">What is React.js?</h2>
<p>A lot of people get rather confused over this issue. It’s not correct to compare React.js with frameworks like Angular.js or Backbone.js. It’s often described as being just the V in MVC - it represents only the view layer. If you’re familiar with Backbone.js, I think it’s reasonable to compare it to Backbone’s views, albeit with it’s own templating syntax. It does not provide the following functionality like Angular and Backbone do:</p>
<ul>
<li>Support for models</li>
<li>Any kind of helpers for AJAX requests</li>
<li>Routing</li>
</ul>
<p>If you want any of this functionality, you need to look elsewhere. There are other libraries around that offer this kind of functionality, so if you want to use React as part of some kind of MVC structure, you can do so - they’re just not a part of the library itself.</p>
<p>React.js uses a so-called “virtual DOM” - rather than re-rendering the view from scratch when the state changes, it instead retains a virtual representation of the DOM in memory, updates that, then figures out what changes are required to update the existing DOM and applies them. This means it only needs to change what actually changes, making it faster than other client-side templating systems. Combined with the ability to render on the server side, React allows you to build high-performance apps that combine the initial speed and SEO advantages of conventional web apps with the responsiveness of single-page web apps.</p>
<p>To create components with React, it’s common to use an XML-like syntax called JSX. It’s not mandatory, but I highly recommend you do so as it’s much more intuitive than creating elements with Javascript.</p>
<h2 id="getting-started">Getting started</h2>
<p>You’ll need a Twitter account, and you’ll need to <a href="https://apps.twitter.com/">create a new Twitter app</a> and obtain the security credentials to let you access the Twitter Streaming API. You’ll also need to have Node.js installed (ideally using <code>nvm</code>) - at this time, however, you can’t use Node 4.0 because of issues with Redis. You will also need to install Redis and hiredis - if you’ve worked through my previous Redis tutorials you’ll have these already.</p>
<p>We’ll be using Gulp.js as our build system, and Bower to install some client-side packages, so they need to be installed globally:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm install -g gulp bower</table></code></pre>
<p>We’ll also be using Compass to help with our stylesheets:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo gem install compass</table></code></pre>
<p>With that all done, let’s start work on our app. First, run the following command to create your <code>package.json</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ npm init</table></code></pre>
<p>I’m assuming you’re well-acquainted enough with Node.js to know what this does, and can answer the questions without difficulty. I won’t cover writing tests in this tutorial as, but set your test command to <code>gulp test</code> and you should be fine.</p>
<p>Next, we need to install our dependencies:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm install --save babel compression express hbs hiredis lodash morgan react redis socket.io socket.io-client twitter</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ npm install --save-dev browserify chai gulp gulp-compass gulp-coveralls gulp-istanbul gulp-jshint gulp-mocha gulp-uglify jshint-stylish reactify request vinyl-buffer vinyl-source-stream</td></table></code></pre>
<h2 id="planning-our-app">Planning our app</h2>
<p>Now, it’s worth taking a few minutes to plan the architecture of our app. We want to have the app listen to the Twitter Streaming API and filter for messages with any arbitrary string in them - in this case we’ll be searching for “javascript”, but you can set it to anything you like. That means that that part needs to be listening all the time, not just when someone is using the app. Also, it doesn’t fit neatly into the usual request-response cycle - if several people visit the site at once, we could end up with multiple connections to fetch the same data, which is really not efficient, and could cause problems with duplicate tweets showing up.</p>
<p>Instead, we’ll have a separate <code>worker.js</code> file which runs constantly. This will listen for any matching messages on Twitter. When one appears, rather than returning it itself, it will publish it to a Redis channel, as well as persisting it. Then, the web app, which will be the <code>index.js</code> file, will be subscribed to the same channel, and will receive the tweet and push it to all current users using Socket.io.</p>
<p>This is a good example of a message queue, and it’s a common pattern. It allows you to create dedicated sections of your app for different tasks, and means that they will generally be more robust. In this case, if the worker goes down, users will still be able to see some tweets, and if the server goes down, the tweets will still be persisted to Redis. In theory, this would also allow you to scale your app more easily by allowing movement of different tasks to different servers, and several app servers could interface with a single worker process. The only downside I can think of is that on a platform like Heroku you’d need to have a separate dyno for the worker process - however, with Heroku’s pricing model changing recently, since this needs to be listening all the time it won’t be suitable for the free tier anyway.</p>
<p>First let’s create our <code>gulpfile.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> jshint = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-jshint'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> source = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-source-stream'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> buffer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-buffer'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> reactify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'reactify'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> mocha = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-mocha'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> istanbul = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-istanbul'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> coveralls = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-coveralls'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> compass = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-compass'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-uglify'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> paths = {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    scripts: [<span class="hljs-string">'components/*.jsx'</span>],</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    styles: [<span class="hljs-string">'src/sass/*.scss'</span>]</td><tr><td class="linenos" data-pseudo-content="16"></td><td>};</td><tr><td class="linenos" data-pseudo-content="17"></td><td>gulp.task(<span class="hljs-string">'lint'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-keyword">return</span> gulp.src([</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      <span class="hljs-string">'index.js'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      <span class="hljs-string">'components/*.js'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>      ])</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    .pipe(jshint())</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    .pipe(jshint.reporter(<span class="hljs-string">'jshint-stylish'</span>));</td><tr><td class="linenos" data-pseudo-content="24"></td><td>});</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>gulp.task(<span class="hljs-string">'compass'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  gulp.src(<span class="hljs-string">'src/sass/*.scss'</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    .pipe(compass({</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      css: <span class="hljs-string">'static/css'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      sass: <span class="hljs-string">'src/sass'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }))</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'static/css'</span>));</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});;</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>gulp.task(<span class="hljs-string">'test'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  gulp.src(<span class="hljs-string">'index.js'</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    .pipe(istanbul())</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    .pipe(istanbul.hookRequire())</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    .on(<span class="hljs-string">'finish'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      gulp.src(<span class="hljs-string">'test/test.js'</span>, {read: <span class="hljs-literal">false</span>})</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        .pipe(mocha({ reporter: <span class="hljs-string">'spec'</span> }))</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        .pipe(istanbul.writeReports({</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          reporters: [</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'lcovonly'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            <span class="hljs-string">'cobertura'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>            <span class="hljs-string">'html'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>          ]</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        }))</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        .pipe(istanbul.enforceThresholds({ thresholds: { global: <span class="hljs-number">90</span> } }))</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        .once(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="51"></td><td>          process.exit(<span class="hljs-number">0</span>);</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        })</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        .once(<span class="hljs-string">'end'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="54"></td><td>          process.exit(<span class="hljs-number">0</span>);</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="57"></td><td>});</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>gulp.task(<span class="hljs-string">'coveralls'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="60"></td><td>  gulp.src(<span class="hljs-string">'coverage/lcov.info'</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    .pipe(coveralls());</td><tr><td class="linenos" data-pseudo-content="62"></td><td>});</td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>gulp.task(<span class="hljs-string">'react'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="65"></td><td>  <span class="hljs-keyword">return</span> browserify({ entries: [<span class="hljs-string">'components/index.jsx'</span>], debug: <span class="hljs-literal">true</span> })</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    .transform(reactify)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    .bundle()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>    .pipe(source(<span class="hljs-string">'bundle.js'</span>))</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    .pipe(buffer())</td><tr><td class="linenos" data-pseudo-content="70"></td><td>    .pipe(uglify())</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'static/jsx/'</span>));</td><tr><td class="linenos" data-pseudo-content="72"></td><td>});</td><tr><td class="linenos" data-pseudo-content="73"></td><td></td><tr><td class="linenos" data-pseudo-content="74"></td><td>gulp.task(<span class="hljs-string">'default'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="75"></td><td>  gulp.watch(paths.scripts, [<span class="hljs-string">'react'</span>]);</td><tr><td class="linenos" data-pseudo-content="76"></td><td>  gulp.watch(paths.styles, [<span class="hljs-string">'compass'</span>]);</td><tr><td class="linenos" data-pseudo-content="77"></td><td>});</td></table></code></pre>
<p>I’ve added tasks for the tests and JSHint if you choose to implement them, but the only ones I’ve actually used are the <code>compass</code> and <code>react</code> tasks. The <code>compass</code> task compiles our Sass files into CSS, while the <code>react</code> task uses Browserify to take our React components and various modules installed using NPM and build them for use in the browser, as well as minifying them. Note that we installed React and lodash with NPM? We’re going to be able to use them in the browser and on the server, thanks to Browserify.</p>
<p>Next, let’s create our <code>worker.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> Twitter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'twitter'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Set up Twitter client</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> Twitter({</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  consumer_key: process.env.TWITTER_CONSUMER_KEY,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-keyword">var</span> redis;</td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>}</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>client.stream(<span class="hljs-string">'statuses/filter'</span>, {track: <span class="hljs-string">'javascript'</span>, lang: <span class="hljs-string">'en'</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">stream</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  stream.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tweet</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment">// Log it to console</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-built_in">console</span>.log(tweet);</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    redis.publish(<span class="hljs-string">'tweets'</span>, <span class="hljs-built_in">JSON</span>.stringify(tweet));</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// Persist it to a Redis list</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    redis.rpush(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-built_in">JSON</span>.stringify(tweet));</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>  <span class="hljs-comment">// Handle errors</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>  stream.on(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-built_in">console</span>.log(error);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>});</td></table></code></pre>
<p>Most of this file should be fairly straightforward. We set up our connection to Twitter (you’ll need to set the various environment variables listed here using the appropriate method for your operating system), and a connection to Redis.</p>
<p>We then stream the Twitter statuses that match our filter. When we receive a tweet, we log it to the console (feel free to comment this out in production if desired), publish it to a Redis channel called <code>tweets</code>, and push it to the end of a Redis list called <code>stream:tweets</code>. When an error occurs, we output it to the console.</p>
<p>Let’s use Bootstrap to style the app. Create the following <code>.bowerrc</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"directory"</span>: <span class="hljs-string">"static/bower_components"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>Then run <code>bower init</code> to create your <code>bower.json</code> file, and install Bootstrap with <code>bower install --save sass-bootstrap</code>.</p>
<p>With that done, create the file <code>src/sass/style.scss</code> and enter the following:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"compass/css3/user-interface"</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"compass/css3"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"../../static/bower_components/sass-bootstrap/lib/bootstrap.scss"</span>;</td></table></code></pre>
<p>This includes some dependencies from Compass, as well as Bootstrap. We won’t be using any of the Javascript features of Bootstrap, so we don’t need to worry too much about that.</p>
<p>Next, we need to create our view files. As React will be used to render the main part of the page, these will be very basic, with just the header, footer, and a section where the content can be rendered. First, create <code>views/index.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-variable">{{&gt; header }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'view'</span>&gt;</span></span><span class="hljs-template-variable">{{{ markup }}</span><span class="xml">}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"initial-state"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/json"</span>&gt;</span><span class="undefined"></span></span><span class="hljs-template-variable">{{{state}}</span><span class="xml"><span class="undefined">}</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span><span class="hljs-template-variable">{{&gt; footer }}</span><span class="xml"></span></td></table></code></pre>
<p>As promised, this a very basic layout. Note the <code>markup</code> variable, which is where the markup generated by React will be inserted when rendered on the server, and the <code>state</code> variable, which will contain the JSON representation of the data used to generate that markup. By passing that data through, you can ensure that the instance of React on the client has access to the same raw data as was passed through to the view on the server side, so that when the data needs to be re-rendered, it can be done so correctly.</p>
<p>We’ll also define partials for the header and footer. The header should be in <code>views/partials/header.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tweet Stream<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-inverse navbar-static-top"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"navigation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>Tweet Stream<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse navbar-right"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span></td></table></code></pre>
<p>The footer should be in <code>views/partials/footer.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/jsx/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Note that we load the Javascript file <code>/jsx/bundle.js</code> - this is the output from the command <code>gulp react</code>.</p>
<h2 id="creating-the-back-end">Creating the back end</h2>
<p>The next step is to implement the back end of the website. Add the following code as <code>index.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel/register'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> app = express();</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">'morgan'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-keyword">var</span> Tweets = React.createFactory(<span class="hljs-built_in">require</span>(<span class="hljs-string">'./components/tweets.jsx'</span>));</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-keyword">var</span> redis, subscribe;</td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-comment">// Set up logging</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>app.use(morgan(<span class="hljs-string">'combined'</span>));</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td><span class="hljs-comment">// Compress responses</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>app.use(compression());</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td><span class="hljs-comment">// Render main view</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="49"></td><td>  <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>  redis.lrange(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, tweets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>      <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="54"></td><td>      <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>      <span class="hljs-keyword">var</span> tweet_list = [];</td><tr><td class="linenos" data-pseudo-content="56"></td><td>      tweets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tweet, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        tweet_list.push(<span class="hljs-built_in">JSON</span>.parse(tweet));</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>      <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>      <span class="hljs-keyword">var</span> markup = React.renderToString(Tweets({ data: tweet_list.reverse() }));</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      res.render(<span class="hljs-string">'index'</span>, {</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        markup: markup,</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        state: <span class="hljs-built_in">JSON</span>.stringify(tweet_list)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="67"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="68"></td><td>});</td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="73"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td><span class="hljs-comment">// Handle connections</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="77"></td><td>  <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>  subscribe.subscribe(<span class="hljs-string">'tweets'</span>);</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>  <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>  <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="83"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="84"></td><td>  subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td>  <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>  socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>    subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="89"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="90"></td><td>});</td></table></code></pre>
<p>Let’s go through this bit by bit:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel/register'</span>);</td></table></code></pre>
<p>Here we’re using Babel, which is a library that allows you to use new features in Javascript even if the interpreter doesn’t support it. It also includes support for JSX, allowing us to require JSX files in the same way we would require Javascript files.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> app = express();</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">'morgan'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> Tweets = React.createFactory(<span class="hljs-built_in">require</span>(<span class="hljs-string">'./components/tweets.jsx'</span>));</td></table></code></pre>
<p>Here we include our dependencies. Most of this will be familiar if you’ve used Express before, but we also use React to create a factory for a React component called <code>Tweets</code>.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> redis, subscribe;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-comment">// Set up logging</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>app.use(morgan(<span class="hljs-string">'combined'</span>));</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-comment">// Compress responses</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>app.use(compression());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td></table></code></pre>
<p>This section sets up the various dependencies of our app. We set up two connections to Redis - one for handling subscriptions, the other for reading from Redis in order to populate the view.</p>
<p>We also set up our views, logging, compression of the HTTP response, a base URL, and serving static files.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Render main view</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  redis.lrange(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, tweets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>      <span class="hljs-keyword">var</span> tweet_list = [];</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      tweets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tweet, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tweet_list.push(<span class="hljs-built_in">JSON</span>.parse(tweet));</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">var</span> markup = React.renderToString(Tweets({ data: tweet_list.reverse() }));</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      res.render(<span class="hljs-string">'index'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        markup: markup,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        state: <span class="hljs-built_in">JSON</span>.stringify(tweet_list)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>});</td></table></code></pre>
<p>Our app only has a single view. When the root is loaded, we first of all fetch all of the tweets stored in the <code>stream:tweets</code> list. We then convert them into an array of objects.</p>
<p>Next, we render the <code>Tweets</code> component to a string, passing through our list of tweets, and store the resulting markup. We then pass through this markup and the string representation of the list of tweets to the template.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Handle connections</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  subscribe.subscribe(<span class="hljs-string">'tweets'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>});</td></table></code></pre>
<p>Finally, we set up Socket.io. On a connection, we subscribe to the Redis channel <code>tweets</code>. When we receive a tweet from Redis, we emit that tweet so that it can be rendered on the client side. We also handle disconnections by removing our Redis subscription.</p>
<h2 id="creating-our-react-components">Creating our React components</h2>
<p>Now it’s time to create our first React component. We’ll create a folder called <code>components</code> to hold all of our component files. Our first file is <code>components/index.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> Tweets = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweets.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> initialState = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'initial-state'</span>).innerHTML);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>React.render(</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tweets</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{initialState}</span> /&gt;</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  document.getElementById('view')</td><tr><td class="linenos" data-pseudo-content="9"></td><td>);</span></td></table></code></pre>
<p>First of all, we include React and the same <code>Tweets</code> component we require on the server side (note that we need to specify the <code>.jsx</code> extension). Then we fetch the initial state from the script tag we created earlier. Finally we render the <code>Tweets</code> components, passing through the initial state, and specify that it should be inserted into the element with an id of <code>view</code>. Note that we store the initial state in <code>data</code> - inside the component, this can be accessed as <code>this.props.data</code>.</p>
<p>This particular component is only ever used on the client side - when we render on the server side, we don’t need any of this functionality since we insert the markup into the <code>view</code> element anyway, and we don’t need to specify the initial data in the same way.</p>
<p>Next, we define the <code>Tweets</code> component in <code>components/tweets.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetlist.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> Tweets = React.createClass({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  componentDidMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">// Get reference to this item</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-keyword">var</span> tweets = that.props.data;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      tweets.push(<span class="hljs-built_in">JSON</span>.parse(data));</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      tweets = _.sortBy(tweets, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> item.created_at;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      }).reverse();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      that.setProps({data: tweets});</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  getInitialState: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">return</span> {data: <span class="hljs-keyword">this</span>.props.data};</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tweets<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">TweetList</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{this.props.data}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>});</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>module.exports = Tweets;</span></td></table></code></pre>
<p>Let’s work our way through each section in turn:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetlist.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>);</td></table></code></pre>
<p>Here we include React and the Socket.io client, as well as Lodash and our TweetList component. With React.js, it’s recommend that you break up each individual part of your interface into a single component - here <code>Tweets</code> is a wrapper for the tweets that includes a heading. <code>TweetList</code> will be a list of tweets, and <code>TweetItem</code> will be an individual tweet.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> Tweets = React.createClass({</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  componentDidMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get reference to this item</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-keyword">var</span> tweets = that.props.data;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      tweets.push(<span class="hljs-built_in">JSON</span>.parse(data));</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      tweets = _.sortBy(tweets, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> item.created_at;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      }).reverse();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      that.setProps({data: tweets});</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  },</td></table></code></pre>
<p>Note the use of the <code>componentDidMount</code> method - this fires when a component has been rendered on the client side for the first time. You can therefore use it to set up events. Here, we’re setting up a callback so that when a new tweet is received, we get the existing tweets (stored in <code>this.props.data</code>, although we copy <code>this</code> to <code>that</code> so it works inside the callback), push the tweet to this list, sort it by the time created, and set <code>this.props.data</code> to the new value. This will result in the tweets being re-rendered.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  getInitialState: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> {data: <span class="hljs-keyword">this</span>.props.data};</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  },</td></table></code></pre>
<p>Here we set the initial state of the component - it sets the value of <code>this.state</code> to the object passed through. In this case, we pass through an object with the attribute <code>data</code> defined as the value of <code>this.props.data</code>, meaning that <code>this.state.data</code> is the same as <code>this.props.data</code>.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tweets<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">TweetList</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{this.props.data}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>});</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>module.exports = Tweets;</span></td></table></code></pre>
<p>Here we define our <code>render</code> function. This can be thought of as our template. Note that we include <code>TweetList</code> inside our template and pass through the data. Afterwards, we export <code>Tweets</code> so it can be used elsewhere.</p>
<p>Next, let’s create <code>components/tweetlist.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> TweetItem = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetitem.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> TweetList = React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">var</span> tweetNodes = <span class="hljs-keyword">this</span>.props.data.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TweetItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{index}</span> <span class="hljs-attr">text</span>=<span class="hljs-string">{item.text}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TweetItem</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      );</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"tweets list-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        {tweetNodes}</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-built_in">module</span>.exports = TweetList;</td></table></code></pre>
<p>This component is much simpler - it only has a <code>render</code> method. First, we get our individual tweets and for each one define a <code>TweetItem</code> component. Then we create an unordered list and insert the tweet items into it. We then export it as <code>TweetList</code>.</p>
<p>Our final component is the <code>TweetItem</code> component. Create the following file at <code>components/tweetitem.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetItem = React.createClass({</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"list-group-item"</span>&gt;</span>{this.props.text}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>});</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-built_in">module</span>.exports = TweetItem;</td></table></code></pre>
<p>This component is quite simple. It’s just a single list item with the text set to the value of the tweet’s <code>text</code> attribute.</p>
<p>That should be all of our components done. Time to compile our Sass and run Browserify:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ gulp compass</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ gulp react</td></table></code></pre>
<p>Now, if you make sure you have set the appropriate environment variables, and then run <code>node worker.js</code> in one terminal, and <code>node index.js</code> in another, and visit <a href="http://localhost:5000/">http://localhost:5000/</a>, you should see your Twitter stream in all its glory! You can also try it with Javascript disabled, or in a text-mode browser such as Lynx, to demonstrate that it still renders the page without having to do anything on the client side - you’re only missing the constant updates.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>I hope this gives you some idea of how you can easily use React.js on both the client and server side to make web apps that are fast and search-engine friendly while also being easy to update dynamically. You can find the source code on <a href="https://github.com/matthewbdaly/twitter-stream">GitHub</a>.</p>
<p>Hopefully I’ll be able to publish some later tutorials that build on this to show you how to build more substantial web apps with React.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[A quick and easy Varnish primer]]></title>
            <link>http://matthewdaly.co.uk/blog/2015/09/19/a-quick-and-easy-varnish-primer/</link>
            <guid>http://matthewdaly.co.uk/blog/2015/09/19/a-quick-and-easy-varnish-primer/</guid>
            <pubDate>Sat, 19 Sep 2015 18:42:17 GMT</pubDate>
            <description><![CDATA[<p>As I <a href="/blog/2015/08/22/when-you-should-not-use-wordpress/">mentioned in an earlier post</a>, I recently had the occasion to use Varnish to improve the performance of a website that otherwise would have been unreliable and unusably slow due to WordPress making an excessive number of queries. The difference it made was nothing short of staggering, and I’m not exaggerating when I say it saved the day. I now use Ansible for provisioning new WordPress sites, and Varnish is now a standard part of my WordPress site setup playbook.</p>
<p>However, Varnish can be quite fiddly to configure, and it was something of a baptism of fire for me to learn how to configure it appropriately for this use case. I did make a few mistakes that caused problems down the line, so I thought I’d share the details of how I got it working for that particular site.</p>
<h2 id="what-is-varnish-">What is Varnish?</h2>
<p>From <a href="https://www.varnish-cache.org/about">the website</a>:</p>
<blockquote>
<p>Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents. Varnish Cache is really, really fast. It typically speeds up delivery with a factor of 300 - 1000x, depending on your architecture.</p>
</blockquote>
<p>In other words, you run it on the usual HTTP or HTTPS port, move your usual web server to a different port, and configure it, and it will cache web pages so they can be served more quickly to subsequent visitors.</p>
<p>Be warned - Varnish is not something where you can generally stick with the default settings. The default behaviour does make a lot of sense, but in practice almost no-one will be able to get away with leaving the configuration unchanged.</p>
<h2 id="installing-varnish">Installing Varnish</h2>
<p>If you’re using Debian or a derivative such as Ubuntu, Varnish is available via <code>apt-get</code>:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo apt-get install varnish</table></code></pre>
<p>You may also want to install the documentation:</p>
<pre><code class="hljs lang-bash singleline"><table>$ sudo apt-get install varnish-doc</table></code></pre>
<p>If you’re using Apache I’d also recommend installing <code>libapache2-mod-rpaf</code> and enabling it with <code>sudo a2enmod rpaf</code> - without this, Apache will log all incoming requests as coming from the same server.</p>
<p>I’m assuming you already have a normal web server installed. I’ll assume you’re using Apache, but it shouldn’t be hard to adapt these instructions to work with Nginx. I’m also assuming that the site you want to use Varnish for is a WordPress site with WooCommerce and W3 Total Cache installed. However, this is only for example purposes. If you want to use Varnish for a different web app, you’ll need to plan your caching strategy around that web app yourself.</p>
<p>Please also note that this is using Varnish 4.0, which is the version available with Debian Jessie. If you’re using an older operating system, you may have Varnish 3.0 in the repositories - be warned, the configuration language changed in Varnish 4.0, so the examples here will not work with older versions of Varnish.</p>
<p>By default, Varnish runs on port 6081, which is fine for testing it out, but once you want to go live it’s not what you want. When it’s time to go live, you’ll need to open up <code>/etc/default/varnish</code> and edit the value of <code>DAEMON_OPTS</code> to something like this:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DAEMON_OPTS=<span class="hljs-string">"-a :80 \</td><tr><td class="linenos" data-pseudo-content="2"></td><td>             -T localhost:6082 \</td><tr><td class="linenos" data-pseudo-content="3"></td><td>             -f /etc/varnish/default.vcl \</td><tr><td class="linenos" data-pseudo-content="4"></td><td>             -S /etc/varnish/secret \</td><tr><td class="linenos" data-pseudo-content="5"></td><td>             -s malloc,256m"</span></td></table></code></pre>
<p>Note that the <code>-a</code> flag represents the port Varnish is running on.</p>
<p>If you’re using an operating system that uses <code>systemd</code>, such as Debian Jessie, this alone won’t be sufficient. Create a new file at <code>/etc/systemd/system/varnish.service</code> and enter the following:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>[Unit]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Description=Varnish HTTP accelerator</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>[Service]</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Type=forking</td><tr><td class="linenos" data-pseudo-content="6"></td><td>LimitNOFILE=131072</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LimitMEMLOCK=82000</td><tr><td class="linenos" data-pseudo-content="8"></td><td>ExecStartPre=/usr/sbin/varnishd -C <span class="hljs-_">-f</span> /etc/varnish/default.vcl</td><tr><td class="linenos" data-pseudo-content="9"></td><td>ExecStart=/usr/sbin/varnishd <span class="hljs-_">-a</span> :80 -T localhost:6082 <span class="hljs-_">-f</span> /etc/varnish/default.vcl -S /etc/varnish/secret <span class="hljs-_">-s</span> malloc,256m</td><tr><td class="linenos" data-pseudo-content="10"></td><td>ExecReload=/usr/share/varnish/reload-vcl</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>[Install]</td><tr><td class="linenos" data-pseudo-content="13"></td><td>WantedBy=multi-user.target</td></table></code></pre>
<p>Next, we need to move our web server to a different port. We’ll use port 8080. Replace the contents of <code>/etc/apache2/ports.conf</code> with this:</p>
<pre><code class="hljs lang-apache"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># If you just change the port or add more ports here, you will likely also</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># have to change the VirtualHost statement in</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># /etc/apache2/sites-enabled/000-default</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># This is also true if you have upgraded from before 2.2.9-3 (i.e. from</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># README.Debian.gz</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attribute">NameVirtualHost</span> *:8080</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> 8080</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">&lt;IfModule mod_ssl.c&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># If you add NameVirtualHost *:443 here, you will also have to change</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># the VirtualHost statement in /etc/apache2/sites-available/default-ssl</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment"># to &lt;VirtualHost *:443&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Server Name Indication for SSL named virtual hosts is currently not</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># supported by MSIE on Windows XP.</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> 443</td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-section">&lt;/IfModule&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-section">&lt;IfModule mod_gnutls.c&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> 443</td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-section">&lt;/IfModule&gt;</span></td></table></code></pre>
<p>You’ll also need to change the ports for the individual site files under <code>/etc/apache2/sites-available</code>, as in this example:</p>
<pre><code class="hljs lang-apache"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">&lt;VirtualHost *:8080&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">ServerAdmin</span> webmaster@localhost</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute"><span class="hljs-nomarkup">DocumentRoot</span></span> /var/www</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-section">&lt;Directory /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> FollowSymLinks</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-section">&lt;/Directory&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-section">&lt;Directory /var/www/&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> FollowSymLinks MultiViews</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> allow,deny</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">allow</span></span> from <span class="hljs-literal">all</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-section">&lt;/Directory&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">ScriptAlias</span> /cgi-bin/ /usr/lib/cgi-bin/</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-section">&lt;Directory "/usr/lib/cgi-bin"&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-attribute">AllowOverride</span> None</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> +ExecCGI -MultiViews +SymLinksIfOwnerMatch</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> allow,deny</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-attribute"><span class="hljs-nomarkup">Allow</span></span> from <span class="hljs-literal">all</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-section">&lt;/Directory&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">ErrorLog</span> <span class="hljs-variable">${APACHE_LOG_DIR}</span>/error.log</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment"># Possible values include: debug, info, notice, warn, error, crit,</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment"># alert, emerg.</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">LogLevel</span> warn</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attribute">CustomLog</span> <span class="hljs-variable">${APACHE_LOG_DIR}</span>/access.log combined</td><tr><td class="linenos" data-pseudo-content="31"></td><td><span class="hljs-section">&lt;/VirtualHost&gt;</span></td></table></code></pre>
<h2 id="writing-our-vcl-file">Writing our VCL file</h2>
<p>Next, we come to our Varnish configuration proper, which resides at <code>/etc/varnish/default.vcl</code>. The <code>vcl</code> stands for Varnish Configuration Language, and it has a syntax somewhat reminiscent of C.</p>
<p>The default behaviour for Varnish is as follows:</p>
<ul>
<li>It does not cache requests that contain cookie or authorization headers</li>
<li>It does not cache requests which the backend HTTP server indicates should not be cached</li>
<li>It will only cache GET and HEAD requests</li>
</ul>
<p>This behaviour is unlikely to meet your needs. We’ll therefore work through the Varnish config file I wrote for this WordPress site in the hope that it will teach you enough to adapt it to your own needs.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>vcl 4.0;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>backend default {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    .host = <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    .port = <span class="hljs-string">"8080"</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>}</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>acl purge {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"localhost"</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>sub vcl_recv {</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Never cache PUT, PATCH, DELETE or POST requests</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PUT"</span> || req.method == <span class="hljs-string">"PATCH"</span> || req.method == <span class="hljs-string">"DELETE"</span> || req.method == <span class="hljs-string">"POST"</span>) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment"># Never cache cart, account, checkout or addons</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/(cart|my-account|checkout|addons)"</span>) {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment"># Never cache adding to cart</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"\?add-to-cart="</span> ) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment"># Never cache admin or login</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"^/wp-(admin|login|cron)"</span> ) {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-comment"># Never cache WooCommerce API</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"wc-api"</span> ) {</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment"># Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-comment"># Remove a ";" prefix, if present.</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsub(req.http.Cookie, <span class="hljs-string">"^;\s*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-comment"># Remove the wp-settings-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-1=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-comment"># Remove the wp-settings-time-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-time-1=[^;]+(; )?"</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>            , <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-comment"># Remove the wp test cookie</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wordpress_test_cookie=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-comment"># Static content unique to the theme can be cached (so no user uploaded images)</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-comment"># The reason I don't take the wp-content/uploads is because of cache size on bigger blogs</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-comment"># that would fill up with all those files getting pushed into cache</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"wp-content/themes/"</span> &amp;&amp; req.url ~ <span class="hljs-string">"\.(css|js|png|gif|jp(e)?g)"</span>) {</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-built_in">unset</span> req.http.cookie;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>    <span class="hljs-comment"># Even if no cookies are present, I don't want my "uploads" to be cached due to their potential size</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"/wp-content/uploads/"</span>) {</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td>    <span class="hljs-comment"># any pages with captchas need to be excluded</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/contact/"</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    {</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-built_in">return</span>(pass);</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>    <span class="hljs-comment"># Check the cookies for wordpress-specific items</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cookie ~ <span class="hljs-string">"wordpress_"</span> || req.http.Cookie ~ <span class="hljs-string">"comment_"</span>) {</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-comment"># A wordpress specific cookie has been set</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="77"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>    <span class="hljs-comment"># allow PURGE from localhost</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PURGE"</span>) {</td><tr><td class="linenos" data-pseudo-content="81"></td><td>        <span class="hljs-keyword">if</span> (!client.ip ~ purge) {</td><tr><td class="linenos" data-pseudo-content="82"></td><td>            <span class="hljs-built_in">return</span>(synth(405, <span class="hljs-string">"Not allowed."</span>));</td><tr><td class="linenos" data-pseudo-content="83"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="84"></td><td>        <span class="hljs-built_in">return</span> (purge);</td><tr><td class="linenos" data-pseudo-content="85"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-comment"># Force lookup if the request is a no-cache request from the client</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cache-Control ~ <span class="hljs-string">"no-cache"</span>) {</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="90"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="91"></td><td></td><tr><td class="linenos" data-pseudo-content="92"></td><td>    <span class="hljs-comment"># Try a cache-lookup</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>    <span class="hljs-built_in">return</span> (<span class="hljs-built_in">hash</span>);</td><tr><td class="linenos" data-pseudo-content="94"></td><td>}</td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>sub vcl_backend_response {</td><tr><td class="linenos" data-pseudo-content="97"></td><td>    <span class="hljs-built_in">set</span> beresp.grace = 5m;</td><tr><td class="linenos" data-pseudo-content="98"></td><td>}</td></table></code></pre>
<p>Let’s take a closer look at the first part of the config:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>vcl 4.0;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>backend default {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    .host = <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    .port = <span class="hljs-string">"8080"</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>}</td></table></code></pre>
<p>Here we define that we’re using version 4.0 of VCL, and that the host to use as a back end is port 8080 on the same server. If your normal HTTP server is running on a different port, you will need to set it here. Also, note that you can use a different host as the backend.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>acl purge {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"127.0.0.1"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"localhost"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>}</td></table></code></pre>
<p>We also set which hosts can trigger a purge of the cache, namely <code>localhost</code> and <code>127.0.0.1</code>. The web app hosted on the server can then make an HTTP <code>PURGE</code> request to a given path, which will clear that path from the cache. In our case, W3 Total Cache supports this - if it’s a custom web app, you’ll need to implement this functionality yourself to clear the cache when new content is added.</p>
<p>Next, we start the <code>vcl_recv</code> subroutine. This is where we define our rules for deciding whether or not to serve content from the cache. Let’s look at our first rule:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>sub vcl_recv {</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment"># Never cache PUT, PATCH, DELETE or POST requests</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PUT"</span> || req.method == <span class="hljs-string">"PATCH"</span> || req.method == <span class="hljs-string">"DELETE"</span> || req.method == <span class="hljs-string">"POST"</span>) {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }</td></table></code></pre>
<p>Here, we declare that we should never cache any <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> or <code>POST</code> requests, on the basis that these change the state of the application. This ensures that things like contact forms will work as expected.</p>
<p>Note that we’re getting the value of <code>req.method</code> to determine the HTTP verb used. The <code>req</code> object has many other properties we’ll see being used.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Never cache cart, account, checkout or addons</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/(cart|my-account|checkout|addons)"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Never cache adding to cart</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"\?add-to-cart="</span> ) {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment"># Never cache admin or login</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"^/wp-(admin|login|cron)"</span> ) {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># Never cache WooCommerce API</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">if</span> ( req.url ~ <span class="hljs-string">"wc-api"</span> ) {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td></table></code></pre>
<p>Next, we define a series of regular expressions, and if the URL (represented by <code>req.url</code>) matches that regex, then the request is passed straight through to Apache without Varnish getting involved. In this case, we never want to cache the following sections:</p>
<ul>
<li>The shopping cart, checkout, addons page or account page</li>
<li>The Add to cart button</li>
<li>The WordPress admin and login screen, and cron requests</li>
<li>The WooCommerce API</li>
</ul>
<p>You’ll need to consider which parts of your site must always serve the latest content and which don’t need everything to be fully up to date. Typically admin areas any anything interactive must not be cached, while the front page is usually fine.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment"># Remove a ";" prefix, if present.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsub(req.http.Cookie, <span class="hljs-string">"^;\s*"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Remove the wp-settings-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-1=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Remove the wp-settings-time-1 cookie</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wp-settings-time-1=[^;]+(; )?"</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            , <span class="hljs-string">""</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Remove the wp test cookie</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-built_in">set</span> req.http.Cookie = regsuball(req.http.Cookie, <span class="hljs-string">"wordpress_test_cookie=[^;]+(; )?"</span>, <span class="hljs-string">""</span>);</td></table></code></pre>
<p>Cookies, even ones set on the client side such as those for Google Analytics, can prevent content from being cached. To prevent this, you need to configure Varnish to discard these cookies before passing them on to Apache. In this case, we want to exclude Google Analytics and various WordPress cookies.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Static content unique to the theme can be cached (so no user uploaded images)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"wp-content/themes/"</span> &amp;&amp; req.url ~ <span class="hljs-string">"\.(css|js|png|gif|jp(e)?g)"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">unset</span> req.http.cookie;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we allow static content that’s part of the site theme to be cached since that doesn’t change often, so we unset the cookies for that request.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Even if no cookies are present, I don't want my "uploads" to be cached due to their potential size</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"/wp-content/uploads/"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we prevent any user-uploaded content from being cached, since that can change often.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># any pages with captchas need to be excluded</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.url ~ <span class="hljs-string">"^/contact/"</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-built_in">return</span>(pass);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }</td></table></code></pre>
<p>Captchas must obviously never be cached since that will break them. In this case, we assume that the contact form has a captcha, so it gets excluded from the cache.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Check the cookies for wordpress-specific items</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cookie ~ <span class="hljs-string">"wordpress_"</span> || req.http.Cookie ~ <span class="hljs-string">"comment_"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># A wordpress specific cookie has been set</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }</td></table></code></pre>
<p>Here we check for remaining WordPress-specific cookies. These would indicate that a user is signed in, in which case we may want to serve them all the latest content rather than displaying content from the cache.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># allow PURGE from localhost</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">"PURGE"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">if</span> (!client.ip ~ purge) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-built_in">return</span>(synth(405, <span class="hljs-string">"Not allowed."</span>));</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-built_in">return</span> (purge);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }</td></table></code></pre>
<p>Remember where we allowed the local server to clear the cache? This section actually carries out the purge when it receives a request from an authorised client.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Force lookup if the request is a no-cache request from the client</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">if</span> (req.http.Cache-Control ~ <span class="hljs-string">"no-cache"</span>) {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-built_in">return</span> (pass);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we check to see if the <code>Cache-Control</code> HTTP header is set to <code>no-cache</code>. If so, we pass it straight through to Apache.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Try a cache-lookup</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-built_in">return</span> (<span class="hljs-built_in">hash</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>This is the last rule under <code>vcl_recv</code>, because it only reaches this point if the request has got past all the other rules. It tries to fetch the page from the cache. If the page is not in the cache, it passes it on to Apache and will cache the response.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>sub vcl_backend_response {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-built_in">set</span> beresp.grace = 5m;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>This is where we set how long responses are cached for. Here we’ve set it to 5 minutes.</p>
<p>With that done, we should be ready to restart Varnish and Apache. If you are using an operating system with <code>systemd</code>, then the following commands should restart Apache and Varnish:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo systemctl reload apache2.service</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo systemctl reload varnish.service</td></table></code></pre>
<p>For those not yet using <code>systemd</code>, try this instead:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo service apache2 restart</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo service varnish restart</td></table></code></pre>
<p>If you then visit your site and inspect the HTTP headers using your browser’s dev tools, you’ll notice the new HTTP header <code>X-Varnish</code> in the response. This tells you that Varnish is up and running. If you make sure you’re logged out, you should hopefully see that if you load a page, and then load it again, the second response is noticeably quicker.</p>
<p>Installing and configuring Varnish is a relatively quick and easy way of helping your website scale to be able to serve many more users, and if the site becomes popular all of a sudden, it can make a huge difference as to whether the site can stand up to the load or not. If you need more information on how to configure Varnish for your own needs, I recommend consulting the excellent <a href="https://www.varnish-cache.org/docs/4.0/">documentation</a>.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[When you should not use Wordpress]]></title>
            <link>http://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/</link>
            <guid>http://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/</guid>
            <pubDate>Sat, 22 Aug 2015 18:32:34 GMT</pubDate>
            <description><![CDATA[<p>I must admit, I’ve had a rather bad experience with WordPress recently. The site in question was an e-commerce site, built with WordPress and WooCommerce. In development, we originally put the site on shared hosting, but after a while the hosting company told us off because it was using too much database space, so we moved to a VPS earlier than we normally would. With the benefit of hindsight, we probably should have seen that as the first warning sign.</p>
<p>Then, once the site was up and running on the VPS, it got slower and slower, and eventually the server was killing MySQL off because it was using too many resources. I decided to install a benchmarking plugin and investigate why it was so slow. On loading the home page, it became obvious why the site was so slow - there were in excess of 300 queries on the home page. Looking elsewhere, some other pages were even worse, with one making over 1,000 queries!</p>
<p>At this point, I was practically hyperventilating. If I had written a web app that made that many queries on one page from scratch, I’d be seriously considering whether I was cut out for this industry. With an off-the-shelf CMS, you do have to accept some degree of bloat as a trade-off for quicker development time, but these numbers beggar belief.</p>
<p>I was able to mitigate this to some extent. First, I cut down the number of products shown on individual pages and audited the installed plugins, removing ones we could do without. This still left a lot more queries than I liked.</p>
<p>The next step was to enable caching. I installed Memcached and Varnish (incidentally, if you haven’t used Varnish before, you should check it out - it can make a huge difference for slow sites). I then installed and configured W3 Total Cache to work with them. This didn’t solve the fundamental problem of the initial page loads being too database-intensive, but it did mean that the result was cached for some time afterwards, making things easier on subsequent users.</p>
<p>This still wasn’t enough, however. The admin was still very slow, and often crashed. I actually wound up having to write a shell script that would check to see if MySQL was running and restart it if it wasn’t, and set up a cron job to run it every minute, just to ensure I wasn’t having to restart it myself. The issue was only really dealt with once we upped the specs on the VPS from 1GB RAM and 1 core to 3GB RAM and 2 cores, which should really have been overkill for something like WordPress.</p>
<p>As it turned out, the issue wasn’t exactly helped by the fact that someone had been making an unusually persistent attempt to brute-force <code>wp-login.php</code>. I was able to mitigate this by password-protecting it in the <code>.htaccess</code> file and adding some custom rules to fail2ban. But the fundamental problem remained that the resources used by WordPress to load a single page were grossly excessive.</p>
<p>Since then, we’ve continued to have some difficulties with it. There are some rather arcane criteria for calculating the shipping costs, and implementing them has been a real uphill struggle. We’ve also had to deal with breakages in the theme when updating WooCommerce, and other painful issues. It feels at times like the site will never be “done done”.</p>
<p>Now, I’ve had some issues with WordPress before, but this was by far the nastiest I’d ever seen, and it made me think very hard about when we should and should not consider WordPress as a solution. In hindsight, it would have been much easier to use Laravel to build the site from scratch - it would have made for a much leaner, more efficient site, updating the templates would have been a breeze, and implementing additional functionality would have been straightforward.</p>
<p>NB: I’m trying hard to make sure this is NOT one of those “WordPress sucks” blog posts. I’ll admit that I agree with many of the points from a lot of those, and I abandoned WordPress for my own site a long time ago in favour of a static site generator, but there are times when it is appropriate to use it. What I’m trying to do here is to help others avoid making the mistakes we did recently by giving some advice on when you should and should not use WordPress. Of course, your mileage may vary.</p>
<h2 id="why-was-wordpress-inappropriate-here-">Why was WordPress inappropriate here?</h2>
<p>With the benefit of hindsight, I can say that WordPress was definitely not the right solution in this case, and I will be advising against using it in similar circumstances. But why was it inappropriate?</p>
<ul>
<li><strong>Less flexible than rolling a custom solution</strong> - While the ecosystem of plugins and themes make it possible to use WordPress for a lot of use cases outside the core functionality of the platform, those plugins and themes aren’t infinitely flexible. If you want to do something one way and the plugin you’re using doesn’t support that, you’re out of luck unless you can fork the plugin or write a new one.</li>
<li><strong>Dependence on third party plugins</strong> - While we were working on the site, WooCommerce made some changes that broke the theme we were using. We were using a child theme, but updating the parent theme alone didn’t fix it - we had to then apply some of the changes to the child theme as well, which was extremely fiddly. As a result, we’re now very wary about updating plugins and themes. Yet we don’t dare put it off too long, because in my experience attempts to break into WordPress are common, and if you fail to install an upgrade that fixes a vulnerability in good time, you can easily find yourself getting a phone call about a site having been hacked (as I did in December last year).</li>
<li><strong>Poor performance</strong> - This is a big one, and I have therefore broken it down further:<ul>
<li><strong>Loading styling from the database</strong> - Many of the high end, customisable themes have large numbers of configuration options that can be used to style the site. The downside of these is that it creates additional queries to the database to fetch that data. Unless you have some form of caching in place, that data is loaded for every single request to the front end, generating a significant number of additional queries. You can mitigate this by rolling your own custom WordPress theme for the site, however.</li>
<li><strong>Too many queries</strong> - My experience has been that as a general rule of thumb, it’s much quicker to make a smaller number of more complex queries to a database than to make a larger number of simple queries. If you build a custom web app, you will always know exactly what data you want to retrieve on a particular page and through careful use of joins, can retrieve exactly the data you need with as few queries as possible. Being a generic solution, WordPress doesn’t know exactly what data you need on any one page, and so may fetch the data using an excessive number of queries. It may also fetch data you don’t actually need.</li>
<li><strong>Suboptimal database layout</strong> - The database schema for WordPress was originally created with a blog in mind, and may not always be optimal for your particular use case.</li>
<li><strong>Caching is not a silver bullet</strong> - You can do a lot to improve performance by installing Memcached and Varnish, and configuring a caching plugin to work with them. However, this doesn’t solve the problem of the excessive number of queries, it only mitigates the effects somewhat. Not everything can be cached, and the expensive queries will still have to be run at some point. Caching only increases the time between the queries. Also, configuring Varnish in particular can be something of a black art, and it’s easy to miss something and find out some functionality or other hasn’t been working.</li>
</ul>
</li>
</ul>
<p>WordPress has a lot of technical limitations and deficiencies from a programmer’s point of view. For all that, it works, it’s easy to set up, and there’s a wide variety of plugins and themes available, so it’s often an appropriate choice. While the performance is poorer than I would like, the harsh truth is that often it doesn’t matter - if your site isn’t serving a huge amount of page requests, a few extra queries don’t actually make all that much difference (within reason, of course). My concern is that use of WordPress when it’s entirely inappropriate is widespread.</p>
<h2 id="is-wordpress-being-overused-">Is WordPress being overused?</h2>
<p><img src="/static/images/wordpress-dane-cook.jpg" alt="Archer - WordPress? The Dane Cook of content management systems?"></p>
<p>I suspect I’m running the risk of being branded a hipster for saying this (“Now it’s popular, you hate WordPress…”), but the fact that WordPress is widespread and popular does not mean that it’s the best solution for your project. Nor does the fact that it’s technically possible to use it for your project.</p>
<p>A few years ago, I built a now-defunct site and mobile app for a client that monitored web pages, or product prices on web pages, for changes, and notified the user when a change occurred. It was built using CodeIgniter 2, and had an integrated blog. At one point, the client was unhappy because it wasn’t built with WordPress, believing that this was the reason why few people were signing up. To use WordPress for this project would have involved building the additional functionality, including the API for the mobile app, as a plugin, which would have slowed down development considerably - in my experience it’s generally much harder to build something as a WordPress plugin than using an MVC framework due to the lack of separation of concerns, which makes the code base more confusing.</p>
<p>This is a good example of the alarming trend I’ve noticed in the last few years whereby a large number of people seem to be under the mistaken impression that WordPress is some kind of all-singing, all-dancing general purpose solution for building websites. I suspect that the reason for this may be that WordPress is commonplace enough that people outside of the web industry have often heard of it, and therefore they often ask for it since it’s what they’ve heard of, not knowing whether or not it’s actually appropriate for their needs. What isn’t always apparent to non-developers is that it’s often considerably easier for a developer to implement the core functionality of WordPress using a modern MVC framework than it is for them to implement the other functionality using WordPress, and as the functionality is being built with your exact use case in mind, the user interface is often more straightforward than the WordPress admin. Also, the WordPress privilege system can make it difficult for you to limit the user to just the functionality you want them to have, resulting in a situation where either you give the users a potentially dangerous level of access, or force them to contact you to make certain changes, making more work for you.</p>
<p>I’ve heard plenty of people say things like “WordPress is a framework” and “A competent developer can build anything with WordPress”. These claims are utter hogwash. A competent developer is smart enough to recognise that WordPress is not a one-size fits all solution and it’s not always appropriate to use it - you can easily spend more time trying to get it to do something off the beaten track than it would take to build that functionality from scratch. I think the way that Automattic are trying to promote WordPress as an application framework is a really bad idea - trying to use it for this is much more cumbersome than using a modern PHP framework like Laravel.</p>
<p>Even if you ignore the technical deficiencies of WordPress, it is too opinionated to be a good solution for use as a framework, and as such you’ll spend a lot of time trying to work around the existing implementations of existing functionality when they don’t quite meet your requirements.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For all its flaws, WordPress is very useful. It’s generally a good choice for blogs, brochure-style sites, and small e-commerce solutions where the client is not too fussy about the details of how it works. For virtually every other situation, I plan on looking elsewhere in future.</p>
]]></description>
            <content:encoded/>
        </item>
        <item>
            <title><![CDATA[Testing Django views in isolation]]></title>
            <link>http://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/</link>
            <guid>http://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/</guid>
            <pubDate>Sun, 02 Aug 2015 16:58:45 GMT</pubDate>
            <description><![CDATA[<p>One thing you may hear said often about test-driven development is that as far as possible, you should test everything in isolation. However, it’s not always immediately clear how you actually go about doing this. In Django, it’s fairly easy to get your head around testing models in isolation because they’re single objects that you can just create, save, and then check their attributes. Forms are also quite easy to test, because you can just set the parameters with the appropriate values and check that the validation works as expected. With views, it’s much harder to imagine how you’d go about testing them in isolation, and often people just settle for writing higher-level functional tests instead. While functional tests are important, they’re also slower than unit tests, which makes it less likely they’ll be run often. So I thought I’d show you a quick and simple example of testing a Django view in isolation.</p>
<p>One of the little projects I’ve written in the past to help get my head around certain aspects of Django is a code-snippet sharing Django application which I named <a href="https://github.com/matthewbdaly/snippetr">Snippetr</a>. The index route of this application is a form for submitting a brand-new code snippet and I’ll show you how we would write a test for that.</p>
<h2 id="testing-a-get-request">Testing a GET request</h2>
<p>Before now, you may well have used the Django test client to test views. That is fine for higher-level tests, but if you want to test a view in isolation, it’s no use because it emulates a real web server and all of the middleware and authentication, which we want to keep out of the way. Instead, we need to use <code>RequestFactory</code>:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</table></code></pre>
<p><code>RequestFactory</code> actually implements a subset of the functionality of the Django test client, so while it will feel somewhat familiar, it won’t have all the same functionality. For instance, it doesn’t support middleware, so rather than logging in using the test client’s <code>login()</code> method, you instead attach a user directly to the request, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>request = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>request.user = user</td></table></code></pre>
<p>You have to specify the URL in the request, but you also have to explicitly pass the request through to the view you want to test, which can be a bit confusing. Let’s see it in context. First of all, we want to write a test for making a GET request:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnippetCreateViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Test the snippet create view</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        self.user = UserFactory()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        Test GET requests</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'snippet_create'</span>))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'user'</span>], self.user)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'request'</span>], request)</td></table></code></pre>
<p>First of all, we define a <code>setUp()</code> method that creates a user and an instance of <code>RequestFactory()</code> for use in the test. Note that I’m using Factory Boy to define <code>UserFactory</code> in order to make it easier to work with. Also, if you have more than one view to test, you should create a base class containing the <code>setUp()</code> method that your view tests inherit from.</p>
<p>Next, we have our test for making a GET request. Note that we’re using the <code>reverse()</code> method to get the route for the view named <code>snippet_create</code>. You’ll need to import this as follows if you’re not yet using it:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</table></code></pre>
<p>We then attach our user object to the request manually, and fetch the response by passing the request to the view as follows:</p>
<pre><code class="hljs lang-python singleline"><table>    response = SnippetCreateView.as_view()(request)</table></code></pre>
<p>Note that this is the syntax used for class-based views - we call the view’s <code>as_view()</code> method. For a function-based view, the syntax is a bit simpler:</p>
<pre><code class="hljs lang-python singleline"><table>    response = my_view(request)</table></code></pre>
<p>We then test our response as usual. In this case, the view adds some additional context data, and we check that we can access that, as well as checking the status code.</p>
<h2 id="testing-a-post-request">Testing a POST request</h2>
<p>Testing a POST request is a little more challenging in this case because submitting the form will create a new <code>Snippet</code> object and we don’t want to interact with the model layer at all if we can help it. We want to test the view in isolation, partly because it will be faster, and partly because it’s a good idea. We can do this by mocking the <code>Snippet</code> model’s <code>save()</code> method.</p>
<p>To do so, we need to import two things from the <code>mock</code> library. If you’re using Python 3.4 or later, then <code>mock</code> is part of <code>unittest</code> as <code>unittest.mock</code>. Otherwise, it’s a separate library you need to install with <code>pip</code>. Here’s the import statement for those on Python 3.4 or later:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> unittest.mock <span class="hljs-keyword">import</span> patch, MagicMock</table></code></pre>
<p>And for those on earlier versions:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-keyword">from</span> mock <span class="hljs-keyword">import</span> patch, MagicMock</table></code></pre>
<p>Now, our test for the POST requests should look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">    @patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        Test post requests</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the request</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My snippet'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'content'</span>: <span class="hljs-string">'This is my snippet'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'snippet_create'</span>), data)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Get the response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">302</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check save was called</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertTrue(Snippet.save.called)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEqual(Snippet.save.call_count, <span class="hljs-number">1</span>)</td></table></code></pre>
<p>Note first of all the following line:</p>
<pre><code class="hljs lang-python singleline"><table><span class="hljs-meta">    @patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></table></code></pre>
<p>Here we’re saying that in this test, when the <code>save()</code> method of the <code>Snippet</code> model is called, it should instead call a mocked version, which lacks the functionality and only registers that it has been called and a few details about it.</p>
<p>Next, we put together the data to be passed through and create a POST request for it. As before, we attach the user to the request. We then pass the request through in the same way as for the GET request. We also check that the response code was 302, meaning that the user would be redirected elsewhere after the form was submitted correctly.</p>
<p>Finally, we assert that <code>Snippet.save.called</code> is true. <code>called</code> is a Boolean value, representing whether the method was called or not. We also check the value of <code>Snippet.save.call_count</code>, which is a count of the number of times the method was called - here we check that it’s set to 1.</p>
<p>As you can see, while the request factory is a little harder than the Django test client to figure out, it’s not too difficult once you get the hang of it. By combining it with judicious use of <code>mock</code>, you can easily test your views in isolation, and without having to interact with the database or set up any middleware, these tests will be much faster than those using the Django test client.</p>
]]></description>
            <content:encoded/>
        </item>
    </channel>
</rss>